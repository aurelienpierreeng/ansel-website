"""
Clean-up translations generated by ChatGPT or other AI translators, namely:

- ensure double quotes delimiting Gettext strings are not escaped,
- ensure double quotes within Gettext strings are escaped,
- ensure newline characters match between msgid and msgstr.

This deals with the fact that AI translators are wonky when it comes to properly
handle formatting.

Usage:
  `python tools/clean-translations.py po/content.LANG.po`.

Notes:
  - creates a backup of the original file,
  - doesn't deal with all corner cases but significantly reduces manual corrections.

Copyright © Aurélien Pierre - 2025.

"""

import sys
import regex as re

FILE = sys.argv[1]

content = ""

# Select single- or multiple-line Gettext strings, discarding comments
dq_line = re.compile(
    r'^(?:msgid|msgstr) (.*)$'
    r'|^(?!#)(.+)$', re.MULTILINE,
)

lines = re.compile(r'"(.+)"')

def cleanup_quotes(line: str) -> str:
    # Brutally remove all enclosing (final/terminal) quotes, whether escaped or not
    new_line = line.strip('\"\\"')

    # In case we have a mix of escaped and unescaped double quotes, in the line inner content,
    # brutally unescape all of them, and then re-escape them all.
    # This prevents double escaping or special/contextual handling preventing it.
    new_line = new_line.replace('\\"', '"').replace('"', '\\"')

    # Enclose the final result within non-espaced double quotes
    return f'"{new_line}"'


with open(FILE, "r") as f:
  content = f.read()

with open(FILE + ".bck", "w") as f:
  f.write(content)

# Ensure initial and terminal double quote are unescaped, but internal double quotes are
for item in content.split("\n\n"):
  for line in [line[0] or line[1] for line in dq_line.findall(item)]:
    if content.find(line) > -1:
      content = content.replace(line, cleanup_quotes(line))
    else:
      print("not found:", line)

# Ensure each translated line ends with \n if original ends with one,
# and the other way around.
for item in content.split("\n\n"):
  # Split original and translation lines
  groups = re.split(r'(?:msgid|msgstr)', item)

  # groups[0] = .po comments
  original = lines.findall(groups[1])
  translation = lines.findall(groups[2])

  # Replace line by line
  for o, t in zip(original, translation):
    if o.endswith("\\n") and not t.endswith("\\n"):
      print("replacing", t)
      content = content.replace(t, t + "\\n")
    elif not o.endswith("\\n") and t.endswith("\\n"):
      print("replacing", t)
      content = content.replace(t, t.strip("\\n"))


with open(FILE, "w") as f:
  f.write(content + "\n")
