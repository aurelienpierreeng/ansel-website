# Portuguese translations for PACKAGE package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-05-03 03:17+0200\n"
"PO-Revision-Date: 2025-04-24 17:40+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: pt_br\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#. type: Yaml Front Matter Array Element: authors
#: content/news/rewriting-import/index.md:1 content/news/dev-diary-2.md:1
#: content/news/changes-appimage.md:1 content/news/new-build-options-linux.md:1
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:1
#: content/news/implementing-kill-switch.md:1
#: content/news/welcome-dev-docs/index.md:1
#: content/news/fixing-pipe-cache-10-yo-bugs.md:1 content/news/dev-diary-1.md:1
#: content/news/modules-groups-redesign/index.md:1
#: content/news/undarktable-ing-gui-controls.md:1
#: content/resources/lexicon.md:1 content/resources/misconceptions.md:1
#: content/resources/readings.md:1 content/resources/troubleshooting-color.md:1
#: content/resources/white-balances/index.md:1
#: content/workflows/film-scan/index.md:1
#: content/workflows/monochrome-toning/index.md:1
#: content/workflows/basic-editing.md:1
#: content/workflows/scene-referred/index.md:1
#: content/workflows/printing/index.md:1
#, no-wrap
msgid "Aurélien Pierre"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/news/rewriting-import/index.md:1 content/news/dev-diary-2.md:1
#: content/news/new-build-options-linux.md:1
#: content/news/implementing-kill-switch.md:1
#: content/news/welcome-dev-docs/index.md:1
#: content/news/fixing-pipe-cache-10-yo-bugs.md:1 content/news/dev-diary-1.md:1
#: content/news/undarktable-ing-gui-controls.md:1
#, no-wrap
msgid "Development"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/news/rewriting-import/index.md:1
#, no-wrap
msgid "Redesign"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/rewriting-import/index.md:1
#, no-wrap
msgid "Rewriting the import tool"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:12
#, no-wrap
msgid "Ansel inherits from Darktable its database backbone: the non-destructive editing histories are saved per-picture into an SQLite database, along with metadata and other user-defined data. Making the database aware of new pictures is done through \"importing\" pictures from a disk or a memory card. That's where the import tool comes.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:14
#, no-wrap
msgid "Unfortunately, the Darktable importer is another thing that was butchered circa 2020 and turned into something deeply disconcerning, as it is a file browser that resembles no previously-known file browser, and manages to lack basic features (like Ctrl+F or EXIF preview) while still being bloated with useless ones (see below). This is where we loose many a future user, and it is only step 0 of the workflow. What a great showcase of what a \"workflow app\" can do !\n"
msgstr ""

#. type: Title ##
#: content/news/rewriting-import/index.md:15
#, no-wrap
msgid "A design review of what design by commitee will get you"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:18
#, no-wrap
msgid "So Darktable has the import button<em>s</em> on a sidebar widget. There are 3 of them if you plugged-in a camera through USB, 2 otherwise:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:20
#, no-wrap
msgid "![](darktable-import-module.jpg \"The import module in Lighttable\")\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:22
#, no-wrap
msgid "Many forum posts have been lost on explaining times and times again what the difference was between _add to library_ and _import and copy_ (_import_ actually means _add to library_). It is also worth mentionning that the _mounting camera_ button does nothing more than what any system-wide [PTP](https://en.wikipedia.org/wiki/Picture_Transfer_Protocol) or [MTP](https://en.wikipedia.org/wiki/Media_Transfer_Protocol) driver does for you: mounting the internal SD card as an external USB storage, through the USB port of the camera. On Windows this requires installing a custom USB driver that will prevent your camera to work with the rest of the OS. On Linux, depending whether your OS has \"auto-mount\" enabled, you might have to dismount the camera from your desktop file browser first, otherwise it will lock the link. On all OS, this requires listening to new devices in background all the time so the application can react to hot-plugging, whether or not you are going to use the feature.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:24
#, no-wrap
msgid "And then, there is the _parameters_. Since 2022, the Darktable team has fell madly in love with those collapsible trays that hide the bloat under more bloat. And the bloat you can find in there does nothing more than hitting <kbd>Ctrl+A</kbd> (select all pictures), and then <kbd>0</kbd> or <kbd>1</kbd> (to assign an initial rating of 0 or 1 star) or filling the metadata info (in batch) in the eponymous module, which stands in the lighttable GUI whether you like it or not, and supports presets in case you always reuse the same metadata. The reason why adding these parameters there was even a requirement in the first place is beyond me. Someone, somewhere, is probably sparing 0.5 s per import session, which the rest of the world is losing by scrolling more height.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:26
#, no-wrap
msgid "So, provided you understood the differences between all those options, now you click _import and copy_, which is probably the most used since any photographer needs to empty the SD cards to a more permanent stofrage. And then…\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:28
#, no-wrap
msgid "![](darktable-wtf.jpg \"Did you pass your file-copying exam before using this feature ?\")\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:30
#, no-wrap
msgid "This is basically admitting that the design is so terrible that it's verging on unsable without reading the doc. But wait, what are we doing again ? We are copying pictures. We are copying pictures ? So did you pass your picture-copying exam and got your picture-copying degree ? If you didn't, you should. Watch out, they might turn this into a quizz in a future version and disable the feature if you fail it.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:32
#, no-wrap
msgid "So you click on that ominious button saying that you take full responsibility for whatever harm may happen from copying pictures. Or you don't, given that it looks kinda scary. But let's say you do…\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:34
#, no-wrap
msgid "![](darktable-import-window.jpg \"All I wanted was pictures…\")\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:36
#, no-wrap
msgid "Wait, where are the pictures ? Is that a log reader ? Throw a 12 dice, and if you do an 8, you will figure out that those eyes icon are responsive and, once clicked, display a thumbnail. Hell, if you click on the eye in the column header, it will show all thumbnails at once. And mess up the row spacing, but we run for the chocolate medal here, so it's fair enough:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:38
#, no-wrap
msgid "![](darktable-import-images.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:40
#, no-wrap
msgid "Be seated for the rest, you are not ready:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:49
#, no-wrap
msgid ""
"1. The _folders_ thingy on the left column is actually a button: when you click it, that changes the order of appearance of those folders.\n"
"2. The _places_ frame tries to emulate the _favourite_ or _bookmarks_ from your OS desktop manager, but don't import them.\n"
"3. The _recursive directory_ checkbox is not an option, it's an action. But then it doesn't act on whatever you selected on the right column, because those are only pictures. What it does is take the folder selected on the left column, and populates the list of pictures by recursively crawling the selected folder and its children.\n"
"4. The _select new pictures_ is, once again, not an option but an action, aka something that the rest of the world puts in a button.\n"
"5. The field _override today's date_ is a workaround for the fact that the picture `EXIF` date can't be used in folder patterns, so by default we use today's date. Except if this field is filled. But it needs to be filled with a datetime following ISO 8601 format. Which I didn't here, and the window is not complaining at all because form inputs validation is less fun than letting users find out at the next step that they have to start again from scratch because of bad datetime format. Boy, that's a lot of background knowledge to have to fill out a goddam date, I'm very lucky I learned all that from reading the source code.\n"
"6. The _keep original filename_ option is fully redundant with using the naming pattern `$(FILE_NAME).$FILE_EXTENSION)`,\n"
"7. The naming patterns use variables masks `$()` that get replaced at runtime by actual file's properties, but you need to know them to be able to use them. As if a guy named Houz didn't write a library circa 2011 to implement auto-completion in text inputs for those variables, that you can simply call in your code to make it work in 2 lines (it is used in export module).\n"
"8. The naming patterns found there are duplicated in Darktable's preferences popup because you might need to change them when you are not importing anything.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:51
#, no-wrap
msgid "This is made of the material of frustration. What is truly amazing is how many persons have worked on this feature over the years to get there. Some would call it [collective intelligence](https://en.wikipedia.org/wiki/Collective_intelligence), but it's actually called [design by commitee](https://en.wikipedia.org/wiki/Design_by_committee).\n"
msgstr ""

#. type: Title ##
#: content/news/rewriting-import/index.md:52
#, no-wrap
msgid "A new take, or erasing scruffiness out of step 0"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:55
#, no-wrap
msgid "Importing images is truly the step 0 of working with any image editing application. It's unacceptable to lose users so early, especially since we expect so much from them later, when it comes to understanding light and color. But I will argue that light and color are the bread and butter of any graphic artist, and it seems fair to expect from photo-editing users to master the basics of their craft at some point.[^4] On the other side, asking users to get their master's degree in file copying is unacceptable.\n"
msgstr ""

#. type: Link reference
#: content/news/rewriting-import/index.md:56
#, no-wrap
msgid "[^4]: Yes, I know it's already too much to ask in most cases."
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:59
#, no-wrap
msgid "Guillaume Stutin and myself have therefore rewritten the import tool entirely, first the front-end and then the back-end. Here is the result.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:61
#, no-wrap
msgid "![](ansel-import-menu.jpg \"The import window is opened from the global menu, optionally with the shortcut\")\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:63
#, no-wrap
msgid "The option to directly mount cameras memory card from GPhoto2 has been removed entirely, since OS can handle this step directly if needed. There is only one entry point to import. Then you get the filechooser window:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:65
#, no-wrap
msgid "![](ansel-import-window.jpg \"The import window is a vanilla Gtk filechooser\")\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:67
#, no-wrap
msgid "The file browser is a native Gtk filechooser widget, meaning the OS bookmarks (and even here the Nextcloud synchronized folders) are automatically imported from the desktop environment. The picture preview has been extended with EXIF metadata as to better identify images. A look-up into the library database shows whether or not the picture was already imported into Ansel or Darktable, and where.[^1]\n"
msgstr ""

#. type: Link reference
#: content/news/rewriting-import/index.md:68
#, no-wrap
msgid "[^1]: This reuses the Darktable code but with a clearer display."
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:71
#, no-wrap
msgid "Image types (raw, non-raw or all) are filtered using native Gtk filters and the full list of files to import is built straight in the GUI, without second-guessing in the back-end. When folders are selected, their content is automatically crawled recursively and the first image of the collection is shown. The final number of images detected is displayed below the file chooser:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:73
#, no-wrap
msgid "![](ansel-import-recursive.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:75
#, no-wrap
msgid "Many sorting and display options are natively handled by the Gtk filechooser, including search (through <kbd>Ctrl+F</kbd>), without additional work:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:77
#, no-wrap
msgid "![](ansel-import-search.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:79
#, no-wrap
msgid "The file handling option enables the import with or without copy, the label explains the difference in full words:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:81
#, no-wrap
msgid "![](ansel-import-copy.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:83
#, no-wrap
msgid "The _project date_ is automatically set to today's, no override or anything that would suggest something undisclosed is otherwise happening by default. To set the date, a calendar widget is provided which automatically formats date in the right ISO format. If the date is typed directly in the text input, a format validation is performed and an error feedback is displayed:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:88
#, no-wrap
msgid ""
"{{< gallery cols=\"2\" >}}\n"
"![](ansel-import-calendar.jpg)\n"
"![](ansel-import-date-validation.jpg)\n"
"{{</ gallery >}}\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:90
#, no-wrap
msgid "Note that only the date (year, month, day) is supported by the calendar widget. Setting the time (hour, minute, second) needs to be done manually in the text field. Surveys show this is rarely needed.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:92
#, no-wrap
msgid "The folder and file naming patterns support variables auto-completion automatically, when `$(` is typed. The new import back-end supports using EXIF fields of images to define folders names, for example a folder pattern like `$(JOBCODE)-$(EXIF.ISO)` would split pictures into several folders named after their ISO metadata. When this happens, the lighttable opens the last created folder when the import window closes:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:94
#, no-wrap
msgid "![](ansel-import-autocompletion.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:96
#, no-wrap
msgid "Last but not least, an user-requested feature: being able to preview the result of the patterns defined on the currently-selected picture:\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:98
#, no-wrap
msgid "![](ansel-import-pattern.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:100
#, no-wrap
msgid "The pattern result follows the selected files and folders, as well as any change in the main folder and patterns. Note that the base directory (for all projects) doesn't accept patterns anymore, since there is no reason to put patterns everywhere, which allows to use a safe and simple Gtk folder list widget. This way, at least the top-level Ansel folder is set in a robust and user-friendly manner, and if harms happens from naming patterns, it will be enclosed within something predictable.\n"
msgstr ""

#. type: Title ##
#: content/news/rewriting-import/index.md:101
#: content/news/fixing-pipe-cache-10-yo-bugs.md:126
#: content/news/modules-groups-redesign/index.md:145
#: content/workflows/monochrome-toning/index.md:60
#: content/workflows/monochrome-toning/index.md:85
#: content/workflows/monochrome-toning/index.md:123
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:104
#, no-wrap
msgid "It should be noted that this simpler graphical design comes also with a much simpler code structure, fewer lines and a more linear logic. The front-end needs 1200 lines, and the back-end around 400 lines (comments included, _the new backend has Doxygen docstrings almost everywhere_). A lot of the front-end volume of code comes from the recursive folder crawler, which runs in a separate thread to not block the GUI thread, but still updates the file counts periodically for feedback. This has been tested with folders of more than 60.000 images.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:106
#, no-wrap
msgid "Darktable has more than 2700 lines of front-end and more than 800 lines of back-end (no docstrings). Also, the Darktable architecture expects one target folder per import session, which forbids to use per-picture EXIF in folder's naming patterns, and has completely different code pathes to handle the with copy/without copy discrepancies. This makes it difficult to keep both pathes in sync because they still share some bits (adding to the database and initializing metadata). In Ansel, we merged both pathes with only an optional initial I/O to copy the files if needed.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:108
#, no-wrap
msgid "Ansel's front-end and back-end import communicate through a stupid-simple list of file pathes, which means the back-end is not second-guessing whatever user decision was made in the GUI. Also, all GUI code has been removed from the backend. This is a generic and robust design that will allow alternative ways to produce a list of files to import, for example headless (from a script). Previously, things like JPG filtering or files re-ordering happened in the back-end.[^3]\n"
msgstr ""

#. type: Link reference
#: content/news/rewriting-import/index.md:109
#, no-wrap
msgid "[^3]: The whole notion of back-end vs. front-end is new to the Darktable ecosystem, as you will find GUI (Gtk) functions pretty much everywhere, protected by a recurring `if(darktable.gui)` to prevent segmentation faults when the software runs from CLI."
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:112
#, no-wrap
msgid "The main appeal of the scrubbed design is that all the info needed to understand what's what is accessible right into the window, without having to open a documentation. In case of destination filename conflicts during import with copy, users are warned with a popup window and the existing files are never overwritten. Not to mention, the whole thing resembles a typical file browser.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:114
#, no-wrap
msgid "Some users have also expressed the wish to use the editing features of the software without being bothered with the oddity of the internal digital assets management (the lighttable, mostly). This new importer allows them to open single images directly into the darkroom through double-click on file or click on file + click on the _import_ button, effectively bypassing the lighttable entirely.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:116
#, no-wrap
msgid "The naming patterns have, of course, been removed from the preferences popup (which, by the way, can be found from the global menu, through _Edit_ → _Preferences_, as in any sane software).\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:118
#, no-wrap
msgid "_Many thanks to Guillaume Stutin for his tedious work on this topic_.\n"
msgstr ""

#. type: Plain text
#: content/news/rewriting-import/index.md:121
#, no-wrap
msgid ""
"{{< note >}}\n"
"The new importer is available for Ansel build versions > 0.0.0+780.\n"
"{{</ note >}}\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/dev-diary-2.md:1
#, no-wrap
msgid "Dev diary #2 : introducing Chantal"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:11
#, no-wrap
msgid "2022 was so bad in terms of junk emails and noise that I started the [Virtual Secretary](https://virtualsecretary.aurelienpierre.com/), a Python framework to write intelligent email filters by crossing information between several sources to guess what incoming emails are and whether they are important/urgent or not. When I'm talking about junk emails, it's also Github notifications, pings on pixls.us (thank God I closed my account on that stupid forum), YouTube, and direct emails from people hoping to get some help in private.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:13
#, no-wrap
msgid "Having become \"the face\" of darktable, mostly because I'm one of the few to bother providing user education and training instead of just pissing code, I didn't see that coming, and I wasn't prepared. A lot of people now mistake me with the front desk, which doesn't help abstract thinking on coding matters, let alone taking time to actually produce art. The problem is all the time lost dealing with info/noise/input is not spent solving problems, and time is the only thing for which you cannot get a refund.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:15
#, no-wrap
msgid "After a while, I figured it would be nice to extend the Virtual Secretary with a machine-learning classifier, which would guess in what folder incoming emails should go, by extracting the content of the emails already in said folder. It's actually much easier to implement than what I thought, but the time-consuming bit is to write text filters to clean-up the input (because garbage in, garbage out, especially for spam emails which are generally improperly formatted).\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:17
#, no-wrap
msgid "But the ultimate goal, in my wildest dreams, was to build an autoresponder for people asking questions already answered on one of the many websites I have contributed to over the years. It's a constant frustration to see that all the pages of doc I have written over the years are lost in Internet limbo. On FLOSS-centric forums, benevolent guys also tend to experience the same kind of fatigue : repeating again and again the same info, linking the same pages, to never-ending hords of newbies who don't know what to look for. Just look at Reddit darktable : every 14 days, someone else asks why the lighttable thumbnails don't look like the darkroom preview. Even discarding the amount of frustration and angryness here, the number of man-hours lost in repeating is outstanding. Just because information is lost.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:19
#, no-wrap
msgid "The true problem of search engines is you need to know what keywords to look for. Which is circling back to the fact that newbies don't know the slang. So they don't know what to look for. They don't have any entry point in the matrix. Except other humans. Which sucks for the ones having to do the work, usually for free.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:21
#, no-wrap
msgid "After merging a neural layer of word2vec word embedding (big words to say it's unsupervised machine learning finding how words are contextually related in sentences, that is finding syntactical structures, synonyms and the likes), as a first step in my email classifier (which is now up to 92 % accuracy), I wondered if this wouldn't been usable to build a context-aware and synonym-aware search engine, able to look past exact keywords.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:23
#, no-wrap
msgid "Turns out a couple of guys from Bing had the same idea in 2016, and published their maths, so I implemented them. Then proceeded to add a web interface on top. That gave birth to [Chantal](https://chantal.aurelienpierre.com), the AI you are kindly asked to bother before bothering me. The current version is trained against 101.000 internet pages from my own websites, darktable & Ansel docs, along with some reliable color-science ressources. It indexes 15.500 pages in French and English and can process search queries in either or both of these languages. One of its mean features is to propose you a list of keywords associated to your query, so you can refine/reorient/try things you wouldn't have thought of before.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:25
#, no-wrap
msgid "Hope that helps.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:27
#, no-wrap
msgid "That work showed me how poorly indexable many websites are. To account for the lack of XML sitemap on forums.darktable.fr and color.org, I had to write a recursive crawler. But even then, many pages don't have description meta tags and a proper date tag. It means you need to use regular expressions and indirect methods trying to identify the metadata, and manually tune the HTML parser to extract the actual content part of the webpage (discarding sidebars, menus, asides and advertising if any).\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:29
#, no-wrap
msgid "Then, you get to love Q&A forums like Stack Overflow, where proper questions start a thread, proper answers follow, and the best answers are selected by the community. \"Thank you\" and \"me too\" messages are explicitly forbidden in the conditions of use. On forums like pixls.us or forums.darktable.fr, proper technical information gets lost in the middle of semi-technical rambling, life stories and bros bonding over tales of software, in a continuous thread where nothing distinguishes relevant from irrelevant, accurate from inaccurate, and gross misunderstandings of color theory. From a machine crawling perspective, there is very little to exploit here, and investing time on such platform is a dry loss.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:31
#, no-wrap
msgid "More (technical) info:\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-2.md:34
#, no-wrap
msgid ""
"- [Websites suck](https://eng.aurelienpierre.com/2023/04/websites-suck./) : on the technical challenges of crawling and indexing HTML (and… PDF) webpages, in a time where people say big things like \"Web 4.0\" or \"Internet of Things\", but basic things like providing page sitemaps or putting the date of internet publications in standard formats is still too much to ask of webmasters and CMS,\n"
"- [Designing an AI search engine from scratch in the 2020's](https://eng.aurelienpierre.com/2024/03/designing-an-ai-search-engine-from-scratch-in-the-2020s/) : on how Chantal was built and how the Dumbrish synthetic language was created to generalize natural French and English, plus some regex bonanza,\n"
"- [Thoughts on Word2Vec AI for information retrieval applications](https://eng.aurelienpierre.com/2025/05/thoughts-on-word2vec/) : on how the input cleanup is by far the worst time-consuming step of designing an AI and language models that become too semantically accurate don't make better search engines.\n"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/news/changes-appimage.md:1
#, no-wrap
msgid "Announcement"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/changes-appimage.md:1
#, no-wrap
msgid "Changes in distribution support for Linux AppImage package"
msgstr ""

#. type: Plain text
#: content/news/changes-appimage.md:11
#, no-wrap
msgid "Rawspeed (the library providing the decoders for camera raw files) has deprecated support for GCC < 12. As a result, I can no longer build the AppImage on Ubuntu 20.04 (using Github runners) but I have to build it on 22.04.\n"
msgstr ""

#. type: Plain text
#: content/news/changes-appimage.md:12
#, no-wrap
msgid "It means any Linux distribution having libc older than 2.35 will not be able to start the new AppImages starting today. That should not affect most users running distributions upgraded in 2021 or more recently. Ubuntu 20.04 and other LTS/old stable distributions (Debian stable) may be affected.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/new-build-options-linux.md:1
#, no-wrap
msgid "New build options for Linux"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:11
#, no-wrap
msgid "I accidentally discovered that the Linux build script used a \"package\" build, meaning the CPU optimizations are limited to generic ones in order to produce portable binaries that can be installed on any x86-64 platform. By \"using\", I mean the package build was not explicitely disabled, so it was enabled by default.\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:13
#, no-wrap
msgid "Anyway, this is now disabled by default, since the actual packages (.exe and .appimage) are not built through that script, which is primarily meant to help end-users. To get the previous behaviour back, you would need to run:\n"
msgstr ""

#. type: Fenced code block
#: content/news/new-build-options-linux.md:14
#, no-wrap
msgid "$ sh build.sh --build-package --install --sudo\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:19
#, no-wrap
msgid "Not using the package build option may increase performance on CPU by 20 to 30 % depending on your hardware, thanks to platform-specific optimizations.\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:21
#, no-wrap
msgid "I have also introduced a new argument that will launch the Git updating commands that users seem to forget all the time. There is a caveat, though : updating the source code by calling Git from within the script doesn't update the script for the current run, so this method doesn't work when the script itself is modified. Fortunately, we don't change this script often.\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:23
#, no-wrap
msgid "The argument to update the source code and the submodules (Rawspeed, Libraw) :\n"
msgstr ""

#. type: Fenced code block
#: content/news/new-build-options-linux.md:24
#, no-wrap
msgid "$ sh build.sh --update --install --sudo\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:29
#, no-wrap
msgid "I have also modified the internals of that script in order to automatically :\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:33
#, no-wrap
msgid ""
"- update the Lensfun database of lenses,\n"
"- add a global system shortcut (.desktop file) so the software will be globally available from the app menus,\n"
"- add a global system command so the ansel is globally available from the terminal.\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:35
#, no-wrap
msgid "The goal of all these changes is obviously to make it more user-friendly to use a self-built version of the software, allowing to improve performance, especially for computers without GPU. The one-pit-stop command would be :\n"
msgstr ""

#. type: Fenced code block
#: content/news/new-build-options-linux.md:36
#, no-wrap
msgid "$ sh build.sh --update --install --sudo --clean-all\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:41
#, no-wrap
msgid "But of course, you will need to run the Git update manually one last time before, to update the script itself :\n"
msgstr ""

#. type: Fenced code block
#: content/news/new-build-options-linux.md:42
#, no-wrap
msgid "$ git pull --recurse-submodule\n"
msgstr ""

#. type: Plain text
#: content/news/new-build-options-linux.md:46
#, no-wrap
msgid "Alternatively, you can directly download the build script, and replace the old build.sh one at the root of the source code directory.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:1
#, no-wrap
msgid "Darktable : crashing into the wall in slow-motion"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:10
#, no-wrap
msgid "What happens when a gang of amateur photographers, turned into amateur developers, joined by a bunch of back-end developers who develop libraries for developers, decide to work without method nor structure on an industry software for end-users, which core competency (colorimetry and psychophysics) lies somewhere between a college degree in photography and a master's degree in applied sciences, while promising to deliver 2 releases each year without project management ? All that, of course, in a project where the founders and the first generation of developers moved on and fled ?\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:12
#, no-wrap
msgid "Guess !\n"
msgstr ""

#. type: Title ##
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:14
#, no-wrap
msgid "Degrading basic features"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:17
#, no-wrap
msgid "The 2020's are 40 years too late to re-invent interaction paradigms between user and computer, being it how we use a keyboard and a mouse to drive the interface or the behaviour of a file browser. Since the 1980's, all the general-audience computer appliances have converged toward more or less unified semantics, where the <kbd>escape</kbd> key closes the current application, double-click opens files and the mouse wheel scrolls the current view. Darktable[^1] takes an ill-placed pleasure to ignore all that and the recent changes worsen things : it is now mandatory to read the documentation to achieve tasks as simple as sorting files or assigning keyboard shortcuts to GUI actions.\n"
msgstr ""

#. type: Link reference
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:18
#, no-wrap
msgid "[^1]: By the way, I can no longer bare the attempt of being different for the sake of it by writing \"Darktable\", proper noun, without initial capital. It's childish, it's neither funny or disruptive, and it makes a mess of [freedesktop.org](https://github.com/darktable-org/darktable/blob/master/data/org.darktable.darktable.desktop.in) menus where the capital is anyway added to follow the standard."
msgstr ""

#. type: Title ###
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:20
#, no-wrap
msgid "Module groups"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:23
#, no-wrap
msgid "Everything begins with the overhaul of the [modules groups](https://docs.darktable.org/usermanual/4.0/en/darkroom/organization/manage-module-layouts/), in 2020, which hides the decision of [not deciding](https://github.com/darktable-org/darktable/pull/5322) of an unified module order.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:25
#, no-wrap
msgid "![](module-groups.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:27
#, no-wrap
msgid "[Since 2018](https://www.mail-archive.com/darktable-dev@lists.darktable.org/msg03402.html), I fight to clean up the graphical interface of Darktable, and in particular the module organization. A graphical interface should promote best practices by laying out tools in the typical order they should be used. Bad practices are those which increase the risk of colorimetric inconsistencies or of circular editing, where one must go back to repercute changes made later, even though bad practices can work in simple cases. In the context of image processing, highly-technical task where a lot of things are hidden to the end-users beneath the GUI, best practices also enable poorly-qualified persons to use the software in a way that reduces the probability of mistakes.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:29
#, no-wrap
msgid "This order of using is mostly dictated by technical considerations like the order of application of modules in the pipeline sequence and the use of drawn and parametric masks, which effect depends on upstream modules. Ignoring these considerations is equivalent to looking for trouble, even though the hot trend in the 2010's and 2020's is to believe that digital technologies work detached of any material reality for the sole happiness of the user.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:31
#, no-wrap
msgid "For example, the constrained imposed upon the pipeline design to allow an arbitrary order of module use [creates mathematically unsolvable problems](https://github.com/darktable-org/darktable/pull/8673) regarding the computation of mask nodes coordinates, and no programmed solution is possible (aside from relaxing that constraint) because maths said no.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:33
#, no-wrap
msgid "Except that a significant part of the programmer-users revolving around the project on Github and on the dev mailing-list stay convinced that there is no good or bad workflow, only personal preferences, which is probably true when you practice an art without time constraint, budget constraint or result constraint. As such, modules should be able to be reordered at will, being in the pipeline or in the workflow. The confusion comes from the fact that non-destructive editing is wrongfully seen as asynchronous (which would _almost_ be the case if we didn't use masks nor blending modes) whereas the pixel pipeline is sequential and closer to a layer logic, as we find it in Adobe Photoshop, Gimp, Krita, etc.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:35
#, no-wrap
msgid "Decoupling the modules order in the GUI from the pipeline order is equivalent to enabling every use, even pathological, and forces to write [pages and pages](https://docs.darktable.org/usermanual/4.0/en/darkroom/pixelpipe/the-pixelpipe-and-module-order/#changing-module-order) of documentation to warn, explain what to do, how and why ; documentation that nobody will read to end up asking in loop the same questions every week on every forum.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:37
#, no-wrap
msgid "In this story, everyone looses their time thanks to an interface design trying to be so flexible that it can't be made safe and robust by default. In the human body, every joint as _some_ degrees of freedom along certains axes ; if every joint could revolve 340 ° around each axis of the 3D space, the structure would be instable for being too flexible, and unable to work with high loads. The metaphor holds in industry software. We swim in the FLOSS [cargo cult](https://en.wikipedia.org/wiki/Cargo_cult), where people love to have the illusion of choice, that is being offered many options of which most are unusable or dangerous, at the expense of simplicity ([KISS](https://en.wikipedia.org/wiki/KISS_principle)), and where the majority of users don't understand the implications of each option (and don't have the slightest desire to understand).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:39
#, no-wrap
msgid "In the absence of a consensus over the interface module ordering, a complicated tool, brittle and heavy was introduced at the end of 2020 to allow each user to configure the layout of modules in tabs. It provides many useless options and stores the current layout in the database, using the translated name of modules, meaning changing the UI language makes you loose your presets. Entirely configurable, it lets user decide how to harm themselves, without any best practices guide. This garbage is coded with 4000 lines [cheerfully mixing SQL requests in the middle of interface GTK code](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/libs/modulegroups.c#L3499-L3616), and presets are created through [redundant compiler macros](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/libs/modulegroups.c#L1533-L1768), whereas modules have had a [binary flag](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/iop/borders.c#L196) forever, allowing to set their default group… modularly.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:42
#, no-wrap
msgid "More important, it replaces a simple and efficient feature, available until Darktable 3.2 :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:44
#, no-wrap
msgid "![](more-modules.png)\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:46
#, no-wrap
msgid "One click over the module name enables it, a second adds it to the column of favorites, a third hides it from the interface. Everything allowing presets and storing the current layout in simple text into the `darktablerc` file. Simple and robust, [coded over 688 lignes](https://github.com/darktable-org/darktable/blob/darktable-3.2.x/src/libs/modulegroups.c) of legible and well-structured code, the feature was therefore not amusing enough for the middle-aged dilettante developer, and it was urgent to replace it by a labyrinthine system.\n"
msgstr ""

#. type: Title ###
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:47
#, no-wrap
msgid "Keyboard shortcuts"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:50
#, no-wrap
msgid "In 2021 has been added what I call the great MIDI [turducken](https://en.wikipedia.org/wiki/Turducken). The goal is to extend the interface of keyboard shortcuts (already extended in 2019 to support \"dynamic shortcuts\", allowing to combine mouse and keyboard actions), to support MIDI devices and… video game controllers.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:52
#, no-wrap
msgid "At the end of 2022, that is one and half year after this feature, in the [survey I conducted](https://www.poll-maker.com/S-Quiz-Results?qp=2539714x3792Bf5e-98#), less than 10 % of users own a MIDI device, and only 2 % use it with Darktable. To compare with the 45 % of users who own a graphic tablet (Wacom-like), which support in Darktable is still so flawed that only 6 % use it. Notwithstanding the poor priority management, what I don't tolerate here is the edge effects introduced by this change and the global cost it had, starting with the fact that it doesn't import user-defined shortcuts from versions ealier than 3.2, and it makes the configuration of new shortcuts terribly complicated.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:54
#, no-wrap
msgid "Before the great turducken, only a limited list of GUI actions could be mapped to keyboard or mixed (keyboad + mouse) shortcuts. This list was manually curated by developers. The great MIDI turducken allows to map _every_ GUI actions to shortcuts, presenting users with a list of several thousands of configurable entries, in which it's difficult to find the only 3 you really need, and the text search engine is too basic to be helpful :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:56
#, no-wrap
msgid "![](shortcuts.png)\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:58
#, no-wrap
msgid "Note the use of \"effects\", on which the [documentation](https://docs.darktable.org/usermanual/4.0/en/preferences-settings/shortcuts/) is of no help. It's only by deduction ([because the code is not commented either](https://github.com/darktable-org/darktable/blob/master/src/gui/accelerators.c#L101-L164)) that I ended up understanding they are emulations of typical desktop interactions (mouse and keyboard) destined to be used with MIDI devices and gamepad controllers (but you still need to explain to me what `Ctrl-Toggle`, `Right-activate` or `Right-Toggle` mean in terms of typical destkop interaction).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:60
#, no-wrap
msgid "What is unacceptable is that the use of the numeric keypad is broken [by design](https://github.com/darktable-org/darktable/issues/10628#issuecomment-994795922), noticeably to attribute numbered ratings (stars) to thumbnails in lighttable. Indeed, the key modifiers (numlock and capslock) are not properly decoded by the thing, and numbers are treated differently whether they are input from the typical \"text\" keyboard or from the numeric keypad. So the `1` from the numpad is decoded `Keypad End`, no matter the state of the numlock. This is how I had to configure number shortcuts on a French BÉPO keyboard and to duplicate the configuration for the numpad :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:62
#, no-wrap
msgid "![](shortcuts-broken.png)\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:64
#, no-wrap
msgid "You just have to remember that `Shift+\"` and `Kp End` both mean `1` and remember to duplicate all shortcuts for the numpad and the rest of the keyboard. In short, we break a basic user expectation, and we send design critics to hell. The regression is mentionned on all Darktable forums but seems to bother nobody.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:66
#, no-wrap
msgid "The fix of ~~this bug~~ this feature has been made [in Ansel](https://github.com/aurelienpierreeng/ansel/commit/257a70d2d14d8f8639c7fe8cf65f76bbcf5916e3) and the numeric pad keys are remapped to [standard keys directly in the code](https://github.com/aurelienpierreeng/ansel/commit/9cbf3e681b7a277968f8c9cfad43c693554d6f17), for a total of 100 lines of code including comments. Doing this correction has been very hard indeed : I read [the Gtk documentation](https://docs.gtk.org/gdk3/method.Keymap.translate_keyboard_state.html) and took their example line by line. 2 years spent waiting for that…\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:68
#, no-wrap
msgid "The cherry on the sunday is, one more time, we replaced [1306 lines of clear and structured code](https://github.com/darktable-org/darktable/blob/darktable-3.6.x/src/gui/accelerators.c) by a [monstruosity of close to 4400 lines](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/gui/accelerators.c), with gems like :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:70
#, no-wrap
msgid "1. the `while` loop of death ([source](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/gui/accelerators.c#L2898-L2918)) :\n"
msgstr ""

#. type: Fenced code block (C)
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:71
#, no-wrap
msgid ""
"  gboolean applicable;\n"
"  while((applicable =\n"
"           (c->key_device == s->key_device && c->key == s->key && c->press >= (s->press & ~DT_SHORTCUT_LONG) &&\n"
"           ((!c->move_device && !c->move) ||\n"
"             (c->move_device == s->move_device && c->move == s->move)) &&\n"
"           (!s->action || s->action->type != DT_ACTION_TYPE_FALLBACK ||\n"
"            s->action->target == c->action->target))) &&\n"
"        !g_sequence_iter_is_begin(*current) &&\n"
"        (((c->button || c->click) && (c->button != s->button || c->click != s->click)) ||\n"
"         (c->mods       && c->mods != s->mods ) ||\n"
"         (c->direction  & ~s->direction       ) ||\n"
"         (c->element    && s->element         ) ||\n"
"         (c->effect > 0 && s->effect > 0      ) ||\n"
"         (c->instance   && s->instance        ) ||\n"
"         (c->element    && s->effect > 0 && def &&\n"
"          def->elements[c->element].effects != def->elements[s->element].effects ) ))\n"
"  {\n"
"    *current = g_sequence_iter_prev(*current);\n"
"    c = g_sequence_get(*current);\n"
"  }\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:95
#, no-wrap
msgid "2. The `switch` `case`  containing `if` nested on 2 levels ([source](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/gui/accelerators.c#L892-L954)) :\n"
msgstr ""

#. type: Fenced code block (C)
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:96
#, no-wrap
msgid ""
"  switch(owner->type)\n"
"  {\n"
"  case DT_ACTION_TYPE_IOP:\n"
"    vws = DT_VIEW_DARKROOM;\n"
"    break;\n"
"  case DT_ACTION_TYPE_VIEW:\n"
"    {\n"
"      dt_view_t *view = (dt_view_t *)owner;\n"
"\n"
"      vws = view->view(view);\n"
"    }\n"
"    break;\n"
"  case DT_ACTION_TYPE_LIB:\n"
"    {\n"
"      dt_lib_module_t *lib = (dt_lib_module_t *)owner;\n"
"\n"
"      const gchar **views = lib->views(lib);\n"
"      while(*views)\n"
"      {\n"
"        if     (strcmp(*views, \"lighttable\") == 0)\n"
"          vws |= DT_VIEW_LIGHTTABLE;\n"
"        else if(strcmp(*views, \"darkroom\") == 0)\n"
"          vws |= DT_VIEW_DARKROOM;\n"
"        else if(strcmp(*views, \"print\") == 0)\n"
"          vws |= DT_VIEW_PRINT;\n"
"        else if(strcmp(*views, \"slideshow\") == 0)\n"
"          vws |= DT_VIEW_SLIDESHOW;\n"
"        else if(strcmp(*views, \"map\") == 0)\n"
"          vws |= DT_VIEW_MAP;\n"
"        else if(strcmp(*views, \"tethering\") == 0)\n"
"          vws |= DT_VIEW_TETHERING;\n"
"        else if(strcmp(*views, \"*\") == 0)\n"
"          vws |= DT_VIEW_DARKROOM | DT_VIEW_LIGHTTABLE | DT_VIEW_TETHERING |\n"
"                 DT_VIEW_MAP | DT_VIEW_PRINT | DT_VIEW_SLIDESHOW;\n"
"        views++;\n"
"      }\n"
"    }\n"
"    break;\n"
"  case DT_ACTION_TYPE_BLEND:\n"
"    vws = DT_VIEW_DARKROOM;\n"
"    break;\n"
"  case DT_ACTION_TYPE_CATEGORY:\n"
"    if(owner == &darktable.control->actions_fallbacks)\n"
"      vws = 0;\n"
"    else if(owner == &darktable.control->actions_lua)\n"
"      vws = DT_VIEW_DARKROOM | DT_VIEW_LIGHTTABLE | DT_VIEW_TETHERING |\n"
"            DT_VIEW_MAP | DT_VIEW_PRINT | DT_VIEW_SLIDESHOW;\n"
"    else if(owner == &darktable.control->actions_thumb)\n"
"    {\n"
"      vws = DT_VIEW_DARKROOM | DT_VIEW_MAP | DT_VIEW_TETHERING | DT_VIEW_PRINT;\n"
"      if(!strcmp(action->id,\"rating\") || !strcmp(action->id,\"color label\"))\n"
"        vws |= DT_VIEW_LIGHTTABLE; // lighttable has copy/paste history shortcuts in separate lib\n"
"    }\n"
"    else\n"
"      fprintf(stderr, \"[find_views] views for category '%s' unknown\\n\", owner->id);\n"
"    break;\n"
"  case DT_ACTION_TYPE_GLOBAL:\n"
"    vws = DT_VIEW_DARKROOM | DT_VIEW_LIGHTTABLE | DT_VIEW_TETHERING |\n"
"          DT_VIEW_MAP | DT_VIEW_PRINT | DT_VIEW_SLIDESHOW;\n"
"    break;\n"
"  default:\n"
"    break;\n"
"  }\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:163
#, no-wrap
msgid "3. The nested `switch` `case` of the demon, with additive clauses sneakily hidden ([source](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/bauhaus/bauhaus.c#L3339-L3415)) :\n"
msgstr ""

#. type: Fenced code block (C)
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:164
#, no-wrap
msgid ""
"case DT_ACTION_ELEMENT_ZOOM:\n"
"    ;\n"
"    switch(effect)\n"
"    {\n"
"    case DT_ACTION_EFFECT_POPUP:\n"
"      dt_bauhaus_show_popup(widget);\n"
"      break;\n"
"    case DT_ACTION_EFFECT_RESET:\n"
"      move_size = 0;\n"
"    case DT_ACTION_EFFECT_DOWN:\n"
"      move_size *= -1;\n"
"    case DT_ACTION_EFFECT_UP:\n"
"      _slider_zoom_range(bhw, move_size);\n"
"      break;\n"
"    case DT_ACTION_EFFECT_TOP:\n"
"    case DT_ACTION_EFFECT_BOTTOM:\n"
"      if((effect == DT_ACTION_EFFECT_TOP) ^ (d->factor < 0))\n"
"        d->max = d->hard_max;\n"
"      else\n"
"        d->min = d->hard_min;\n"
"      gtk_widget_queue_draw(widget);\n"
"      break;\n"
"    default:\n"
"      fprintf(stderr, \"[_action_process_slider] unknown shortcut effect (%d) for slider\\n\", effect);\n"
"      break;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:194
#, no-wrap
msgid "Programmers understand what I'm talking about ; for the others, just know that I don't understand more than you what this does : it's shit code, and if several bugs are not hidden in there, it will be pure luck. Hunting bugs in this shithole is sewer's bottom archaelogy, all the more considering that Darktable does not have a developer documentation and, in the absence of meaningful comments in the code, any modification of the aforementionned code will necessarily start with a reverse-engineering phase becoming harder and harder as time goes by.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:196
#, no-wrap
msgid "The true problem of this kind of code is that you can't improve it without rewriting it more or less entirely : to fix it, you first need to understand it, but the reason why it needs to be fixed is precisely that it's not understandable and dangerous long-term. We call that [technical debt](https://en.wikipedia.org/wiki/Technical_debt). In short, all the work invested on this feature will create extra work because it is unreasonable to keep that kind of code in the middle of a code base of several hundreds of thousands of lines and expect it to not blow up in our face one day.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:198
#, no-wrap
msgid "It's all the more ridiculous in the context of an open-source/free application where the bulk of the staff is non-trained programmers. Clever developers write code understandable by idiots, and the other way around.\n"
msgstr ""

#. type: Title ###
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:199
#, no-wrap
msgid "Collection filters"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:202
#, no-wrap
msgid "Until Darktable 3.8, the collection filters, at the top of the lighttable, were used to temporarilly restrict the view on a collection. The collection is an extraction of the photo database based on certain criteria, the most common being extracting the content of a folder (which Darktable calls \"filmroll\" to confuse everybody, because a filmroll is actually a folder's content displayed as a flat list instead of a tree - many people wrongfully thing that Darktable has no file manager).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:204
#, no-wrap
msgid "Having been a Darktable user for more than a decade, I have a database of more than 140.000 entries. Extracting a collection among these 140.00 pictures is a slow operation. But my folders rarely contain more than 300 pictures. Filtering, for example, the pictures rated 2 stars or more, in a collection of 300 files, is fast because it is a subset of 300 elements. And switching from a filter to another is fast too. The filter is only a partial or total view of a collection, optimized for a fast and temporary start-and-go usage.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:206
#, no-wrap
msgid "Under the pretense of refactoring the filtering code, which took all in all [550 lines](https://github.com/darktable-org/darktable/blob/darktable-3.6.x/src/libs/tools/filter.c), the chief [Gaston Lagaffe](https://en.wikipedia.org/wiki/Gaston_(comics)#Props,_inventions_and_other_running_gags) made it a vocation to break this model to turn collection filters into basic collections, by mean of [more than 6.000 lines of code](https://github.com/darktable-org/darktable/tree/darktable-4.2.x/src/libs/filters), not counting the countless bugfixes that only added more lines[^4]. All that, as usual, highly configurable and redundant with the classical [collections module](https://docs.darktable.org/usermanual/4.0/en/module-reference/utility-modules/shared/collections/), which remained there, and served by icons so cryptic that they had to add text tooltips on hover to clarify what they mean..\n"
msgstr ""

#. type: Link reference
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:207
#, no-wrap
msgid "[^4]: The fact that bugfixes systematically add more lines of code instead of modifying existing lines is a a concerning smell that the programming logic is bad and induces too many particular cases. Rigorous programmers always try to keep their code as generic as possible to avoid [spaghetti code](https://en.wikipedia.org/wiki/Spaghetti_code)."
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:210
#, no-wrap
msgid "In this quality code, we will found the endless `while` under the `switch case` in the `if` in the `if` in the `for` ([source](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/libs/filtering.c#L1382-L1459)) :\n"
msgstr ""

#. type: Fenced code block (C)
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:211
#, no-wrap
msgid ""
"for(int k = 0; k < num_rules; k++)\n"
"  {\n"
"    const int n = sscanf(buf, \"%d:%d:%d:%d:%399[^$]\", &mode, &item, &off, &top, str);\n"
"\n"
"    if(n == 5)\n"
"    {\n"
"      if(k > 0)\n"
"      {\n"
"        c = g_strlcpy(out, \"<i>   \", outsize);\n"
"        out += c;\n"
"        outsize -= c;\n"
"        switch(mode)\n"
"        {\n"
"          case DT_LIB_COLLECT_MODE_AND:\n"
"            c = g_strlcpy(out, _(\"AND\"), outsize);\n"
"            out += c;\n"
"            outsize -= c;\n"
"            break;\n"
"          case DT_LIB_COLLECT_MODE_OR:\n"
"            c = g_strlcpy(out, _(\"OR\"), outsize);\n"
"            out += c;\n"
"            outsize -= c;\n"
"            break;\n"
"          default: // case DT_LIB_COLLECT_MODE_AND_NOT:\n"
"            c = g_strlcpy(out, _(\"BUT NOT\"), outsize);\n"
"            out += c;\n"
"            outsize -= c;\n"
"            break;\n"
"        }\n"
"        c = g_strlcpy(out, \"   </i>\", outsize);\n"
"        out += c;\n"
"        outsize -= c;\n"
"      }\n"
"      int i = 0;\n"
"      while(str[i] != '\\0' && str[i] != '$') i++;\n"
"      if(str[i] == '$') str[i] = '\\0';\n"
"\n"
"      gchar *pretty = NULL;\n"
"      if(item == DT_COLLECTION_PROP_COLORLABEL)\n"
"        pretty = _colors_pretty_print(str);\n"
"      else if(!g_strcmp0(str, \"%\"))\n"
"        pretty = g_strdup(_(\"all\"));\n"
"      else\n"
"        pretty = g_markup_escape_text(str, -1);\n"
"\n"
"      if(off)\n"
"      {\n"
"        c = snprintf(out, outsize, \"<b>%s</b>%s %s\",\n"
"                     item < DT_COLLECTION_PROP_LAST ? dt_collection_name(item) : \"???\", _(\" (off)\"), pretty);\n"
"      }\n"
"      else\n"
"      {\n"
"        c = snprintf(out, outsize, \"<b>%s</b> %s\",\n"
"                     item < DT_COLLECTION_PROP_LAST ? dt_collection_name(item) : \"???\", pretty);\n"
"      }\n"
"\n"
"      g_free(pretty);\n"
"      out += c;\n"
"      outsize -= c;\n"
"    }\n"
"    while(buf[0] != '$' && buf[0] != '\\0') buf++;\n"
"    if(buf[0] == '$') buf++;\n"
"  }\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:278
#, no-wrap
msgid "and other `if` nested over 2 levels inside `switch case` necessary to support the keyboard shortcuts ([source](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/libs/filters/rating_range.c#L201-L265)).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:280
#, no-wrap
msgid "This last fucking crap was the straw that broke the camel's back and made me fork Ansel. I refuse to work on a ticking bomb in a team that doesn't see the problem and plays with code over their spare time. Coding may amuse them, not me. And fixing shit done by irresponsible kids twice my age, especially when they break stuff I cleaned up 3 or 4 years ago, infuriates me.\n"
msgstr ""

#. type: Title ###
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:281
#, no-wrap
msgid "Lighttable"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:284
#, no-wrap
msgid "The lighttable underwent 2 nearly-full rewritings, the first in early 2019 and the second in late 2019, which added many disputable features like the [culling view](https://docs.darktable.org/usermanual/development/en/lighttable/lighttable-modes/culling/).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:286
#, no-wrap
msgid "Quickly, the culling mode is divided into 2 submodes : dynamic and static, which manage the number of images differently. Many users still haven't understood the difference 4 years later. We therefore have the default view (file manager), the zoomable lighttable (that nobody uses), the static culling, the dynamic culling, and the preview mode (a single full-screen picture).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:288
#, no-wrap
msgid "Then, more display options are added to thumbnails in lighttable, allowing to define overlays : basic permanent overlays, extended EXIF permanent overlays, the same but only on hover, and finally the timed hovered overlays (with a configurable timer).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:290
#, no-wrap
msgid "The UI code rendering thumbnails and their overlays must therefore take into account 5 different views and [7 display variants](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/dtgtk/thumbnail.h#L38-L48), that is 35 possible combinations. The code ensuring proper resizing of thumbnails thus needs [a total of 220 lines](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/dtgtk/thumbnail.c#L1565-L1786).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:292
#, no-wrap
msgid "But it doesn't stop there, because the code rendering the thumbnails GUI is shared also with the \"filmstrip\" bottom bar, which actually makes 36 possible combinations in thumbnail rendering. Multiplied by 3 GUI themes of different base colors, that makes 108 sets of CSS instructions to fully style the GUI… of which many [were forgotten in Darktable 4.0 graphic overhaul](https://github.com/darktable-org/darktable/pull/11835), and how could it be differently ?\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:294
#, no-wrap
msgid "In Darktable 2.6, we had __4193__ lines for the pack, which had only the filemanager, zoomable lighttable and fullscreen preview views, with only 2 modes of thumbnails overlays (always visible or visible on hover) :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:298
#, no-wrap
msgid ""
"* 2634 lines [views/lighttable.c](https://github.com/darktable-org/darktable/blob/darktable-2.6.x/src/views/lighttable.c) for the lighttable and the thumbnail rendering,\n"
"* 1124 lines in [libs/tools/filmstrip.c](https://github.com/darktable-org/darktable/blob/darktable-2.6.x/src/libs/tools/filmstrip.c) for the filmstrip par, which partially duplicates the lighttable code for the thumbnail rendering,\n"
"* 435 lines in [libs/tools/global_toolbox.c](https://github.com/darktable-org/darktable/blob/darktable-2.6.x/src/libs/tools/global_toolbox.c), for the button menu allowing to enable or disable thumbnails overlays.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:300
#, no-wrap
msgid "After Darktable 3.0 and the addition of culling modes, we get __6731 lines__ :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:304
#, no-wrap
msgid ""
"* 5149 lines [views/lighttable.c](https://github.com/darktable-org/darktable/blob/darktable-3.0.x/src/views/lighttable.c),\n"
"* 1177 lines [libs/tools/filmstrip.c](https://github.com/darktable-org/darktable/blob/darktable-3.0.x/src/libs/tools/filmstrip.c),\n"
"* 405 lines [libs/tools/global_toolbox.c](https://github.com/darktable-org/darktable/blob/darktable-3.0.x/src/libs/tools/global_toolbox.c).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:306
#, no-wrap
msgid "After Darktable 3.2 and the additions of the 7 variants of highly-configurable overlays and some code refactoring, we get __8380 lines__ :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:314
#, no-wrap
msgid ""
"* 1463 lines in [views/lighttable.c](https://github.com/darktable-org/darktable/blob/darktable-3.2.x/src/views/lighttable.c),\n"
"* 1642 lines in [dtgtk/culling.c](https://github.com/darktable-org/darktable/blob/darktable-3.2.x/src/dtgtk/culling.c), where the culling view features were detached,\n"
"* 2447 lines in [dtgtk/thumbtable.c](https://github.com/darktable-org/darktable/blob/darktable-3.2.x/src/dtgtk/thumbtable.c), where the thumbnails containers are managed for the lighttable and the filmstrip,\n"
"* 1736 lines in [dtgtk/thumbnail.c](https://github.com/darktable-org/darktable/blob/darktable-3.2.x/src/dtgtk/thumbnail.c), where the thumbnails themselves are managed,\n"
"* 169 lines in [dtgtk/thumbnail_btn.c](https://github.com/darktable-org/darktable/blob/darktable-3.2.x/src/dtgtk/thumbnail_btn.c), where the specific thumbnails buttons are declared,\n"
"* 115 lines in [libs/tools/filmstrip.c](https://github.com/darktable-org/darktable/blob/darktable-3.2.x/src/libs/tools/filmstrip.c),\n"
"* 808 lines in [libs/tools/global_toolbox.c](https://github.com/darktable-org/darktable/blob/darktable-3.2.x/src/libs/tools/global_toolbox.c).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:316
#, no-wrap
msgid "In Darktable 4.2, after the correction of many bugs, we get to a total of __9264 lines__ :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:324
#, no-wrap
msgid ""
"* 1348 lines in [views/lighttable.c](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/views/lighttable.c),\n"
"* 1828 lines in [dtgtk/culling.c](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/dtgtk/culling.c),\n"
"* 2698 lines in [dtgtk/thumbtable.c](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/dtgtk/thumbtable.c),\n"
"* 2093 lines in [dtgtk/thumbnail.c](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/dtgtk/thumbnail.c),\n"
"* 166 lines in [dtgtk/thumbnail_btn.c](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/dtgtk/thumbnail_btn.c),\n"
"* 109 lines in [libs/tools/filmstrip.c](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/libs/tools/filmstrip.c),\n"
"* 1022 lines in [libs/tools/global_toolbox.c](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/libs/tools/global_toolbox.c).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:326
#, no-wrap
msgid "The number of lines (especially in code taking an ill-placed pleasure in ignoring programming best practices) is a direct indicator of the difficulty to debug anything in there, but also an indirect indicator (in the specific case of GUI code) of CPU load required to run the software.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:328
#, no-wrap
msgid "Indeed, if you start `darktable -d sql` and you hover a thumbnail in lighttable, you will get in terminal :\n"
msgstr ""

#. type: Fenced code block (bash)
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:329
#, no-wrap
msgid ""
"140.8252 [sql] darktable/src/common/image.c:311, function dt_image_film_roll(): prepare \"SELECT folder FROM main.film_rolls WHERE id = ?1\"\n"
"140.8259 [sql] darktable/src/common/image.c:387, function dt_image_full_path(): prepare \"SELECT folder || '/' || filename FROM main.images i, main.film_rolls f WHERE i.film_id = f.id and i.id = ?1\"\n"
"140.8271 [sql] darktable/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"140.8273 [sql] darktable/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"140.8275 [sql] darktable/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"140.8277 [sql] darktable/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"140.8279 [sql] darktable/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"140.8280 [sql] darktable/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"140.8282 [sql] darktable/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"140.8284 [sql] darktable/src/common/tags.c:635, function dt_tag_get_attached(): prepare \"SELECT DISTINCT I.tagid, T.name, T.flags, T.synonyms, COUNT(DISTINCT I.imgid) AS inb FROM main.tagged_images AS I JOIN data.tags AS T ON T.id = I.tagid WHERE I.imgid IN (104337) AND T.id NOT IN memory.darktable_tags GROUP BY I.tagid  ORDER by T.name\"\n"
"140.8286 [sql] darktable/src/common/tags.c:635, function dt_tag_get_attached(): prepare \"SELECT DISTINCT I.tagid, T.name, T.flags, T.synonyms, COUNT(DISTINCT I.imgid) AS inb FROM main.tagged_images AS I JOIN data.tags AS T ON T.id = I.tagid WHERE I.imgid IN (104337) AND T.id NOT IN memory.darktable_tags GROUP BY I.tagid  ORDER by T.name\"\n"
"140.9512 [sql] darktable/src/common/act_on.c:156, function _cache_update(): prepare \"SELECT imgid FROM main.selected_images WHERE imgid=104337\"\n"
"140.9547 [sql] darktable/src/common/act_on.c:156, function _cache_update(): prepare \"SELECT imgid FROM main.selected_images WHERE imgid=104337\"\n"
"140.9550 [sql] darktable/src/common/act_on.c:288, function dt_act_on_get_query(): prepare \"SELECT imgid FROM main.selected_images WHERE imgid =104337\"\n"
"140.9552 [sql] darktable/src/libs/metadata.c:263, function _update(): prepare \"SELECT key, value, COUNT(id) AS ct FROM main.meta_data WHERE id IN (104337) GROUP BY key, value ORDER BY value\"\n"
"140.9555 [sql] darktable/src/common/collection.c:973, function dt_collection_get_selected_count(): prepare \"SELECT COUNT(*) FROM main.selected_images\"\n"
"140.9556 [sql] darktable/src/libs/image.c:240, function _update(): prepare \"SELECT COUNT(id) FROM main.images WHERE group_id = ?1 AND id != ?2\"\n"
"140.9558 [sql] darktable/src/common/tags.c:635, function dt_tag_get_attached(): prepare \"SELECT DISTINCT I.tagid, T.name, T.flags, T.synonyms, COUNT(DISTINCT I.imgid) AS inb FROM main.tagged_images AS I JOIN data.tags AS T ON T.id = I.tagid WHERE I.imgid IN (104337) AND T.id NOT IN memory.darktable_tags GROUP BY I.tagid  ORDER by T.name\"\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:351
#, no-wrap
msgid "which means that 18 SQL requests are made against the database to fetch image information, and run everytime the cursor hovers a new thumbnail, for no reason since metadata didn't change since the previous hovering.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:353
#, no-wrap
msgid "In Ansel, by removing most options, I managed to spare 7 requests, which still doesn't prevent duplicated requests but still improve the timings somewhat (timestamps are the figures starting each line) :\n"
msgstr ""

#. type: Fenced code block (bash)
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:354
#, no-wrap
msgid ""
"12.614534 [sql] ansel/src/common/image.c:285, function dt_image_film_roll(): prepare \"SELECT folder FROM main.film_rolls WHERE id = ?1\"\n"
"12.615225 [sql] ansel/src/common/image.c:356, function dt_image_full_path(): prepare \"SELECT folder || '/' || filename FROM main.images i, main.film_rolls f WHERE i.film_id = f.id and i.id = ?1\"\n"
"12.616499 [sql] ansel/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"12.616636 [sql] ansel/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"12.616769 [sql] ansel/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"12.616853 [sql] ansel/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"12.616930 [sql] ansel/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"12.617007 [sql] ansel/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"12.617084 [sql] ansel/src/common/metadata.c:487, function dt_metadata_get(): prepare \"SELECT value FROM main.meta_data WHERE id = ?1 AND key = ?2 ORDER BY value\"\n"
"12.617205 [sql] ansel/src/common/tags.c:635, function dt_tag_get_attached(): prepare \"SELECT DISTINCT I.tagid, T.name, T.flags, T.synonyms, COUNT(DISTINCT I.imgid) AS inb FROM main.tagged_images AS I JOIN data.tags AS T ON T.id = I.tagid WHERE I.imgid IN (133727) AND T.id NOT IN memory.darktable_tags GROUP BY I.tagid  ORDER by T.name\"\n"
"12.617565 [sql] ansel/src/common/tags.c:635, function dt_tag_get_attached(): prepare \"SELECT DISTINCT I.tagid, T.name, T.flags, T.synonyms, COUNT(DISTINCT I.imgid) AS inb FROM main.tagged_images AS I JOIN data.tags AS T ON T.id = I.tagid WHERE I.imgid IN (133727) AND T.id NOT IN memory.darktable_tags GROUP BY I.tagid  ORDER by T.name\"\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:369
#, no-wrap
msgid "The issue is that the source code nests SQL commands inside functions drawing the GUI, and untangling this mess through the different layers inherited from \"refactoring\" (supposed to simplify the code, but actually nope) is once again archaelogy. And if the issue had been fixed when the code was 6700 lines over 3 files, we wouldn't be looking, 4 years later, for the causes in 2500 additionnal lines now spread in 7 different files (not counting `.h` files).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:371
#, no-wrap
msgid "We are in the poster case where \"refactoring\" actually complexified code and where merging thumbnail code between filmstrip and lighttable only added more internal `if` (branches) nested on several levels, which complexify even more the structure, only to blindly follow the [code reuse principle](https://en.wikipedia.org/wiki/Code_reuse), which conflicts here with the [modularity principle](https://en.wikipedia.org/wiki/Modular_programming), which a skilled developer would have fixed with [inheritance](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming), because even if it's not easy to do in C, it's perfectly possible (actually, Darktable uses this principle in code from 2009-2010).\n"
msgstr ""

#. type: Title ##
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:372
#, no-wrap
msgid "Cosmetics take over stability"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:375
#, no-wrap
msgid "Darktable 4.2 introduces the styles preview in darkroom. That would be awesome if styles were not deeply broken, when used with non-default pipeline order and multiple module instances. The problem is a clean and long-term solution involves [directed graphs theory](https://en.wikipedia.org/wiki/Directed_graph), and that's where we lost our beloved copy-pasted code pissers.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:377
#, no-wrap
msgid "In the same spirit, we have large inconsistencies on history copy-pasting in _overwrite_ mode when default user presets are also used (especially in white balance module). But it's far funnier to shit up the interface, so it will stay there for a long time.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:379
#, no-wrap
msgid "Darktable 3.6 and 3.8 introduced many variants of the histogram : vectorscope, vertical waveform, advanced and exotic colorspaces. Except that if you launch `darktable -d perf` in terminal and open the darkroom, you will see a lot of\n"
msgstr ""

#. type: Fenced code block (bash)
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:380
#, no-wrap
msgid ""
"23.748084 [histogram] took 0.003 secs (0.000 CPU) scope draw\n"
"23.773753 [histogram] took 0.005 secs (0.004 CPU) scope draw\n"
"23.783284 [histogram] took 0.001 secs (0.000 CPU) scope draw\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:387
#, no-wrap
msgid "everytime you move the cursor in the window (and not even over the histogram). It is the histogram that gets redrawn at every interaction between cursor and window. The same problem affects [many custom graphical widgets](https://github.com/darktable-org/darktable/issues/11836) and its cause is unidentified. Note that it doesn't affect Ansel, so the cause should be hidden somewhere in the 23.000 lines of code that I removed.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:389
#, no-wrap
msgid "Twice, I tried to refactor [the shitshow this feature became](https://github.com/darktable-org/darktable/blob/darktable-4.2.x/src/libs/histogram.c), but each time a new feature more urgent was pushed that invalidated my work. I simply gave up.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:391
#, no-wrap
msgid "The rotting state of the histogram is such that a full rewrite would take less time than a refactoring, especially since the histogram is sampled way too late in the pipeline, in the screen colorspace, which makes the definition of an histogram colorspace null given that the gamut is clipped in screen colorspace no matter what. But guess what… Darktable 4.4 will have even more options, with the ability to define color harmonies (fundamental for geeks who paint by numbers and edit histograms).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:393
#, no-wrap
msgid "It remains that, any time you move the cursor, a great number of useless recomputations are started for nothing. How bad is it ? I had the idea of measuring the CPU use of my system when idle, with the Linux tool `powertop`. The protocol is quite simple : a laptop (CPU Intel Xeon Mobile 6th generation), working on battery in powersave mode, backlighting set to minimum, open the app and touch nothing for 4 min, then monitor the global CPU consumption of the system as reported by `powertop` during the 5th minute :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:402
#, no-wrap
msgid ""
"* Base system (no app opened except for `powertop` runing in a terminal) : __3.0 to 3.5 % CPU__\n"
"* Ansel :\n"
"  * opened on lighttable : __2.9 to 3.4 % CPU__,\n"
"  * opened on darkroom : __3.8 to 4.5 %__ (before reverting module groups to Darktable 3.2),\n"
"  * opened on darkroom : __3.0 to 3.5 %__ (after reverting module groups),\n"
"* Darktable :\n"
"  * opened on lightable : __6.6 to 7.1 % CPU__,\n"
"  * opened on darkroom : __30.9 to 44.9 % CPU__ _(no, it's not a coma mistake)_,\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:404
#, no-wrap
msgid "I don't understand what Darktable computes when we leave it open without touching the computer, because there is nothing to compute. Darktable in lighttable consumes by itself as much as the whole system (Fedora 37 + KDE desktop + password manager and Nextcloud client running in background), and it consumes 10 times as much as the whole system when opened in darkroom.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:406
#, no-wrap
msgid "All this points towards very buggy graphical interface code. In Ansel, I removed a great part of the dirty code, without optimizing anything else, and these figures are only validating my choice : dirty code hides problems undetectable by reading it, and we simply can't continue on this path.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:408
#, no-wrap
msgid "I'm apparently the only one thinking it's unacceptable to deprive the pixel pipeline of a third to a half of the CPU power to paint a stupid interface. However you put it, there is no valid reason for a software left open without touching it to turn the computer into a toaster, especially since we don't buy Russian gas anymore.\n"
msgstr ""

#. type: Title ##
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:409
#, no-wrap
msgid "Working against ourselves"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:412
#, no-wrap
msgid "We are photographers. The fact that we need a computer to do photography is a novelty (20 years old), linked to the digital imaging technology which replaced for all sorts of reasons (good and bad) a 160 years-old technology, known and mastered. In the process, the fact that we need a computer and a software to produce images is pure and simple [overhead](https://en.wikipedia.org/wiki/Overhead_(business)). Forcing people who don't understand computers to use them to perform tasks they could perfectly manage manually before is also a form of oppression, and hiding it as some technical progress is a form of psychological violence.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:414
#, no-wrap
msgid "Software implies development, maintenance, documentation and project management. That's several layers of overhead atop the previous. Yet the fact that the manpower in open-source projects doesn't ask for compensation should not hinder the fact that the time spent (lost ?) on the software, its use, its development, its maintenance, is in itself a non-refundable cost.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:416
#, no-wrap
msgid "The few examples above give an overlook of the complexification of the source code, but also of its degradation over time in terms of quality, because basic and robust features get replaced by [spaghetti code](https://en.wikipedia.org/wiki/Spaghetti_code), confusing and sneakily bugged. Behind this issue of legibility, the real problem is making the mid-term maintainability harder, which promises a gloomy future for the project, with the maintainer's approval.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:418
#, no-wrap
msgid "Since 4 years that I work full-time on Darktable, 2022 is the first year that I find myself practically unable to identify the cause of most interface bugs, because the working logic has become very obfuscated and the code incomprehensible. The number of bugs fixed is also in constant diminution, both in absolute value and in proportion of the pull requests merged, while the volume of code traffic stays roughly constant (_note 1 : the following counts of lines of code include only C/C++/OpenCL and generative XML files and exclude comments_ [^8]) (_note 2 : the number of opened issues is counted for the lifetime of the previous version_) :\n"
msgstr ""

#. type: Link reference
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:419
#, no-wrap
msgid "[^8]: You don't need to trust me, the command to reproduce the stats is `git diff release-3.4.0..release-3.6.0 --shortstat -w -G'(^[^\\*# /])|(^#\\w)|(^\\s+[^\\*#/])' -- '*.c' '*.h' '*.cpp' '*.xml.in' '*.xsl' '*CMakeLists.txt' '*.cl'`"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:424
#, no-wrap
msgid ""
"3.0 (December 2019, one year after 2.6)\n"
": - [1049 issues opened](https://github.com/darktable-org/darktable/issues?q=is%3Aissue+created%3A2018-12-24..2019-12-24+), 66 issues closed / 553 pull requests merged __(12 %)__,\n"
"  - 398 files changed, 66 k insertions, 22 k deletions, __(net : +44 k lines)__,\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:428
#, no-wrap
msgid ""
"3.2 (August 2020)\n"
": - [1028 issues opened](https://github.com/darktable-org/darktable/issues?q=is%3Aissue+created%3A2019-12-24..2020-08-10), 92 issues closed / 790 pull requests merged __(12 %)__,\n"
"  - 586 files changed, 54 k insertions, 43 k deletions __(net : +2 k lines)__,\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:432
#, no-wrap
msgid ""
"3.4 (December 2020)\n"
": - [981 issues opened](https://github.com/darktable-org/darktable/issues?q=is%3Aissue+created%3A2020-06-01..2020-12-24+), 116 issues closed / 700 pull requests merged __(17 %)__,\n"
"  - 339 files changed, 46 k insertions, 23 k deletions __(net : +23 k lines)__,\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:436
#, no-wrap
msgid ""
"3.6 (June 2021)\n"
": - [759 issues opened](https://github.com/darktable-org/darktable/issues?q=is%3Aissue+created%3A2020-12-24..2021-06-01+), 290 issues closed / 954 pull requests merged __(30 %)__,\n"
"  - 433 files changed, 53 k insertions, 28 k deletions __(net : +25 k lines)__,\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:440
#, no-wrap
msgid ""
"3.8 (December 2021)\n"
": - [789 issues opened](https://github.com/darktable-org/darktable/issues?q=is%3Aissue+created%3A2021-06-01..2021-12-24+), 265 issues closed / 571 pull requests merged __(46 %)__,\n"
"  - 438 files changed, 41 k insertions, 21 k deletions __(net : +20 k lines)__,\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:444
#, no-wrap
msgid ""
"4.0 (June 2022)\n"
": - [632 issues opened](https://github.com/darktable-org/darktable/issues?q=is%3Aissue+created%3A2021-12-24..2022-06-01+), 123 issues closed / 586 pull requests merged __(21 %)__,\n"
"  - 359 files changed, 30 k insertions, 15 k deletions __(net : +15 k lines)__,\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:449
#, no-wrap
msgid ""
"4.2 (December 2022)\n"
": - [595 issues opened](https://github.com/darktable-org/darktable/issues?q=is%3Aissue+created%3A2022-06-01..2022-12-24+), 60 issues closed / 409 pull requests merged __(15 %)__,\n"
"  - 336 files changed, 14 k insertions, 25 k deletions __(net : -11 k lines)__,\n"
"  - (_deletions are mostly due to the removal of the SSE2 path in pixel code, penalizing performance of typical Intel i5/i7 CPUs for the benefit of AMD Threadripper CPUs_),\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:453
#, no-wrap
msgid ""
"4.4 (June 2023)\n"
": - [500 issues opened](https://github.com/darktable-org/darktable/issues?q=is%3Aissue+created%3A2022-12-24..2023-06-01), 97 issues closed / 813 pull requests merged __(12 %)__,\n"
"  - 479 files changed, 57 k insertions, 41 k deletions __(net : +16 k lines)__,\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:455
#, no-wrap
msgid "To make things easier to compare, let's annualize them :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:460
#, no-wrap
msgid ""
"- 2019 : 1049 new issues, 66 closed, 88 k changes, +44 k lines,\n"
"- 2020 : 2009 new issues, 208 closed, 166 k changes, +25 k lines,\n"
"- 2021 : 1548 new issues, 555 closed, 143 k changes, +45 k lines,\n"
"- 2022 : 1227 new issues, 183 closed, 84 k changes, +4 k lines.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:462
#, no-wrap
msgid "It seems I'm not the only one finding the 2022's bugs much more difficult to tackle because a lot fewer of them were fixed compared to 2021, and 2023 shows the same trend so far. The ratios of pull requests (actual work done) versus issues closed (actual problems solved) is simply ridiculous.\n"
msgstr ""

#. type: Link reference
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:463
#, no-wrap
msgid "[^9]: `git checkout release-3.0.0 & cloc $(git ls-files  -- 'src/views' 'src/gui' 'src/bauhaus' 'src/dtgtk' 'src/libs')`"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:466
#, no-wrap
msgid "Between Darktable 3.0 and 4.0, the GUI code grew by 53 %, from 49 k to 75 k lines[^9] (discarding comments and white lines), and reached 79 k lines in 4.4. Letting the poor quality of it aside, I'm really not sure it improved the usability of the software by 53 %. In fact, I'm quite convinced of the contrary. In Ansel, I have so far reduced the GUI code to 53 k lines while removing little functionnality.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:468
#, no-wrap
msgid "All this is just too much too fast for a bunch of hobbyists working on evenings and week-ends without structure and planning. The Darktable team works against itself by trying to bite more than it can chew, supporting too many different options, producing code which outcome depends on too many environment variables, being able to interact in too many different ways. All that to avoid making design decisions that could offend some guys by limiting features and available options. On the end-user side, this results in contextual bugs impossible to reproduce on other systems, so impossible to fix at all.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:470
#, no-wrap
msgid "It's simple : the work done costs more and more work, and the maintenance is not assured, as the decline of closed issues shows, because it's simply too much. In a company, this is the time where you need to stop the bleeding before having emptied the vaults. But a team of amateurs bound to deliver no result can sustain an infinite amount of losses. Only the work created by the work is more tedious, frustrating and difficult as time goes by, and end-users are taken hostage by a gang of self-serving pricks and will pay it in terms of GUI complexity, needless CPU load, and need to relearn how to achieve basic tasks with the software at least once a year.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:472
#, no-wrap
msgid "Actually, I'm expecting the current mass-destruction team to conveniently find less and less freetime to contribute to the project as they realize they trapped themselves in a one-way with a tractor-trailer, leaving their shit to the next ones. But the sooner they give up, the less damage they will cause.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:474
#, no-wrap
msgid "The debauchery of options and preferences, which is the Darktable go-to strategy to (not) manage design disagreements, creates super contextual use cases where no user has the same options enabled and where it's impossible to reproduce bugs in a different environement. And to ask users to attach the `darktablerc` configuration file to bug reports would not help either since that file has currently 1287 lines practically unlegible.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:476
#, no-wrap
msgid "Weird and hardly reproduceable bugs pile up, even on [System 76](https://system76.com/) computers designed specifically for Linux, where we can't invoke drivers issues. Many inconsistent and random bugs I have witnessed while giving editing lessons are not listed on the bug tracker, and it's rather clear that they lie somewhere in the intricacies of the `if` and `switch case` debauchery that are added at an alarming rate since 2020.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:478
#, no-wrap
msgid "Fixing these strange and contextual bugs can only be made by simplifying the control flow of the program and therefore by limiting the number of user parameters. But the pack of geeks flapping their arms on the project won't hear about it and, worse, the bug \"fixes\" generally only add more lines to deal with pathological cases individually.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:480
#, no-wrap
msgid "In fact, Darktable suffers several issues :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:494
#, no-wrap
msgid ""
"1. An hard core of rather mediocre developers who have a lot of free time on their hands to do random stuff, driven by the best intents in the world but oblivious of the damages they make, (mediocre people are always the more available)\n"
"1. The complacency of the maintainer, who lets dirty code through to be nice,\n"
"1. A critical lack of skills in pure mathematics, algorithmics, signal processing, color science and generally in abstract thinking, which are required beyond pixel processing code to simplify and factorize features,\n"
"1. A despicable habit of \"developing\" by copy-pasting code fetched elsewhere in the project or in other FLOSS projects that may used a different pipeline architecture but without adapting it accordingly (adapting implies understanding, and that's too much to ask…),\n"
"1. A fair and square refusal to prune features to make room to new ones and keep a certain balance,\n"
"1. A sampling bias, where the only users interacting with the development through Github are programmers and English-speaking. Fact is the general audience doesn't understand what a code forge is and it's difficult to encourage non-programmers to open a Github account to report bugs. We are talking of a users sample [made of more than 44 % of programmers](https://eng.aurelienpierre.com/2023/01/who-are-the-darktable-users/#Conclusion-of-this-part) and of more than 35 % of university-graduated people (they are respectively 6 % and 15 % in the general population).\n"
"1. A forced-march development style, without planning or dialogue, where every Github user can pollute discussions with a non-educated opinion on current work. Fact is image processing looks easy and is harmless, so much so that any person able to compute a logarithm feels competent. But the fundamental mistakes in Darkable colorimetry chain are there to remind us everday of the contrary.\n"
"1. A lack of project-wise priorities regarding what features to refactor, stabilize or extend : all projects are open at the same time, even if they conflicts with each other.\n"
"1. An amount of activity (emails and notifications) impossible to follow, between comments, off-topic discussions, bugs that are not, code change proposals, actual code changes that may impact your own work in progress, which means you have to be all over the place all the time ; there is a lot to read, very little to keep, discussion for the sake of discussion hinders productivity and the lack of working structure is the main cause of all that,\n"
"1. Non-blocking bugs hastily hidden before we are done understanding them, instead of fixing them for real and tackling them at their root, which moves or even aggravates issues long-term without leaving traces into any kind of documentation,\n"
"1. A release schedule that we keep no matter the price even when it's not realistic, whereas nobody imposes it upon ourselves,\n"
"1. Code changes that can happen anytime anywhere, meaning we work on quicksand and that we have to work as fast and as bad as the others to not be left behind the volume and frequency of the changes (_commits_),\n"
"1. New features that degrade usability and complicate usage without solving a definite problem, that serves as recreational projects to developers untrained in design/engineering.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:496
#, no-wrap
msgid "But the most infuriating is this obstinacy to replace simple and functional features with horrors of over-engineering destined to please deviant and marginal uses while making everybody's life more difficult with never-ending lists of thoughtless options. The best place to hide a tree is in the middle of the forest, and many still haven't learned it.\n"
msgstr ""

#. type: Title ##
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:497
#, no-wrap
msgid "Mistaking agitation with activity"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:500
#, no-wrap
msgid "Any elector likes to criticize the deviance that, in politics, consists in issuing circumstancial laws, ill-written, to appease the public opinion after a special event, to show off that we act, while similar laws already exist and are not or not fully applied for lack of means. We call that agitation : this looks like action, this sounds like action, this has the cost of action, but that leads to nothing tangible or practical.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:502
#, no-wrap
msgid "The team of amateurs without project management getting agitated over Darktable produces only future problems. In the past, Darktable was released once every year with around 1500 to 2000 [commits](https://en.wikipedia.org/wiki/Commit_(version_control)) ahead of the previous version. That's now the volume of change achieved in 6 months. A \"work\" volume increasing that fast without leading to teamwork methods, including clear priorities for each release and task repartition, and without software quality control based on objective metrics (number of steps or elapsed time to achieve a particular task), it's only dudes stepping on each other's feet while pushing their own agenda with no care for others, nor the project, nor users.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:504
#, no-wrap
msgid "Darktable has become the highschool computer club, where geeks have their fun. It's globally a sum-up of all the worst stories of IT companies, with the difference that the project doesn't make a penny, which makes it urgent to ask ourselves why we impose that upon ourselves : there are no profits to share, but everybody shares the costs. It's a chaotic and toxic working environment which would only manufacture burn-out if the part-time amateurs were bound to deliver results and had to work full-time. Being the only full-time dude on it, I let you imagine the amount of stress and lost energy to stay up-to-date with the permanent cacophony, only to be sure to not miss the 2 % actually relevant to me in the amount of noise produced by unregulated discussions.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:506
#, no-wrap
msgid "On the user side, we praise the effervescence of the Darktable project (yes, there is motion), without realizing that the commits runaway is not activity but agitation, and in particular technical debt which will have to be paid we-don't-know-when by we-don't-know-who. The beauty of a project where nobody has to take responsibility for their horseshit because nobody is accountable for nothing : it's written in the GNU/GPL license. We can therefore screw up the work of the previous ones with total impunity.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:508
#, no-wrap
msgid "We have the beginning of a quality control, through the integration tests, which measure the perceptual error over reference image processings, but they don't trigger any response when we see an average error delta E of 1.3 (small) when the nature of the change should have a strictly zero delta E. If __the only__ test passes (because we test a single SDR image over a studio shot), no question is asked on whether the theory is sound and robust. We turned the test into a discharge, as long as the metric stays under the validation threshold…\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:510
#, no-wrap
msgid "With the release of Darktable 4.0 — _Geektable_ —, I saw on Youtube people starting to complain that this release was not very exciting. After years of dosing people with superlative releases, packed with new features we don't have time to properly test (6-8 guys who piss 38-50 k lines every 6 months while working only evenings and week-ends, you still dreaming ?), we made them addict to the overpacked Christmas Tree to ensure that, the day we start being responsible and releasing stable versions (thus boring), that will be held against us.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:512
#, no-wrap
msgid "The reason for this frenetic release pace is the pull requests older than 3 monthes are systematically in conflict with the master branch, given that this one is shaken every month for \"generalized tests\". But the rare users who build the master branch have no idea what they need to test in particular, unless the dissected the commit history of Git, which implies to understand both the C language and the impact of the changes in practice on the software.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:514
#, no-wrap
msgid "To limit long-lived branches, which will invariably end in conflict with the master, we found a brilliant solution : we release 2 versions each year, making forced-march development based on unfinished and barely-tested code a way of life, without ever realizing that the core problem is first the lack of planning, but also that contributors start coding before being done defining the problem to solve (when there is a real problem to solve, not just a guy who woke up like \"it would be cool if…\"), working in parallel on both parts without communication.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:516
#, no-wrap
msgid "The dust doesn't have time to settle that we are already shaking the code base again, without enforcing stabilisation phases where we only clean-up bugs (and I'm not talking of the month of feature-freeze prior to release, but of releases dedicated only to code cleaning). The bug tracker implodes in the 3 weeks following each release, because a significant part of users only uses the pre-built packages, which coincide with Christmas and Summer hollidays, where I personnaly have better things to do after the already-stressful sprint that is the month prior to release.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:518
#, no-wrap
msgid "Since 2021, when I update my Git repository with the last changes of Darktable master, it's always asking myself what they broke __this time__. We break faster than we fix, and most of the time, the fixes break something else. The only users finding Darktable stable are actually the ones making a very basic use of it, which is ironical for an app whose selling point is to be advanced.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:520
#, no-wrap
msgid "And then, I'm being served the fact that it's free work as if it was an excuse. But it is actually an aggravating circumstance : why do we impose such working conditions upon ourselves if it's not even profitable ??? In addition to the fact that this free work gives me a post-release burn-out per year, it costs more and more in maintenance and the maintenance is more and more despicable to do. It's not free work, it's worse : it's work that costs without paying.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:522
#, no-wrap
msgid "Anyway, the work is provided by people who have limited time and energy. If the resource is limited, cut the bullshit : we are in the same profitability constraints as a business, minus social contributions, except our exchange money is time and it's not refundable. Without priority management, we will get overtaken by technical debt that we will not have the resource to maintain.\n"
msgstr ""

#. type: Title ##
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:523
#, no-wrap
msgid "What are we waiting for to be happy ?"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:526
#, no-wrap
msgid "The fact that Darktable is a steamroller in runaway mode and without a driver, which generates an increasing amount of work, is a bad smell for a 15 years-old project. Normally, a mature project slows-down because it's complete enough to be usable and because people working on it found their cruising speed and efficient working methods.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:528
#, no-wrap
msgid "I'm full-time on it since 2018, for a monthly income between 800 and 900 €, and it's an understatement to say that it's ill-payed to endure the desastrous consequences of disorganized amateurs trying to have their fun at the expense of the quality of the final product and its usability by computer Muggles. Besides, Muggles are despised too, as a principle.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:530
#, no-wrap
msgid "If I'm crawling under a rock for a month to develop a perceptual color space, when I get out, it's to discover the new labyrinthine system violating a bit more the view-model-controller paradigm and being told that I come too late to oppose it. If I take 3 weeks of vacation in August, it's to discover that the maintainer bypassed (one more time) my review on a mathematical change over the aforementionned color space, which requires to sit down calmly and think, all this because… we needed to move fast ? For what emergency, exactly ?\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:532
#, no-wrap
msgid "I probably got the notification somewhere in the middle of the 2234 emails Github sent me between January and August 2022 (in 2021, it was 4044), without mentionning users who ping me everywhere, on Youtube, Reddit, Matrix, Github, Telegram, directly by emails, and previously on pixls.us (693 emails in 2022, 948 in 2021). All this for people completely out of step who don't realize that I'm doing this all week, that photography may be their hobby but is my job, and that I would just appreciate people off my back during week-ends and hollidays. You can guess that the most annoying are not the ones financially supporting my work. People respect work only if they got billed an high price for it.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:534
#, no-wrap
msgid "I don't have time to be researcher, designer, on top of secretary, while doing technical baby-sitting for a team of Gaston Lagaffe who need both to be trained and to be watched because they are unable to :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:540
#, no-wrap
msgid ""
"1. make a development planning with a list of priorities of new features to work on,\n"
"2. provide a specicifications book of needs and issues, with a real use case, __before__ hurrying up on their code editor and doing whatever to develop a new feature in search for a problem to solve.\n"
"3. evaluate the maintenance cost of the change before inventing the bionic bacon pump using reversed osmosis which only works on even days if Jupyter is out of phase with Saturn,\n"
"4. limit the expenses and cut down the losses when they trap themselves into design one-ways introducing regressions worse than the hypothetical benefits expected,\n"
"5. take upon themselves and delay a release if the code is obviously not ready (or I didn't understand anything and the shareholders will ask for our heads if we release late ???).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:542
#, no-wrap
msgid "Management (or team management) is overhead that costs some work, but the Darktable team has reached a scale where the lack of management costs actually more work, especially since none of the project founders are still in the team and the initial design blueprints need to be reverse-engineered with `grep` in the code everytime something needs change. That was sustainable with a reduced team where everybody knew each other, but Darktable has become an high-traffic project during Covid lock-downs and this way of working is not sustainable with current personnel.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:544
#, no-wrap
msgid "Just go see the code ! Compare the branche `darktable-2.6.x` with `darktable-4.2.x`, file by file, and enjoy !\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:546
#, no-wrap
msgid "All I have heard so far are canned sentences like \"it's like many other opensource projects\" and \"there is nothing we can do about it\". People are afraid by the amount of work that a fork is (I got emails trying to convince me it was dividing productivity), without realizing the amount of resources currently wasted by the Darktable project and the permanent stress of having to base your work on an unstable code base shaken up all the time. So far, Ansel cost me less fatigue [and I solved a significant number of problems](/doc/special-topics/from-darktable/) among which some were reported since 2016 without signs of interest from the bloody \"community\".\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:548
#, no-wrap
msgid "Besides, Ansel provides automatically-built nightly packages for Linux (.AppImage) and Windows (.exe), as to allow __real__ generalized tests, including by people unable to build the software themselves. [I asked for that back in 2019](https://github.com/darktable-org/darktable/issues/3925), but apparently, geeks have better things to do, and I had to invest 70 h myself to make that happen. The operation is already a success and allowed to fix in a matter of days Windows bugs that would have taken weeks to spot in Darktable. (And Darktable grabbed 3 weeks later my AppImage build script without proper credits, but that's a detail).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:550
#, no-wrap
msgid "Talking about productivity, let us recall that the lighttable was rewritten almost entirely twice since 2018 (and the last version is not better nor faster) and the big change if collection filters introduced in [April 2022](https://github.com/darktable-org/darktable/pull/11066) has overwritten another similar change (but only using 600 lines instead of 6000) introduced in [February 2022](https://github.com/darktable-org/darktable/pull/10694) (the February version is the one in Ansel). We can't decently utter the word \"productivity\" when the work of one contributor litterally erases previous work of another's in a timeframe of one month, for simple lack of project management. It's called stepping on each other's feet.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:552
#, no-wrap
msgid "So what are we doing to solve the issue ? Suffering in silence ? Living in denial ? Keeping on fixing stuff that another one will break in the next year when we will not be watching ? Keeping on making the Muggle believe, at photo forum length, that opensource is just as good as proprietary, while keeping as joker the fact that it's free so you get no right to complain ? Isn't that a bit too easy and dishonest, this double speech ?\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:554
#, no-wrap
msgid "Wouldn't you like to stop making habits pass as experience and mistaking fatalism with wisdom, but rather tackle the problem at its core ? Don't you think that you and me deserve better than software designed by amateurs whose sole talent is to have spare time and can afford to work for free since they moved to management and the kids are off to the university ?\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:556
#, no-wrap
msgid "Or I got mistaken since the beginning, and opensource is about giving over-complicated tools to geeks who don't really need them, while trying to convince the rest of the world that open-source is not an hyper-niche for developers ?\n"
msgstr ""

#. type: Title ##
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:557
#, no-wrap
msgid "Four years of work to get there"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:560
#, no-wrap
msgid "After 4 years of working on Darktable full-time for 70 % of minimal wage, and 2 years bearing the chronic dissatisfaction of staining my name by contributing to shit, I forked Ansel and will not go back.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:562
#, no-wrap
msgid "In 4 years, I brought to this software something that sorely lacked : an unified workflow, based on a set of modules __designed__ to work together, but acting each on a distinct aspect, where Darktable modules were rather a collection of disparate plugins. We are talking about :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:571
#, no-wrap
msgid ""
"* filmic,\n"
"* tone equalizer,\n"
"* the physically-accurate blurs module,\n"
"* both versions of the color balance,\n"
"* color calibration, including the GUI to profile with color checkers straight in darkroom and the white balancing using CIE standards,\n"
"* the negadoctor module to invert film negatives based on Kodak Cineon,\n"
"* the diffuse and sharpen module for addition and removal of blur based on thermal diffusion,\n"
"* the guided laplacian reconstruction of highlights.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:573
#, no-wrap
msgid "I also developed more fundamental tools providing bases for the previous modules :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:580
#, no-wrap
msgid ""
"* a 4th order anisotropic partial differential equations solver in wavelets space for diffuse and sharpen,\n"
"* an adaptation of the predious as the guided laplacian for RGB signal reconstruction by gradients propagation,\n"
"* a perceptual color appearance model taking the Helmholtz-Kohlrausch effect into account in the saturation computation, to limit the \"fluo\" effect that typically comes with intense saturation settings, in color balance,\n"
"* a theoritical help in developing the exposure-invariant guided filter (EIGF), in tone equalizer,\n"
"* a linear vector equations solver by Choleski method,\n"
"* various interpolation methods of order 2, 3 and radial-based.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:582
#, no-wrap
msgid "In the GUI, I notably did :\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:586
#, no-wrap
msgid ""
"* refactor style declaration, removing styling from C code to map them to the CSS stylesheet, allowing to have multiple themes for the UI, including user-defined ones,\n"
"* introduce the preview mode [focus-peaking](https://docs.darktable.org/usermanual/4.0/en/module-reference/utility-modules/shared/focus-peaking/) and [ISO 12 646 color assessment mode](https://docs.darktable.org/usermanual/4.0/en/module-reference/utility-modules/darkroom/color-assessment/),\n"
"* introduce the color vocabulary [in the global color picker](https://docs.darktable.org/usermanual/4.0/en/module-reference/utility-modules/darkroom/global-color-picker/), allowing to name the picked color from its chromaticity coordinates, targetting color-blind photographers.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:588
#, no-wrap
msgid "After this, I wrote dozens of documentation pages in 2 languages, published articles and dozens of hours of video on YouTube to demonstrate how to use modules, in what context and for what benefit, including quick edits using only 3 to 5 modules to process 75 to 80 % of pictures, no matter their dynamic range. In the open-source world, except perharps for projects backed-up by foundations (like Krita and Blender), this level of support and documentation simply doesn't exist, and it's not the developers themselves who handle this work.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:590
#, no-wrap
msgid "Despite all this, I never had more than 240 donators, to compare with roughly  1800 unique respondents [who participated in the 2020 and 2022 Darktable surveys](https://eng.aurelienpierre.com/2023/01/who-are-the-darktable-users/#Conclusion-of-this-part), and who declare spending [between 500 and 1000 €/an](https://www.poll-maker.com/S-Quiz-Results?qp=2539714x3792Bf5e-98#) on photography.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:592
#, no-wrap
msgid "I will not watch them destroy the usability of this software while trying to convince myself that it's progress and there is nothing we can do about it. Instead of progress, it's the delusional vision of progress by a bunch of fifty-something dilettantes. It's been 2 years that I shut up patiently, trying to be nice, but looking at the degradation of base features, complexified to comply with the fads of mad programmers, I should have been despicable earlier. Playing nice solved nothing because the trend not only carried on, but accelerated, and there will be no realization before the point of no return. We can't expect from those who created the problems to be the ones solving them.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:594
#, no-wrap
msgid "So if I have to work for a \"community\" who is in mostly for the subscription-free aspect of the software, and who decided that my work is not worth minimal wage, well, I will do it under my terms and with my standards.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:596
#, no-wrap
msgid "In terms of features, Darktable already has too much and we need to prune. It's been 10 years that I use it and it's already been packed with ill-design stuff. The challenge now is to present the features cleverly, and to fix annoying bugs __before__ these idiots introduce new ones, or even fix them in their own special way : by hiding the dust under the rug. Keeping in mind that Darktable's pipeline is 15 years old, and we can't optimize it much more than that, given that it was already tortured a lot to avoid a full rewrite (and a full rewrite offers no benefit if we have to keep Gtk as graphical backend since it's the primary performance bottleneck).\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:598
#, no-wrap
msgid "The solutions needed by Darktable imply to remove code and options, not to add always more. Robustness is at that price. The Darktable team does the exact opposite without learning from its mistakes.\n"
msgstr ""

#. type: Plain text
#: content/news/darktable-dans-le-mur-au-ralenti/index.md:599
#, no-wrap
msgid "With Ansel, I want a way to finish this work peacefully so Linux users have a reliable, consistent and performant tool for their artistic photography. Before switching to [Vkdt](https://github.com/hanatos/vkdt/) because the current design is shows its limits.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/implementing-kill-switch.md:1
#, no-wrap
msgid "Implementing kill-switch on pipeline"
msgstr ""

#. type: Plain text
#: content/news/implementing-kill-switch.md:11
#, no-wrap
msgid "I have thought, for a very long time, that there was some kill-switch mechanism on the pixel pipeline. The use case is the following :\n"
msgstr ""

#. type: Plain text
#: content/news/implementing-kill-switch.md:16
#, no-wrap
msgid ""
"1. you are changing a module parameter,\n"
"2. the previews (the central darkroom one and the thumbnail in left panel, also used for histogram and color pickers) recompute their pipeline to account for that change,\n"
"3. one of the previews finishes rendering before the other, and the result is obviously __not__ what you wanted,\n"
"4. you change again the module parameter, without waiting for the recomputation to finish.\n"
msgstr ""

#. type: Plain text
#: content/news/implementing-kill-switch.md:18
#, no-wrap
msgid "In that case, you want to kill all active pipelines because their output will not be used, and start recomputing everything immediately with new parameters. Except Darktable doesn't do that, it lets the pipeline finish before restarting it, and looking at the comments in the source code, it seems to be a fairly recent regression and not the originally intended behaviour.\n"
msgstr ""

#. type: Plain text
#: content/news/implementing-kill-switch.md:20
#, no-wrap
msgid "I have (re)implemented this feature in Ansel, but it's tricky because we are dealing with different threads (GUI, editing history and pipeline on CPU/OpenCL) and we need to synchronize them properly.\n"
msgstr ""

#. type: Plain text
#: content/news/implementing-kill-switch.md:22
#, no-wrap
msgid "If this goes bad, you may experience garbled previews from inconsistent cache states. This is a GUI issue only, and the mitigation strategy is to go to the global menu -> Run -> Invalidate all caches.\n"
msgstr ""

#. type: Plain text
#: content/news/implementing-kill-switch.md:24
#, no-wrap
msgid "To debug, you may start Ansel with :\n"
msgstr ""

#. type: Fenced code block
#: content/news/implementing-kill-switch.md:25
#, no-wrap
msgid "$ ansel -d perf\n"
msgstr ""

#. type: Plain text
#: content/news/implementing-kill-switch.md:30
#, no-wrap
msgid "When interacting with sliders and comboboxes in GUI (for example here in exposure module), you will get :\n"
msgstr ""

#. type: Fenced code block
#: content/news/implementing-kill-switch.md:31
#, no-wrap
msgid ""
"100,407003 [dev_process_all] sending killswitch signal on running pipelines took 0,000 secs (0,000 CPU)\n"
"100,509816 [dev_pixelpipe] took 0,011 secs (0,023 CPU) processed `exposure` on GPU, blended on GPU [full]\n"
"100,510498 [dev_pixelpipe] took 0,019 secs (0,035 CPU) processed `exposure` on GPU, blended on GPU [preview]\n"
"100,533228 [dev_pixelpipe] took 0,023 secs (0,061 CPU) processed `lens correction` on GPU, blended on GPU [full]\n"
"100,558939 [dev_pixelpipe] took 0,026 secs (0,129 CPU) processed `tone equalizer` on CPU, blended on CPU [full]\n"
"100,563703 [dev_pixelpipe] took 0,005 secs (0,008 CPU) processed `unbreak input profile` on GPU, blended on GPU [full]\n"
"...\n"
msgstr ""

#. type: Plain text
#: content/news/implementing-kill-switch.md:41
#, no-wrap
msgid "Normal behaviour is the `[dev_process_all] sending killswitch signal` line should appear at the time of your interaction, and should be followed by a recomputation starting at the module you interacted with (not the one before, not the one after), up to the end (display encoding module).\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/welcome-dev-docs/index.md:1
#, no-wrap
msgid "Welcome, developer documentation !"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:11
#, no-wrap
msgid "Back in December 2019, I asked that someone [took care of providing AppImages packages](https://github.com/darktable-org/darktable/issues/3925) for Darktable. The obvious benefit would have been enabling early testing, prior to release, from people who can't build the source code themselves, as to _hopefully_ provide early feedback and help debugging __before__ releasing. This has never been a priority, which means that it was ok to have a pre-release __and__ a post-release rush to fix bugs.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:13
#, no-wrap
msgid "I was not joking when I said that Darktable was a burn-out factory, managed like the worst start-ups, except nobody will do an exit and it's basically a dry loss for everybody involved. I'm all the more angry about it that a lot of man-hours have been wasted on cluttering the UI with cosmetics, while having nightly builds for general use would have improved both the quality of the software, but also the comfort and quality of life of its maintainers. These goals obviously didn't matter.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:15
#, no-wrap
msgid "So, since one is never better served than by his own bugs, [I had to do it myself](https://github.com/aurelienpierreeng/ansel/commit/3852b1ba2c0be84c5130d4c21844f3199b3624b2), and in mid-December 2022, Ansel got AppImage nightly builds scripts that Darktable re-used a month later. With the cohorts of IT guys \"with no pixel math skills\" roaming around Darktable's hype and asking how they could help, of course, the best possible resource management was to divert man-hours from one of the very few math-able guys available on a purely IT task. That only took me something around 50 hours, because having a locally-working script is really not the same as whispering [YAML scripts](https://en.wikipedia.org/wiki/YAML) to Github Action's ears, and I had to learn it as I was doing it. Since Ansel takes 20 to 30 minutes to build (or fail) on Github Action instances, your working day is a long stuttering session of inefficient multi-tasking, while waiting for your script changes to yield a remote result. I hate programming, and I make do for maths and physics, but that kind of menial server configuration is really the worst kind of programming there is, insofar that it is neither creative nor cognitively challenging, it's only a time-consuming way of working around the design limitations of third-party APIs.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:17
#, no-wrap
msgid "So, finally, Ansel was a semi-organized software project, able to include an userbase larger than just the die-hard geeks who look down on everyone unable to get GCC and CMake in building order, with a big \"download\" button on the [front page](/) that would always point to the latest build, without users having to figure out what the latest one was. Because a photo editor software should not filter out users based on their computer litteracy, whether or not it comes from the Linux world (which really is no excuse), or there is a memo from the free software Fundation that I didn' get.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:19
#, no-wrap
msgid "But the last major issue was the lack of a developer documentation. Back in 2018, when I started contributing to Darktable, I had a very hard time grasping how the internals were wired, from just reading the code. 7 years later, even with all my experience, I still have to reverse-engineer my way through the code, using as much [`grep`](https://en.wikipedia.org/wiki/Grep) as my intuition, because the code is not modular, few places use APIs, comments are lacking, and line-by-line [Git blame](https://git-scm.com/docs/git-blame) doesn't always allow to go back in the history of design changes when someone committed (useless) code formatting changes.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:21
#, no-wrap
msgid "That lack of developer documentation led to many features being implemented more than once, in several places, by several developers (and sometimes even by the same, over the years). At the time of writing, there are still 4 or 5 different ways, in Ansel, to write a picture history from library database to a sidecar XMP file. Some of these ways are rarely used, thus barely tested, and bugs there could go unnoticed for years, until someone reports the super-peculiar bug hidden in the forest of options. Then, for the maintainer in charge, it's a silly game of figuring out why XMP fail only in a some circumstances, which requires archaeology into the code base to figure out that it doesn't use the main XMP writing method. XMP are a specific, and still current, example, but there were many others. You get the idea.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:23
#, no-wrap
msgid "I had noted for several years that (old) Darktable C header files had pretty much all [Doxygen docstrings](https://www.doxygen.nl/manual/docblocks.html). This is a very lazy way of doing documentation: run the command `doxygen -g <config-file>` against your source code directory, and Doxygen will build you an HTML static website of all APIs. Then you can dump all HTML files to a webserver directory, and call that your dev docs : the only tedious bit is to write the configuration file, which you do only once. So I did that: [dev.ansel.photos](https://dev.ansel.photos). API that I have rewritten (like [`selection.h`](https://dev.ansel.photos/selection_8h.html)) are documented as I made progress. Higher-level descriptions of the software architecture are incoming.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:25
#, no-wrap
msgid "The great thing about Doxygen is it also produces dependency graphs of \"modules\" and APIs. And that's where you can actually see why I call Darktable's code spaghetti. This is the dependency graph of `accelerators.h`, the keyboard and MIDI shortcuts backend:\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:27
#, no-wrap
msgid "![](accelerators-before.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:29
#, no-wrap
msgid "That shows you that the accelerators backend is absolutely not modular: it inherits the whole software. So any change elsewhere may have unforseen effects in there, and the other way around. Which is all the more concerning since this file has the [highest cyclomatic complexity of the whole software](https://sonarcloud.io/component_measures?id=aurelienpierre_darktable&metric=complexity&view=list), which makes it the most challenging file to maintain (I don't even dare to say _extend_, at that point it would be irresponsible). But it's also completely twisted in terms of direction of includes : shortcuts are a basic block that should __be included__ (aka _inherited_) in the GUI places that will implement shortcuts (darkroom/lighttable views, sliders and comboboxes, modules). Instead, the graph (and the file `#include` header) shows that shortcuts are also including (_inheriting_) their \"children\", so we have a double dependency and that's the worst possible way of doing it.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:31
#, no-wrap
msgid "It's like building a house : the house should be aware of its walls, the walls should be aware of their bricks. Why ? Because the house is _made of_ walls, and the walls are _made of_ bricks, so every sub-component determines the nature and behaviour of the assembly, therefore the assembly has to know its immediate components. You don't make bricks aware of the house, because they won't change their nature depending on the assembly they belong to, and that would be a terribly flawed design. Same as it's an unnecessary level of micro-management to make the house aware of the bricks: once it's aware of its walls, it's up to the walls to account for the behaviour of their bricks, and maybe dispatch relevant info to the house. Object-oriented languages have builtin (and mandatory) ways of dealing with all that cleanly. But it's C, so you can do whatever the fuck you want to do. Doesn't mean it's a good idea, doesn't mean you should. And, well, C __not__ being an intrisincally object-oriented language is not an obstacle to using object patterns, inheritance and modularity. It's just that the developer will get no help from the language syntax to do so.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:33
#, no-wrap
msgid "This is the same file after my complete rewrite of the shortcuts backend:\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:35
#, no-wrap
msgid "![](accelerators-after.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:37
#, no-wrap
msgid "That clearly shows that the new shortcuts handler is a thin wrapper over Gtk native shortcuts, it doesn't know the rest of the software and doesn't care. We can look at the `accelerators.c` file too:\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:39
#, no-wrap
msgid "![](accelerators-after-2.jpg)\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:41
#, no-wrap
msgid "Now, there are lots of includes there from `darktable.h`, which is used only to get the debug helpers (they should be refactored away from that file), and includes a lot of unneeded crap too. Anyway, `accelerators.c` is aware only of Gtk/Gdk, which means it is a real module: it's completly isolated from the rest of the software. GUI widgets that implement shortcuts will declare their shortcut path, like `Ansel/Global/Menu/File/Import`, their default keys, and a reference (pointer) to themselves. Widget-less actions that have shortcuts will declare a callback function and input data to the shortcuts handler, instead of a pointer to a widget.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:43
#, no-wrap
msgid "We save/restore the pathes and keys associations to/from the `keyboardrc` file, and that's it. There is no window to define shortcuts in GUI at this time, but making one will only have to list (loop over) known pathes and their associated keys. When the shortcuts handler catches a known combination of keys:\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:46
#, no-wrap
msgid ""
"- for the widget-attached actions, it will send an `activate` Gtk signal to the relevant widget, and that widget will do its own thing through a callback (which is the same as the callback handling clicks, so the code is uniform between clicks and keyboard activation),\n"
"- for the widget-less actions, it will directly call the declared callback function over the declared data.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:48
#, no-wrap
msgid "Both ways, the `accelerators` module communicates with the rest of the application through an interface exchanging 4 data fields, in a completely opaque way. As long as the interface doesn't change, changes can be made everywhere: they will stay enclosed into their module. With proper skills, this logic _could have_ been extended to MIDI devices support. But that's the difference between engineering and prototyping proof of concepts that should never make it into production.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:50
#, no-wrap
msgid "This is unfortunately a trademark of the Darktable's way of doing things: GUI code is incrusted everywhere, even in SQL code. The other way around, SQL code is found in many GUI places (lighttable, history management, image tagging, etc.). Dependency graphs, embedded in Doxygen, are a very nice side-effect that shows the depth of the problem and make the spaghetti very obvious, because, apparently, problems don't exist until you actually see them yourself.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:52
#, no-wrap
msgid "But it doesn't stop there. As I was writing my own Doxygen config file, I got an error: Doxygen reported 2 config files and was confused. It turns out that Darktable had everything wired for automated developer documentation generation [since 2010](https://github.com/darktable-org/darktable/commits/master/doc/doxygen.conf). Why it was never put into production, and actually hosted on some server, is not merely wrong priorities: it's negligence.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:54
#, no-wrap
msgid "Of course, it doesn't help that the guy owning the `darktable.org` domain is not the same as the one managing the server where it's actually hosted. And the guy having actual commit rights over the `darktable.org` website is yet another one. The most pressing thing to do, when you are an open-source project making zero dollar of income, is to reproduce __all__ the mistakes of the corporate world, from the pressure to release half-baked shit at an irresponsible frequency, to the scattering of responsibilities between \"services\" that don't really communicate with each other (or with great delays). Because, in software (whether opensource or not), mistakes are meant to be reproduced. And since software has taken over the world, even in places that didn't need it, that says a lot about the world we live in.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:56
#, no-wrap
msgid "The one thing I still truly don't get, though is : why the urgency ? Why keep working that badly given that there is no pressure nor financial incentive to do so ? Open-source is (could have been) the one place where we could actually work properly and take the necessary time to produce long-term quality. And even there, the shortsightedness of capitalism has taken over.\n"
msgstr ""

#. type: Plain text
#: content/news/welcome-dev-docs/index.md:57
#, no-wrap
msgid "_If only users knew the state of deep shit this project fell into and how all the man-hours invested on it are actively making it worse…_\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/fixing-pipe-cache-10-yo-bugs.md:1
#, no-wrap
msgid "Fixing the pipeline cache and 10 years-old bugs"
msgstr ""

#. type: Title ##
#: content/news/fixing-pipe-cache-10-yo-bugs.md:10
#, no-wrap
msgid "Recap of the previous episodes"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:17
#, no-wrap
msgid ""
"0. Between 2020 and 2022, [Darktable underwent a mass-destruction enterprise](./darktable-dans-le-mur-au-ralenti/index.en.md), by a handful of guys with more freetime and benevolence than actual skills,\n"
"1. In 2022, [I started noticing an annoying lag](https://github.com/aurelienpierreeng/ansel/issues/29) between GUI interactions with sliders controls and feedback/update of said sliders. For lack of feedback stating that the value change was recorded, users could change it again, thereby starting additionnal pipeline recomputes and effectively freezing their computer because stupid GUI never said \"got you, wait for a bit now\".\n"
"2. I discovered that pipeline recomputations orders were issued twice per click (once on \"button pushed\", once on \"button released\" events), and once again for each mouse motion, but also that the GUI states were updated seemingly after pipe recompute.\n"
"3. I [fixed that](./undarktable-ing-gui-controls.md) by almost rewriting the custom GUI controls (Bauhaus lib). I thought that preventing reckless recompute orders was gonna solve the lag : it didn't. Then, I discovered that requesting a new pipeline recompute before the previous ended waited for the previous to end, despite a shutdown mechanism implemented many years ago that should have worked.\n"
"4. I [fixed that](./implementing-kill-switch.md) by implementing a kill-switch mechanism on pipelines, following comments in the code from the 2010's and internal utilities that may well have never worked. This did not always work because the kill order came often with a noticeable delay. Once again, the GUI lag was not fixed.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:19
#, no-wrap
msgid "…\n"
msgstr ""

#. type: Title ##
#: content/news/fixing-pipe-cache-10-yo-bugs.md:21
#, no-wrap
msgid "Episode 5 : paying the technical debt"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:24
#, no-wrap
msgid "What I discovered should really make it to the manuals of computer science in the chapter about what __not__ to do if you want to write a semi-reliable application.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:26
#, no-wrap
msgid "So, whenever an image-processing parameter was changed in a module, a request was sent to add a new history entry into the database (often more than once per interaction, as shown above). History entries are nothing more than a snapshot of one module's internal parameters (including masks). If a change was detected compared to the previous history entry, a `PIPELINE_STATE` flag was set to the value `DIRTY` to indicate that the pipe would need a recompute and a `gtk_widget_queue_draw()` was sent which, as the name suggests, asks Gtk to redraw the main darkroom preview and the navigation thumbnail, but __in an asynchronous way__ (understand : whenever it finds the time, after everything previously started completes). This will have its importance later.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:28
#, no-wrap
msgid "It took me a __very long time__ to figure out how the pipeline was actually started, because none of the code attached to modules and pipeline contained anything saying \"go compute that\". In other words, none of the module code contained any explicit recompute instruction.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:30
#, no-wrap
msgid "I had to reverse-engineer the pipeline code from the other end, looking for how the pipeline __could__ be started and greping each option, until I figured out the unspeakable : the first generation of Darktable's devs had wired a callback function to the `redraw` event on the darkroom main preview and navigation thumbnail, but in a completely unrelated place in the code. In that __GUI__ callback, the value of the `PIPELINE_STATE` flag was checked, and either sent the backbuffer pixmap directly to the widget if the flag was `VALID` or asked for a pipe recompute if the flag was `DIRTY`, and that recompute __itself requested a `gtk_widget_queue_draw()`__ upon completion.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:32
#, no-wrap
msgid "This method has one merit : it's lazy coding. Then it has a shitload of drawbacks and issues :\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:38
#, no-wrap
msgid ""
"1. it's __not__ dev-friendly, especially in a software project were code greping and comments are all the doc we can dream of. It took many hours to understand the logic through program archaeology. If a command is issued, I want to read `command_issued()` in the right place in the code, because C is already difficult enough to follow without mixing riddles into debug.\n"
"2. since `gtk_widget_queue_draw()` (called __twice__ in the worst-case scenario) is only added on the queue and processed asynchronously, it adds any lag that Gtk could suffer (while processing other bits of the GUI or previous frames) before any pipeline recompute is only started, which is unnecessary since the pipeline lives in its own thread in parallel,\n"
"2. the great MIDI turducken, listening for pointing, keyboard and MIDI events to dispatch shortcuts, seemed to have overloaded the global GUI with listeners looping over all known shortcuts, which made Gtk lag to the point where it became noticeable,\n"
"3. it prevents any kill-switch mechanism from being useful, both because of delays and because of flags readings were interleaved with thread locks (and race conditions). In addition, waiting to acquire the pipeline thread lock (mutex) would freeze the GUI thread during the corresponding time, which was probably one of the causes of the slider lag before updating its position,\n"
"4. the chained calls to the `redraw` event callback, through `gtk_widget_queue_draw()`, promoted \"endless\" stuttering loops of (useless) intermediate redraws which seemed to hit people with slow computers more than those with power beasts. Those were particularly difficult to reproduce, depending on hardware performance, so you can find forums were people are convinced that Darktable is the slowest software ever while others report excellent performance.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:40
#, no-wrap
msgid "So I fixed the whole logic by :\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:44
#, no-wrap
msgid ""
"1. making the `redraw` callback stupid (drawing whatever pixmap buffer was available, unconditionnaly),\n"
"2. handling explicit pipeline recomputes in the module and history code, with the pipeline recomputes asking for a widget redraw upon pipeline completion, (yes, it's more code, and it is tedious, but now you can optimize recomputes manually — performance matters),\n"
"3. removing the special handling of \"duplicate\" history items (leading to some pollution when dealing with masks, this will need to be fixed later).\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:46
#, no-wrap
msgid "You might think that was a problem solved and a job well done, but that's leaving Darktable's geniuses out of the equation.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:48
#, no-wrap
msgid "See, the _crop_ and _perspective_ modules are special modules : opening them enables an \"editing mode\" that disables any cropping to show the full image. This is needed to drag the cropping frame (or adjust other positionnings) from the main preview, over the full original image. Problem is, there was no explicit way of asking for a pipe recompute… other than adding a new history item. So the modules added a fake history item (later reverted) only to invalidate the pipe and call the `gtk_widget_queue_draw()` function. But then, that polluted the history stack with \"empty\" steps, so another guy added a special handling case that merged history steps if no parameter changes happened. But then, the history stack (from the _history_ module, as stored in database) does not follow the _undo/redo_ history stack, leading users to misunderstandings regarding what _undo/redo_ really does.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:50
#, no-wrap
msgid "__And this, ladies and gentlemen, is how shitty design is promoting more shittier design in an endless sprawl of madness.__\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:52
#, no-wrap
msgid "Remember that all that stems from the need to make the pipe kill-switch work, so you can interrupt a recompute in the middle when you know its output will be discarded anyway. So for that I had to move the recompute request out of Gtk code, and call it everywhere required. But then I had to rewire the pipeline updating logic in _crop_, _perspective and rotation_, _liquify_ and _borders_ modules, and I still have to fix _retouch_ (which is the worse PITA of the lot).\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:54
#, no-wrap
msgid "Other than making it clearer to read, and possible to optimize the calls, the current logic also starts the pipe outside of the GUI thread, without waiting for Gtk to _please_ find the time to redraw the frame. As usual, people with crazy CPU will notice little to no benefit, performance-wise, which is probably why this is a non-issue in the Darktable team in the first place.\n"
msgstr ""

#. type: Title ##
#: content/news/fixing-pipe-cache-10-yo-bugs.md:55
#, no-wrap
msgid "Episode 6 : paying the back interests on the technical debt"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:59
#, no-wrap
msgid ""
"So, at that point, I had made pipeline recomputes explicit from the modules and GUI controls, and dispatched them sparingly (which is the benefit of dispatching them explicitely). And still, I noticed that playing with modules coming late in the pipe was slow. In fact, launching `ansel -d perf` showed that\n"
"all the pipeline, starting at the _demosaicing_ module, was recomputed even though I was interacting with a late module that took its input from _color balance_.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:61
#, no-wrap
msgid "Darktable has had a pixel cache forever. It basically stores the intermediate states of the picture, in-between modules. So, having pipe recomputes starting from much below the current module meant it was mostly useless. It turned out that the cache used only 8 cache lines, which is really under-using today's crazy amounts of RAM. But increasing that to 64 didn't help with cache misses : the cache was still mostly useless, and the most part of the pipe was still recomputed.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:63
#, no-wrap
msgid "We need to pause a bit here. Even a mechanical engineer with no proper programming education like myself knows what an [LRU cache](https://en.wikipedia.org/wiki/Cache_replacement_policies) is :\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:71
#, no-wrap
msgid ""
"1. you create a fixed list of slots (cache lines),\n"
"2. once you have something to cache, you allocate a memory buffer of previously-known size to one of those slots and assign it an unique identifier. That could be a a checksum, a random hash or even a timestamp, it just has to be cooked always the same way and lead to something unique,\n"
"3. when you need data associated with some unique identifier, you query the list of slots and search if that ID is known :\n"
"    - if it is, you fetch its associated buffer,\n"
"    - if it is not :\n"
"      - if you still have empty slots, you create the associated buffer and copy the data for later reuse,\n"
"      - if you don't, you clear out the oldest slot and reuse it to host your new data.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:73
#, no-wrap
msgid "In that process, you only need to know the size of the buffers and the IDs. It's very general, you can cache anything, even different objects, your cache doesn't have to be aware of the content, not even how the IDs are generated. It's clean, it's elegant, it's unassuming, it's generic, I would trust it with my life because it's far more robust than whatever security system you find in modern cars.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:75
#, no-wrap
msgid "So when something __that__ simple doesn't work, it's usually because someone tried something \"clever\" and failed. What the Darktable team typically does in that case, is `switch case` their way through all pathological corner-cases and make it into something even more complicated (by handling all exceptions manually with heuristics), just to ensure no one later has a chance to find the root cause of the error.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:77
#, no-wrap
msgid "For example, there were attempts at reweighting the priority of the cache lines to ensure the module before the one currently edited in GUI was cached. Not only did it not work, but it re-inforced the ties between pipeline code and GUI code, in a way that was not even thread-safe (which is why it didn't work). GUI stuff should happen at the input and at the output of the pipeline computations, not in-between, because _again_, different threads, but also it violates the modularity principle (keep program layers separated and enclosed as much as possible), and this software __needs to stop__ making everything depend on everything.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:79
#, no-wrap
msgid "Again, it took me 8 months, including mandatory breaks from that utter shitshow, to get to bottom of the problem in a way that leads to a __simplifying solution__. And I will present the findings in a linear way, like a story, but keep in mind I started discovering things in a fuzzy and random way because it's all scattered in the sourcecode, so it will look less messy than it truly was.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:81
#, no-wrap
msgid "We start with the unique ID. What truly represents a module's state in an unique fashion ? Well, a \"cryptographic\" checksum of its internal parameters. Cool, so Darktable had that implemented for a long time. Except it didn't account for the module instance number, and dealt with all kinds of `if` in the process. Not complete, not robust, not even needed. Hash everything, the hash will represent the state of variables.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:83
#, no-wrap
msgid "Yeah, but modules can be reordered, so how do we take care of pipeline order ? Well, you take all the hashes of all modules, in pipeline order, and start accumulating linearly. Great. Except Darktable actually had 2 of those, one for GUI purposes that started from the end of the pipeline (so, in reverse order), one for pipeline purposes, in the pipeline order but unaccessible from GUI (for example… to get an histogram), and again, both mixing that with all sorts of checks to handle special cases (color picker, mask preview, etc.).\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:85
#, no-wrap
msgid "Not to mention, the module internal state does not vary whether you are in the full preview or in the navigation thumbnail, in darkroom. And yet, the checksum was fully recomputed twice, once for each pipeline. Actually, make that four times, since there is also the GUI checksum (used mostly for _perspective_ and _retouch_ modules)\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:87
#, no-wrap
msgid "And, last but not least, when zoomed-in in darkroom, only the visible portion of the image (the _Region Of Interest_, aka ROI) is computed, meaning we need to keep track of where we are in the picture in our caching mechanism. But that was completely left out of the checksum. Big bug here, and old.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:89
#, no-wrap
msgid "So, how did Darktable _still manage to \"work\"_, you ask ?\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:91
#, no-wrap
msgid "Well, by flushing more or less entirely the cache on any pathological operation : zoom, pan, mask preview, color picker, enabling/disabling _crop_ and _perspective_ modules editing state. That's a way of dealing with consistency without dealing with consistency : torch it. Making it mostly useless, as the very low cache hits stats show (just start `ansel -d dev` to show it).\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:93
#, no-wrap
msgid "How did I solve the problem ?\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:98
#, no-wrap
msgid ""
"1. When a new module history entry is added, the parameters checksum is computed, taking parameters, masks, blending options, instance number, order in pipeline, etc. into account. Meaning all pipelines share the same checksum/ID here (possible future use would be to save it into database),\n"
"2. Before a pipeline is computed, we compute the global checksum of all modules, from start to end, taking into account the mask display state, the checksum of previous modules, and the ROI (size and coordinates). This checksum can be directly accessed later, without additional computation.\n"
"3. The cache deals with this global checksum, and only that. No ifs, no buts, no heuristics, no conditions, no workarounds.\n"
"4. Modules can request a cache bypass, for example when using color picker. This contaminates later modules in the pipeline before the pipe is computed, so the cacheless state is known early and doesn't affect upstream modules. That should only be a workaround before color pickers can actually use cache lines directly, and could be reused for future modules doing non-standard stuff (painting ?).\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:100
#, no-wrap
msgid "Benefits :\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:106
#, no-wrap
msgid ""
"1. The module-wise, internal, checksum is computed once for all pipelines,\n"
"2. Because the pipeline-wise, global, checksum of each module is known before starting the pipeline recompute :\n"
"    - it can also be used for GUI synchronization, so I merged both Darktable checksums into one,\n"
"    - it is constant within the scope of the pipeline, allowing to share cache lines between several pipelines (for example, demosaicing and denoising) with limited thread locking issues[^2]\n"
"3. Modules doing weird things have an uniform and predictable way of requesting a cache bypass from GUI events, should they need it.\n"
msgstr ""

#. type: Link reference
#: content/news/fixing-pipe-cache-10-yo-bugs.md:107
#, no-wrap
msgid "[^2]: The source code actually has a 10-years-old `TODO` comment detailing how to do that."
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:110
#, no-wrap
msgid "This logic is not only more efficient (fewer computations), it's also simpler and can be extended for interesting features. From the cache perspective, we deal with nothing else than a checksum, every module state of interest is convolved in it.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:112
#, no-wrap
msgid "But, more importantly, the cache is finally useful, especially when going back-and-forth in editing history, using undo/redo, or enabling/disabling modules. Overall responsiveness of the GUI is much better.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:114
#, no-wrap
msgid "I'm sure there are undiscovered caveats and details that I forgot to re-wire to the new logic, and the _retouch_ module is still mostly broken, but adapting to something that simple should be doable.\n"
msgstr ""

#. type: Title ##
#: content/news/fixing-pipe-cache-10-yo-bugs.md:115
#, no-wrap
msgid "Meanwhile in Darktable 4.8"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:124
#, no-wrap
msgid ""
"1. Pipeline checksum is computed during pipeline runtime, so it's unknown outside,\n"
"2. Because of that, they didn't deduplicate the GUI vs. pipeline checksums… good luck tracking inconsistencies between both in the future,\n"
"3. [Their cache handling code](https://github.com/darktable-org/darktable/blob/master/src/develop/pixelpipe_cache.c) is more than twice as large as [mine](https://github.com/aurelienpierreeng/ansel/blob/master/src/develop/pixelpipe_cache.c) and uses heuristics (over the type of pipeline, kind of module, state of masks display, color picker use, and caching hints defined manually in modules) to work around issues. The cache is not content-agnostic anymore and good luck debugging these spaghetti.[^3]\n"
"4. They are still entirely computing the module parameters (internal) checksum twice, once for each pipeline,\n"
"4. It took them almost 2 years to get there (since 4.0 release),\n"
"5. I would love to see their cache hits/misses stats (do I want to revive my PTSD by opening that soft ever again ? I'll pass, thanks).\n"
"6. People who think having more monkeys waving their hands in the air guarantees better quality should stop thinking.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:129
#, no-wrap
msgid "The amount of time spent and recently-broken shit to fix to get there was properly unbearable, but it was made worse by code scattered in a non-modular fashion without a clear distinction between what belongs to the (G)UI, what belongs to the backend, what belongs to  module histories and what belongs to pipeline nodes. The cache thing only took 8 months, mostly archaelogy and reverse-engineering, on top of what was already done in GUI controls and explicit pipeline recomputes.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:131
#, no-wrap
msgid "There are still issues to fix :\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:137
#, no-wrap
msgid ""
"- the number of available cache lines is an user preference and doesn't check for available memory left on device,\n"
"- the histogram/scopes module is mostly broken by design, because it was handled through special heuristics (now removed) on a module that is invisible in GUI (`gamma.c`). The new logic makes it possible to force-cache it and to fetch the cache line from the GUI thread.\n"
"- internal module's histogram are not immediately drawn when going in darkroom,\n"
"- color-pickers handling could be simplified and made more elegant,\n"
"- history handling still have some corner cases.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:139
#, no-wrap
msgid "However, since I'm refusing to \"fix\" anything if my fix doesn't make things more simple, that strategy is starting to pay because the code is a lot more linear, with fewer cases to test, and ultimately sligthly faster. As I make progress, it's slowly becoming more readable and more fixable. Then, of course, shaking the core of the software to that extent is bound to break things (which shouldn't break if the code was modular).\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:141
#, no-wrap
msgid "There comes the legitimate question asking : why bother fixing Ansel/Darktable ugly legacy and not move on to something better, faster and shinier (like Vkdt) ? Well, Vkdt (or anything else new) will stay a rough prototype, competing with other rough prototypes (that's _Open Source_ in a nutshell), years away from a generally-usable product. Adding another unfinished/half-assed prototype to the landscape will do no good. It would be nice to have something __not__ scruffy and fairly finished, for a change. Besides, the (very) old code of Darktable is clean and sturdy (well, for the most part), it's only the past few years that have taken a turn for the shittiest. `git blame` always shows the same 3 names on the really shitty lines, to a point where I sometimes find myself automatically deleting the corresponding lines when I saw who wrote them, out of habit.\n"
msgstr ""

#. type: Plain text
#: content/news/fixing-pipe-cache-10-yo-bugs.md:143
#, no-wrap
msgid "There is also the fear that, no matter how fast Vulkan makes Vkdt, what really makes Darktable shitty is bad decisions, bad priorities, programming mistakes, lessons not learned, and if those mistakes are reproduced over Vkdt, it might take longer to realize the consequences with more horsepower, but ultimately things will go the same way. Having more resources makes it more affordable to be stupid… until it doesn't and you realize how trapped you are.\n"
msgstr ""

#. type: Link reference
#: content/news/fixing-pipe-cache-10-yo-bugs.md:144
#, no-wrap
msgid "[^3]: It should be noted that \"my\" cache code is actualy pretty much how Roman Lebedev and Johannes Hanika wrote it 10 years ago. I simplified a couple of things, mostly removing stuff added since then, and added nothing of my own, because it's a Garbage In/Garbage Out situation where you should rather clean your input rather than trying to handle any corner case internally through unlegible heuristics."
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/dev-diary-1.md:1
#, no-wrap
msgid "Dev diary"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-1.md:11
#, no-wrap
msgid "It's been roughly 3 months that I rebranded \"R&Darktable\" (that nobody seemed to get right), into \"Ansel\", then bought the domain name and created the website from scratch with Hugo (I had never programmed in Golang before, but it's mostly template code).\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-1.md:13
#, no-wrap
msgid "Then I spent a total 70 h on making the nightly packages builds for Windows and Linux work for continuous delivery, something that Darktable never got right (\"you can build yourself, it's not difficult\"), only to see the bug tracker blow up after release (nothing better than chaining the pre-release sprint with a post-release one to reduce your life expectancy).\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-1.md:15
#, no-wrap
msgid "People keep asking for a Mac build because they have no notion of the amount of work it requires while the Brew package manager breaks lib dependencies on a weekly basis when you are not lucky. Mac OS simply requires an unreasonable amount of care, which becomes a dry loss when you know that not even 9 % of Darktable users run it. Also, for the last time, Github (actually, the Microsoft Azure instances providing Github actions runners) has no ARM system, so anyway a nightly Mac build would necessarily be on AMD64 architecture, that is old MacBook from before Apple decided once again to go full Apple on its own island. Don't expect 90 % of the free world to scurry over a tech nobody needed and barely anybody uses.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-1.md:17
#, no-wrap
msgid "From then, I have optimized the local laplacian in highlights reconstruction with a stupid trick : processing a downsized image instead of the full-resolution one. I had this idea in the back of my mind for a long time but feared the detrimental side-effects. But since clipped areas are signal-less anyway, processing a slightly blurrier version is almost invisible. Also, the shoulder of your typical S/filmic tone curve will anyway compress everything close to white, so it reduces percieved sharpness by reducing contrast in highlights no matter what. We are talking 96 % speed-up on CPU (mostly because we can process the image at once with no tiling).\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-1.md:19
#, no-wrap
msgid "Using that, I developed an experimental noise and chromatic aberrations pre-filter re-using multi-scale guided laplacians. It's not bad, but again quite slow.\n"
msgstr ""

#. type: Plain text
#: content/news/dev-diary-1.md:20
#, no-wrap
msgid "Since February, most of the work has been spent on cleaning up the GUI by moving collections of buttons, either the full-text ones or the weird icon ones, to the global menu and rewiring the keyboard shortcuts to that. It makes feature more discoverable while reducing screen real estate.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/_index.md:1
#, no-wrap
msgid "News"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/news/modules-groups-redesign/index.md:1
#, no-wrap
msgid "Design"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/modules-groups-redesign/index.md:1
#, no-wrap
msgid "Explaining Ansel redesign of module groups"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:11
#, no-wrap
msgid "If you come from Darktable, you may be used to this in the darkroom:\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:13
#, no-wrap
msgid "{{< figure src=\"organization.png\" />}}\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:16
#, no-wrap
msgid "while Ansel offers you this:\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:18
#, no-wrap
msgid "{{< figure src=\"ansel-module-groups.png\" />}}\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:21
#, no-wrap
msgid "This is no accident, and it's time to explain why, and why this will not be extended with customization options.\n"
msgstr ""

#. type: Title ##
#: content/news/modules-groups-redesign/index.md:22
#, no-wrap
msgid "Images are born from pipelines"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:25
#, no-wrap
msgid "A pixel pipeline is a sequence of filters in which pixels are processed to end on a medium. Photoshop calls those filters [_layers_](https://helpx.adobe.com/photoshop/using/layer-basics.html), abiding by a methaphor inherited from paper and matte painting. Da Vinci Resolve, Blender, Natron, etc. calls them [_nodes_](https://filmmakingelements.com/everything-about-nodes-in-davinci-resolve/), abiding by a metaphor grounded in directed graphs and [flowcharts](https://en.wikipedia.org/wiki/Flowchart), best known to engineers. Both have a way of showing how those filters are organized, either with a layer stack or with the node graph (aka flowchart).\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:27
#, no-wrap
msgid "The important part is, __order matters__.\n"
msgstr ""

#. type: Title ##
#: content/news/modules-groups-redesign/index.md:28
#, no-wrap
msgid "A brief history of bad design"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:31
#, no-wrap
msgid "Darktable calls those filters modules. But \"modules\" refers to the [modular programming logic](https://en.wikipedia.org/wiki/Modular_programming) : each module is coded separately, using an uniform API, and doesn't know about the other modules. The pipeline itself doesn't know anything about the internals of modules, it only wires the inputs and the outputs. It's a clean way of developing, but it's completely irrelevant to the end-user.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:33
#, no-wrap
msgid "The problem is Darktable has 2 kinds of modules :\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:36
#, no-wrap
msgid ""
"1. the lighttable modules (and the modules in the left panel of the darkroom), which are arbitrary toolboxes and therefore __purely GUI elements/frames__,\n"
"2. the darkroom modules, which are both __a pixel filter__ located somewhere in the pipeline, and also __a GUI toolbox.__ (same as the previous modules).\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:38
#, no-wrap
msgid "And those different modules, on top of being named the same, look exactly the same…\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:40
#, no-wrap
msgid "{{< figure src=\"ansel-lighttable-modules.png\" />}}\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:42
#, no-wrap
msgid "That's 3 mistakes here :\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:46
#, no-wrap
msgid ""
"1. naming a GUI object by its technical implementation name instead of its functionnal purpose,\n"
"2. naming and representing 2 conceptually-different objects the same way,\n"
"3. failing to represent the order of the modules in a clear, hierarchical way.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:49
#, no-wrap
msgid "As a result, many users still consider all modules to be arbitrary toolboxes, and have asked for years ways to reorder them arbitrarily in the window, which a spineless (lack of) technical leadership gave to them, in the shape of a terribly-coded (3500 lines of code, subtly broken) and overcomplicated module group, eating 3 % of your CPU even when you don't interact with the application, for as long as your darkroom sits idle.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:51
#, no-wrap
msgid "The cherry on the sunday is the groups are labelled by icons, for the sake of compactness, but those icons are absolutely cryptic and only the long-time users pretend to know what they represent (I have drawn the one representing light rays going through a thin lens, that people take for an UFO – I learned from that mistake).\n"
msgstr ""

#. type: Title ##
#: content/news/modules-groups-redesign/index.md:52
#, no-wrap
msgid "Good workflows are pipeline-aware"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:55
#, no-wrap
msgid "It's been 3 years that I'm paid by users to explain them the ins and outs of the software, and answering the same question over and over : where to start a workflow and how to unroll it. What still strikes me is that people with a master's degree, who read the doc and watched most of my videos, are still unable to start an image editing workflow by themselves. Either this is screaming bad design or most people with higher education are idiots. Actually, even if people were idiots, it's easier to make the design idiot-proof[^3] than to expect them to grow a brain overnight, so either way the design is bad with regard to the target audience.\n"
msgstr ""

#. type: Link reference
#: content/news/modules-groups-redesign/index.md:56
#, no-wrap
msgid "[^3]: And I mean \"idiot-proof\" in a [\"prevent pouring water into the acid\"](https://www.youtube.com/watch?v=SH3a8ZQLA4I) way, not in a \"cancel chemistry labs because acid can burn\" way. It's not idiot-proof if the idiot is not allowed to do anything."
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:59
#, no-wrap
msgid "If you open Photoshop, the layers stack upon each other pretty intuitively. We all worked with layers for art projects in primary school. It wouldn't strike you to start working on the bottom-most layer after you put some new stuff on top. Well, the 70-something modules of Darktable, organized in tabs by theme, in a way that doesn't account for the pipeline nor for the workflow, are guaranteed to deter the newcomers and to promote bad habits among the old-timers.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:61
#, no-wrap
msgid "Sane workflows are pipeline-aware, which means the order in which you tune the filters should be defined by where those filters sit in the pipeline. But I say pipeline-aware, and not pipeline-defined, because the beginning and the end of the pipeline (properties of the scene and of the display) should be set first, as to have a good look over what we do in-between. Especially if you are going to manipulate HDR signals on an SDR display, you need to put on your HDR sunglasses first to view your signal in SDR. But what you see is not what there is in your pipeline. Hence why the workflow doesn't follow 1:1 the pipeline, but still s pretty close to it.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:63
#, no-wrap
msgid "Imagine you set a color cast in _color balance_ module, targeting highlights through the _gain_ setting. Then you find the picture too dark and brighten it with _exposure_ module. But _exposure_ comes (way) before _color balance_ in your pipe, so now you need to update the color cast setting because it will probably be too heavy on midtones. Now, convolve that with another intermediate module (or more) that would use a parametric mask on any metric of lightness or luminance… You are on for __circular editing__, a particularly unefficient kind of frustrating editing experience where any new setting invalidates the previous. Of course, there are those who think that, photography being an art, it's all a matter of opinion and preferences, so ultimately none of this matters. Art or not, a house of cards will fall entirely anytime you start messing with the lower stories, so ultimately it's about how much time you accept to waste, and this has nothing to do with opinions or preferences. I would also argue that week-end hobbyists are just as time-constrained as professional photographers : the latter for economical reasons, the former because week-ends only have 2 days and they will need to be back at the office on Monday morning with enough fun in their system to endure another week.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:65
#, no-wrap
msgid "So how do you know when to drift away from the pipeline order ? Well, you book a session with me for the demo. But there is another solution (more on that below)…\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:67
#, no-wrap
msgid "In any case, offering users more options to customize the UI (and perhaps re-enforcing the initial misconception of modules being only GUI boxes) is not going to solve it. It's actually giving people more options to harm themselves. What you want and what is good for you…\n"
msgstr ""

#. type: Title ##
#: content/news/modules-groups-redesign/index.md:68
#, no-wrap
msgid "Re-examining the problem"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:71
#, no-wrap
msgid "While Darktable has degraded into a playground for geeks where new means better and every problem calls for more funny code, Ansel is about solving simple problems the simple way, as to produce a reliable workhorse. So let's start again from the top.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:73
#, no-wrap
msgid "We have 70 modules. Though Ansel has deprecated a fair deal of them, there are still \"too many\", in the sense that they are all useful for some purpose but you don't need them all the time, and not all at the same time. Also the screen real-estate is limited and we definitely can't have all of them displayed at the same time. And even if we could, presenting and Airbus dashboard to your average photographer wouldn't be nice.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:75
#, no-wrap
msgid "So we need to chose what modules to display at what time. Emphasis on __time__.\n"
msgstr ""

#. type: Title ##
#: content/news/modules-groups-redesign/index.md:76
#, no-wrap
msgid "Unrolling the time axis"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:79
#, no-wrap
msgid "Following on the idea of _just in time_, it seems only natural that the time axis would be splitted into workflow steps. So the selection of all visible modules at a given time matches the ones that you will need right now and in the next minutes. Moving on to the next workflow step, you move on into the GUI and change the view. It's called a slideshow.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:81
#, no-wrap
msgid "This draws a linear path to follow, to get some structure and guidance out of the apparent clutter. GUI are not only meant to expose controls, they are also meant to teach, communicate and advertise the available possibilities.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:83
#, no-wrap
msgid "So each tab is now a slide of our workflow slideshow, which is closely tied to pipeline order. And structure appeared out of clutter.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:85
#, no-wrap
msgid "With some exceptions. For example, denoising modules have to happen early in the pipeline for signal consistency, yet they appear later in the workflow than, say, _color calibration_, because they work at pixel level and will generaly not change the global color cast (unless you have some serious noise damage that might shift the green/magenta axis, but that's typically above 8000 ISO). Same with sharpening algorithms : none of these will dramatically change lightness, hue or chroma as to invalidate previous (workflow-wise) global color and exposure settings, and the proper settings will also be subjected to how much you raised the picture exposure (thereby aggravating the visual strength of noise). Those exceptions to the rule are made clear by numerical analysis of the pixel filters, meaning that people who didn't read the sourcecode with prior signal processing knowledge will have no clue.\n"
msgstr ""

#. type: Title ##
#: content/news/modules-groups-redesign/index.md:86
#, no-wrap
msgid "Implementation"
msgstr ""

#. type: Title ###
#: content/news/modules-groups-redesign/index.md:88
#, no-wrap
msgid "Principle"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:92
#, no-wrap
msgid ""
"Workflow steps == module tabs.\n"
": Those tabs have textual names, which might take more GUI space but you don't have to read a doc and/or guess what they mean : it's written on the label.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:95
#, no-wrap
msgid ""
"The first and last tabs are special\n"
": They show respectively the list of enabled modules (pipeline) and the whole list of available modules (all).\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:98
#, no-wrap
msgid ""
"Not all tabs are immediately visible\n"
": Depending on sidepanel width, some tabs will be hidden, which is fine because you are going to follow them from left to right in sequence, so you don't really need to know what's coming after\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:101
#, no-wrap
msgid ""
"Inside tabs, modules are organized as layers in the pipeline order\n"
": That is from bottom to top. That's how you should set them. So the stack of modules represents the stack of effects/filters/layers on top of the raw image.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:103
#, no-wrap
msgid "TL;DR: __follow GUI order from left to right, and bottom to top (because it's layers), and you have your workflow without tedious doc reading.__\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:105
#, no-wrap
msgid "The darkroom modules can be reordered in any tab by holding <kbd>Ctrl+Shift</kbd>[^2] while doing a drag-and-drop with the mouse, over the module headers. Be aware that this reorders modules in the pipeline too, it is not to be used as a GUI convenience. It is best to this in the \"pipeline\" or \"all\" tabs, where you have a full look over the pipeline content.\n"
msgstr ""

#. type: Link reference
#: content/news/modules-groups-redesign/index.md:106
#, no-wrap
msgid "[^2]: It's shitty but that's because Gtk's way of handling drag and drop events sucks."
msgstr ""

#. type: Title ###
#: content/news/modules-groups-redesign/index.md:108
#, no-wrap
msgid "Linear navigation"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:111
#, no-wrap
msgid "__With the mouse__ and pointing devices, tabs can be navigated by:\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:116
#, no-wrap
msgid ""
"- clicking the ones that are visible,\n"
"- clicking on the arrows to reveal the previous/next tabs (visible or hidden),\n"
"- right-clicking on any tab to reveal a contextual menu containing the list of all tabs,\n"
"- scrolling (with the mouse wheel) previous/back on the tabs bar to switch tabs. Once you reached the end, it will cycle back with an \"hard push\" ensuring it's really what you want to do.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:118
#, no-wrap
msgid "Then modules can be navigated by scrolling them in the sidebar, the scroll event is captured by sliders only after a previous interaction was done with them. Unfolding modules automatically scrolls the bar if needed, as to display them in full if possible, or at least to align their upper border with the viewport.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:120
#, no-wrap
msgid "__With the keyboard__, tabs can be navigated by <kbd>Ctrl+Tab</kbd> and <kbd>Ctrl+Shift+Tab</kbd> to switch between next/previous tabs, as you would expect in any web browser. This will also cycle back when you reached the end of tabs.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:122
#, no-wrap
msgid "Then, within a tab, modules can be navigated with <kbd>Page Up/Down</kbd> to move to previous/next module, vertically in the stack. This automatically unfolds each selected module while folding all the others, and aligns the current module vertically as to try and fit it entirely in the screen.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:124
#, no-wrap
msgid "This sequential way of accessing next/previous module is meant to solve the terrible UX of Darktable where you have to assign exactly one shortcut per module to unfold it, and then have to remember all those special shortcuts while being unable to re-use them in other parts of the software.\n"
msgstr ""

#. type: Title ###
#: content/news/modules-groups-redesign/index.md:125
#, no-wrap
msgid "Transversal navigation"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:128
#, no-wrap
msgid "If you have already been trapped in an Ikea store, you know the benefits of finding transverse pathes instead of following the intended path.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:130
#, no-wrap
msgid "You can search modules by their names or internal aliases with the search box, which responds to the <kbd>Ctrl+F</kbd> shortcut. The search results can also be navigated in sequential order by <kbd>Page Up/Down</kbd> keys.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:132
#, no-wrap
msgid "Remember that the first tab shows the whole pipeline in its order of application.\n"
msgstr ""

#. type: Title ###
#: content/news/modules-groups-redesign/index.md:133
#, no-wrap
msgid "Replacing favourite modules"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:136
#, no-wrap
msgid "The current design has no way to define favourite modules in a special tab. I don't see the point of adding more bloat to solve the issue of having bloat initially.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:138
#, no-wrap
msgid "For those special modules, you can assign shortcuts to the \"show\" (aka open, show, display, unfold) or \"enable\" events (aka activate). Go to the Edit menu, then at the bottom click Keyboard shortcuts, then with the special cursor you got, click on your soon-to-be favorite module header (on its name). Example here with the exposure module :\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:140
#, no-wrap
msgid "{{< figure src=\"shortcuts.png\" />}}\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:142
#, no-wrap
msgid "By default, you will be prompted with the \"show\" event, in the element column (another label I should change). You can change it for the \"enable\" or \"instance\" (aka instanciate) event. The effect doesn't matter for this one, I haven't tested in which case it is used and the whole thing is a tangled mess anyway.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:144
#, no-wrap
msgid "In any case, these shortcuts will instantly bring you to your favourite modules without polluting more GUI real-estate.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:148
#, no-wrap
msgid "This doesn't solve the issue of modules beeing called something that don't interest users, and of image processing modules looking the same as non-image processing ones. I have some ideas regarding this, but that will be for another time.\n"
msgstr ""

#. type: Title ##
#: content/news/modules-groups-redesign/index.md:149
#, no-wrap
msgid "Sidenotes"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:152
#, no-wrap
msgid "Many other tools previously hidden in cryptic icon-buttons have been merged into the global menu. This menu can be unfolded by hitting <kbd>Alt</kbd> followed by the mnemonic letter of the menu (which will get underscored once hitting <kbd>Alt</kbd>). Once unfolded, the menu are navigable with arrow keys.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:154
#, no-wrap
msgid "Return to the lighttable is now mapped to the <kbd>Escape/Return</kbd> key. In lighttable, the picture text search is also mapped to <kbd>Ctrl+F</kbd> (as you would expect). Browsing pictures can be done with <kbd>Arrow</kbd> keys, selection with <kbd>Space</kbd> key, and opening a picture in darkroom can be done by hitting <kbd>Enter</kbd> key.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:156
#, no-wrap
msgid "This means the application is now almost entirely navigable with the keyboard without having to remember shortcuts. Those shurtcuts are displayed anyway in the menu, right of the entries.\n"
msgstr ""

#. type: Plain text
#: content/news/modules-groups-redesign/index.md:157
#, no-wrap
msgid "The table of all shortcuts can now be found in the Help menu, previously it was only accessible… through a shortcut.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/news/undarktable-ing-gui-controls.md:1
#, no-wrap
msgid "Un-darktable-ing GUI controls"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:11
#, no-wrap
msgid "Darktable has its own GUI widgets library, for sliders and comboboxes (aka drop-down menus or selection boxes), called Bauhaus (in the source code, it's in `src/bauhaus/bauhaus.c`). While they use Gtk as a backend, Bauhaus are custom objects. And like many things in Darktable, custom equals rotten.\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:13
#, no-wrap
msgid "In 2022, ‍I noticed [parasite redrawings and lags](https://github.com/aurelienpierreeng/ansel/issues/29), when using them, leading to a frustrating user experience : the widget redrawing seemed to wait for pipeline recomputations to complete, which meant that users were not really sure their value change was recorded, which could lead them to try again, starting another cycle of expensive recomputation, and effectively freezing their computer for several very frustrating minutes of useless intermediate pipeline recomputations.\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:15
#, no-wrap
msgid "As it happens, static code analysis tools find that the Bauhaus library is also the [4th most complex sourcecode file](https://sonarcloud.io/component_measures?metric=complexity&selected=aurelienpierre_darktable%3Asrc%2Fbauhaus%2Fbauhaus.c&view=list&id=aurelienpierre_darktable) in the whole Darktable software in terms of cyclomatic complexity, with a score of 735 and a technical debt estimated to 1 day and 7 hours. If you are no programmer, cyclomatic complexity measures the number of different paths the code can take, and high values make it not only more difficult to understand (hence to debug), but also more prone to edge-cases, bugs and contextually-dependent weird issues. [Cyclomatic complexity](https://en.wikipedia.org/wiki/Cyclomatic_complexity) is an indirect metric of the probablity that this code will blow up in your face when you least expect it, something to take into account when the most prolific \"developers\" in your team are a primary school teacher, a pediatrician and a banking consultant.\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:17
#, no-wrap
msgid "What's particularly frustrating is I already worked to simplify this file, back in 2019. 3 years later, it was as if I did nothing, thanks to [feature creep](https://en.wikipedia.org/wiki/Feature_creep) and MIDI/gamepad support. When the parasite redrawings showed up, I was left with unintelligible [spaghetti code](https://en.wikipedia.org/wiki/Spaghetti_code) that I was properly unable to fix. A first attempt to correct wrong stuff lead to a dead-end, back in August 2022, and got me discouraged. Trying to work around it was not going to cut it.\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:19
#, no-wrap
msgid "So I had to rewrite it almost completely, which was no fun and took me a crazy amount of hours (I stopped counting at 3 weeks, full-time, and that was for the second attempt in August-November 2023).\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:21
#, no-wrap
msgid "Did you know that, once a combobox had the focus (either because you clicked on it or gave it focus via a keyboard shortcut), you could start typing the first letters of the label you wanted to select and it would automatically select the closest item in the list ? Neither did I before undertaking this task, because it's documented nowhere. As were many hidden features in there, added to comply with deviant and marginal use cases, but complexifying the code structure for everybody. (Spoiler alert : I kept this particular feature, but removed others).\n"
msgstr ""

#. type: Title ##
#: content/news/undarktable-ing-gui-controls.md:22
#, no-wrap
msgid "‍List of improvements"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:30
#, no-wrap
msgid ""
"- Cursor coordinates (in popups) are computed only at once place, then stored. That saves a lot of intermediate recomputations, some of them being inconsistent because the code was copy-pasted and duplicated instead of using [getters and setters](https://en.wikipedia.org/wiki/Mutator_method). Now, coordinates offsets and changes are handled through unified getters and setters, meaning any future change will need to happen only in one place, and the whole code uses that.\n"
"- New values (from sliders and comboboxes) are not dispatched anymore to the pixel pipeline during scrolling or drag-and-dropping, but only at the end. This relies on a machine-learned timeout recording the average time needed to compute a full pipeline. The GUI will wait for 20 ms to 2.5 s to dispatch changes to pipeline, avoiding to recompute at every scrolling or dragging step, which makes for useless and redundant, yet expensive, computations that only make the software lag. Similarly, they are now dispatched only on the button-released event, instead of button-pressed and button-released events (given that a typical mouse click sends both events). It should spare quite a lot of needless pipeline recomputes.\n"
"- Widgets are redrawn immediately on user events, before the new values are dispatched to the pixel pipeline. This ensures immediate user feedback, even though the actual pixel result may come later, and limit frustration on slow computers.\n"
"- Do not dispatch value-changed events if the widgets got user interaction but their value didn't actually change.\n"
"- Capture clicks on the comboboxes chevron (right arrow). Previously, you needed to click on the label to unroll the combobox drop-down menu, which was super frustrating if you came from software with a proper GUI. The chevron itself didn't respond to clicks.\n"
"- Do not scroll comboboxes drop-downs. That feature started like a cool project : having the currently-selected item aligned with the label. Problem is the drop-down popup positionning is ultimately handled by the desktop environment, we can only ask it politely to do what we wish, but there is no guarantee our wishes will be honoured. Also, it is possible to make the popup roll outside the viewport, nothing prevents it. All in all, it's brittle and random, better stick with default window positionning.\n"
msgstr ""

#. type: Title ##
#: content/news/undarktable-ing-gui-controls.md:31
#, no-wrap
msgid "Deprecated features"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:34
#, no-wrap
msgid "The ability to assign keyboard shorcuts to sliders and comboboxes is for now removed. Sliders and comboboxes are anyway linked to arrow keys and mouse scroll __once they get the focus__[^1], and it is still possible to assign focus capturing to a keyboard shortcut. The current logic is therefore to request focus through keyboard shortcuts, then edit the value using arrow keys. Focus requests also automatically make the widget visible in GUI, scrolling the sidebar if needed.\n"
msgstr ""

#. type: Link reference
#: content/news/undarktable-ing-gui-controls.md:35
#, no-wrap
msgid "[^1]: In GUI programming, a widget has the focus when it is the one recording keyboard events. Text entries are the most obvious example, but Darktable hacked that concept to generalize to pretty much every widget."
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:38
#, no-wrap
msgid "Anyway, the current shortcuts system will have to be entirely replaced by native Gtk accelerators, which are already used for the global menu (and were used in Darktable prior to 2021). Currently, we have both systems, one of which being a monstruosity of complexity and probably responsible for slow-downs. KISS.\n"
msgstr ""

#. type: Title ##
#: content/news/undarktable-ing-gui-controls.md:39
#, no-wrap
msgid "Caveats"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:42
#, no-wrap
msgid "The \"format\" combobox in export module doesn't initialize its value properly. This is a non-standard Bauhaus widget that needs extra care. For the time being, you will need to refresh the storage option or to reload a preset.\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:44
#, no-wrap
msgid "Whenever you remove the flaky old paint that held the rusty walls, you risk doing collateral damages. Be careful with Ansel when using AppImage and Win EXE tagged Ansel-57ed58d from tonight and report anything weird.\n"
msgstr ""

#. type: Title ##
#: content/news/undarktable-ing-gui-controls.md:45
#, no-wrap
msgid "Downloads"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:49
#, no-wrap
msgid ""
"- [Ansel-57ed58d-x86_64.AppImage](https://github.com/aurelienpierreeng/ansel/releases/download/v0.0.0/Ansel-57ed58d-x86_64.AppImage)\n"
"- [Ansel-57ed58d-win64.exe](https://github.com/aurelienpierreeng/ansel/releases/download/v0.0.0/ansel-57ed58d-win64.exe)\n"
msgstr ""

#. type: Title ##
#: content/news/undarktable-ing-gui-controls.md:50
#, no-wrap
msgid "Geeky details"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:53
#, no-wrap
msgid "The current changes have reduced :\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:57
#, no-wrap
msgid ""
"- cyclomatic complexity from 735 to 494\n"
"- cognitive complexity from 796 to 432\n"
"- technical debt from 1 day and 7 hours to 4 hours and 50 min.\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:59
#, no-wrap
msgid "[More details](https://sonarcloud.io/component_measures?metric=cognitive_complexity&selected=aurelienpierreeng_ansel%3Asrc%2Fbauhaus%2Fbauhaus.c&view=list&id=aurelienpierreeng_ansel)\n"
msgstr ""

#. type: Plain text
#: content/news/undarktable-ing-gui-controls.md:60
#, no-wrap
msgid "If you are no programmer, these metric just mean that the code will be easier and less time-consuming to maintain in the future, and probably less bug-prone.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/resources/lexicon.md:1
#, no-wrap
msgid "Color lexicon"
msgstr ""

#. type: Fenced code block (mermaid)
#: content/resources/lexicon.md:9
#, no-wrap
msgid ""
"mindmap\n"
"  root((COLOR))\n"
"    color appearance model\n"
"      uniform color space\n"
"        chromaticity\n"
"          U, V\n"
"          a, b\n"
"        lightness\n"
"          L\n"
"        delta E\n"
"      chromatic adaptation transform\n"
"        illuminant\n"
"          color reproduction index\n"
"          color temperature\n"
"      surround lighting\n"
"      background lightness\n"
"    dimensions\n"
"      Munsell\n"
"        hue\n"
"        chroma\n"
"        value\n"
"      natural color system\n"
"        blackness\n"
"        saturation\n"
"        hue\n"
"      CIE\n"
"        lightness\n"
"        brightness\n"
"        saturation\n"
"        chroma\n"
"        colorfulness\n"
"        hue\n"
"    measure\n"
"      colorimetry\n"
"        tristimulus\n"
"          sensor\n"
"            Luther-Ives criterion\n"
"            metamerism\n"
"            dynamic range\n"
"            noise\n"
"            mosaicing\n"
"              Bayer\n"
"              XTrans\n"
"              zipper artifacts\n"
"          spaces\n"
"            rgb(RGB)\n"
"              HSV\n"
"              HSL\n"
"            LMS\n"
"              Yrg\n"
"            XYZ\n"
"              Yxy\n"
"                Yuv\n"
"                  Ych\n"
"            CYM\n"
"              CYMK\n"
"            primaries\n"
"              cone cells\n"
"              LED\n"
"                ITU BT.Rec 709\n"
"                ITU BT.Rec 2020\n"
"                DCI P3\n"
"              inks\n"
"      spectrometry\n"
"        light spectrum\n"
"          wavelengths\n"
"          energy\n"
"      photometry\n"
"        luminance\n"
"    correction\n"
"      profile\n"
"        matrix\n"
"        lookup table\n"
"        transfert function\n"
"      color grading\n"
"        ASC CDL\n"
"        channel mixer\n"
"        curves\n"
"      white balance\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/resources/misconceptions.md:1
#, no-wrap
msgid "Common misconceptions"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:11
#, no-wrap
msgid "This page addresses most of the mistakes and misconceptions about Ansel that can be found online.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:13 content/resources/readings.md:13
#, no-wrap
msgid "<!--more-->\n"
msgstr ""

#. type: Title ##
#: content/resources/misconceptions.md:14
#, no-wrap
msgid "I need to be an expert / engineer to use Ansel"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:17
#, no-wrap
msgid "My [videos](https://www.youtube.com/channel/UCmsSn3fujI81EKEr4NLxrcg) and my posts typically contain both the \"how to\" and the \"why/how\" part. The \"why/how\" is typically technical or even theoritical, and is there to justify the \"how to\". There are several reasons for which I give both :\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:22
#, no-wrap
msgid ""
"1. The accurate technical explanations are really difficult to find on the internet, and I'm pretty much the only one to link theory and practice on video. On the other hand, it's easy to find wrong information in photography, from people slightly above the average who try to help, but actually mislead others.\n"
"2. I personaly hate gurus that drop instructions without bothering to justify them. Rules always have a reason and need to be broken as soon as this reason stops being valid. You see a lot of people continuing to follow old rules because \"the elders knew what they were doing\" — but don't remember why they did — while circumstances have changed.\n"
"3. Understanding how tools behave allows you to predict when they will fail (because they will all fail at some point), which enables you to solve problems even before they appear, and to be ready with a plan B when it happens,\n"
"4. Most pieces of advice I give are contextual to the desired result and the type of image being worked. Removing context would make them simply wrong in general.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:24
#, no-wrap
msgid "Because of that, many people have conceived the idea that they need to understand 100 % of the technical content before being able to use the software. That is simply not true. Ultimately, Ansel is just a software with a GUI, you can push cursors or use factory presets until the picture looks good. Whatever you don't understand can be disregarded for now, and perhaps tried again later.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:26
#, no-wrap
msgid "On the other hand, if you start mixing media, like printing pictures on paper and releasing digital pictures from the same edit, or inputing your Ansel exports into another software for further manipulation, having at least a basic understanding of how an imaging pipeline works is going to help you tremendously.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:28
#, no-wrap
msgid "Like any technological object, the more you understand it and the better you control it, the least you fight it. But Ansel comes shipped with a pack of default presets and a pre-configured pipeline that should give you a proper editing base in most cases.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:30
#, no-wrap
msgid "It is true, however, that the image processing controls in the GUI tend to be more grounded into color science and optics than in other applications. The reason is processing HDR without artifacts needs more accurate color models, that take more input parameters to adapt to the dynamic range of images. The reason most applications can afford to look more simple is their color models are less performant and rely on approximations that don't really scale with dynamic range. Everything has a cost…\n"
msgstr ""

#. type: Title ##
#: content/resources/misconceptions.md:31
#, no-wrap
msgid "Ansel processes my raw pictures in a way that makes them darker and duller"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:34
#, no-wrap
msgid "The reality is actually the other way around.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:36
#, no-wrap
msgid "Raw photographs typically have a JPEG file embedded as a low-resolution thumbnail. This thumbnail is what you see in Ansel lighttable as well as on your camera back screen. You will never see a raw photograph without any kind of correction, it's simply not displayable.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:38
#, no-wrap
msgid "This thumbnail has been processed and enhanced by the camera firmware, in a way that usually brightens it a lot, adds contrast, saturation, and very often tints it for a warmer look.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:40
#, no-wrap
msgid "What you see when opening the picture in Ansel darkroom is a much less processed picture than the JPEG, closer to the raw and more neutral, meant to be a base for your personal editing.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:42
#, no-wrap
msgid "But remember that the default look when opening the darkroom is just that : a base look, a starting point. Ultimately, even the default settings can be adjusted to your liking, which is the whole point of the software.\n"
msgstr ""

#. type: Title ##
#: content/resources/misconceptions.md:43
#, no-wrap
msgid "Deprecated modules don't work anymore"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:46
#, no-wrap
msgid "Ansel is based on darktable 4.0. darktable 4.0 has deprecated many modules. Ansel has deprecated even more. Modules get deprecated when they get a better alternative introduced.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:48
#, no-wrap
msgid "But \"deprecated\" is a strong word to say \"the widget of the module is hidden from the GUI\". Both the GUI and the pixel code of the module are still in the software, and will still run for old edits using this module. For these edits, the module will show in the GUI.\n"
msgstr ""

#. type: Plain text
#: content/resources/misconceptions.md:49
#, no-wrap
msgid "For new edits, the module will only be hidden from the GUI. Deprecation is only a display clean-up to limit modules proliferation.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/resources/readings.md:1
#, no-wrap
msgid "Color theory readings"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:11
#, no-wrap
msgid "What resources can be found online and in libraries to help understand _some_ color theory ?\n"
msgstr ""

#. type: Title ##
#: content/resources/readings.md:14 content/contribute/triaging.md:9
#, no-wrap
msgid "Preamble"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:16
#, no-wrap
msgid "What is color theory ?"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:19
#, no-wrap
msgid "Color theory has 2 aspects :\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:22
#, no-wrap
msgid ""
"* a __scientific__ one, historically linked to light physics, but now related more closely to psychology, trying to link physical signals with perceptual stimuli,\n"
"* an __artistic__ one, studying color semantics (which are mostly cultural) and how they play in creating believable shadows in paintings or moody ambiance into photographs and movies.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:24
#, no-wrap
msgid "It is worth noting that the scientific side has been studied by artists too (like [Munsell](https://en.wikipedia.org/wiki/Munsell_color_system)). The field mixes notions of :\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:30
#, no-wrap
msgid ""
"* physics (light spectrum, where everything begins),\n"
"* biology and medicine (retina cells, optical nerve and brain, that is the human sensor),\n"
"* psychology (color memory and afterimages),\n"
"* art history (color harmonies),\n"
"* ethnology (cultural meaning of color).\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:32
#, no-wrap
msgid "Every author being typically an expert in only one of those fields, but still needing the others, it is often useful to know beforehand from what vantage point he will treat the subject, and at which point he might not be at home anymore.\n"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:33
#, no-wrap
msgid "Pitfalls"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:36
#, no-wrap
msgid "Most color talk focuses on tri-dimensional models of color appearance : the hue-chroma-lightness, or the hue-saturation-brightness. That is basically color split into 3 absolute properties that would ideally be completely independent from each other, because it would be mathematically practical for real-world applications.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:38
#, no-wrap
msgid "Problem is, vision is not absolute but subjected to the interference of the background and surrounding. The same color patch displayed on different backgrounds (varying color and illumination) will appear differently. But vision is also very sensitive to local contrast and patterns, and scientific evidence suggests that it is actually much more about color opponency (that is, subtractive stimuli) than about intensities (additive stimuli).[^2]\n"
msgstr ""

#. type: Link reference
#: content/resources/readings.md:39
#, no-wrap
msgid "[^2]: To convince yourself, visit [this website](https://www.echalk.co.uk/amusements/OpticalIllusions/colourPerception/colourPerception.html), showcasing optical illusions where grey patches put in a blue surround appear yellow, and vice versa."
msgstr ""

#. type: Plain text
#: content/resources/readings.md:42
#, no-wrap
msgid "When we talk about the hue-chroma-lightness model, for instance, we imply that colors are evaluated against a white background, as in the [Munsell book](https://fr.wikipedia.org/wiki/Nuancier_de_Munsell#/media/Fichier:Munsell_Books.jpg). This model becomes fairly wrong in any other context, in particular because chroma contributes to the perception of brightness ([Helmholtz-Kohlrausch effect](https://en.wikipedia.org/wiki/Helmholtz%E2%80%93Kohlrausch_effect)), which is discarded by the lightness.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:44
#, no-wrap
msgid "This is why, in the printing and media industries, color assessment is realized in standardized conditions : D50 or D65 lighting, middle-grey background and surround, 100 to 300 Cd/m² of incident light luminance. The problem is this still doesn't account for the effect of the image content itself, because the same red dress may appear quite different against a blue sky, a grey wall, or a green foliage, even when you have discarded the possible effects of the surround lighting.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:46
#, no-wrap
msgid "As the color appearance models try to discard many parameters to try to find truly independent color dimensions, we need to keep in mind that their base assumptions are rarely found in real settings, and that their real-life useability is limited. In any case, models are mathematical reductions of much more complex realities for the sake of being computable. And the 3 color dimensions are actually not fully independent.\n"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:47
#, no-wrap
msgid "How useful is color theory ?"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:50
#, no-wrap
msgid "Image retouchers, digital artists and other pixels pushers deal with images encoded as RGB signals. Those are additive signals that make sense in imaging pipeline starting with sensors gathering photons and ending with LED panels emitting photons. But none of that is directly linked to the actual mechanics of human color vision : it is actually much closer to basic light physics.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:52
#, no-wrap
msgid "For most of art history, painters have worked with pigments, which are subtractive in nature. Centuries before Newton observed light diffraction (rainbow colors) through prisms, they were able to mix pigments as to render human skin and flesh with incredible mastership, without nearly as much knowledge as we have now, and using a color mixing scheme that has nothing to do with actual vision.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:54
#, no-wrap
msgid "Color theory is thus not a requirement to make art, let alone to make good art. But…\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:56
#, no-wrap
msgid "Color theory provides names to put on phenomena we experience daily and that are for the most part deeply counter-intuitive. If you have ever met people who suffer great pain for months and years while the medical staff is unable to diagnose precisely what disease they have, you know how important it is to them to simply have a name to put on that disease, no matter if there is a cure or not.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:58
#, no-wrap
msgid "Image retouchers suffer from using color manipulation tools that simply don't behave according to color vision. You can add lights, you can add pigments, but you can't add hues because hues are entirely a product of the human cognitive system. Mixing lights and pigments of a certain original hue will not produce an easily-predictable hue at the end. Color theory provides concepts to understand those deviations and to better handle them, that is, to make sense of what you see beyond what you do when pushing GUI sliders.\n"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:59
#, no-wrap
msgid "Colorimetry or color sciences ?"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:62
#, no-wrap
msgid "Colorimetry is a special branch of color sciences, which aims at _measuring_ color, and this is short from being a contradiction in terms, because color is a perception and we can't really measure perceptions without violating the ethical rules of research on living patients.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:64
#, no-wrap
msgid "We call [colorimeter](https://en.wikipedia.org/wiki/Tristimulus_colorimeter) a sensor that satisfies the Maxwell-Luther-Ives condition, meaning its \"primaries\" allow to express any light spectrum as a linear combination. I will spare you the maths details, just remember that any random photographic sensor is not automatically a colorimeter, and therefore introduces measuring errors called [metamerism](https://en.wikipedia.org/wiki/Metamerism_(color)#Metameric_failure), which will be very annoying when trying to accurately reproduce colors. In practice, only sensors used for calibration of the graphic chain will be close to the Maxwell-Luther-Ives condition.[^1]\n"
msgstr ""

#. type: Link reference
#: content/resources/readings.md:65
#, no-wrap
msgid "[^1]: From the paper [_What is the space of spectral sensitivity functions for digital cameras_](http://www.gujinwei.org/research/camspec/camspec.pdf), by Jun Jiang, Dengyu Liu, Jinwei Gu and Sabine Süsstrunk (2013), the Canon cameras are the closest from the Maxwell-Luther-Ives condition (twice as good as the Hasselblad), but a cross-search on [DXOMark](https://www.dxomark.fr/Cameras/) indicates that this improved colorimetry is done at the expense of low-light noise. The current ISO beasts have most likely sacrificed a lot of color accuracy to win on sensitivity."
msgstr ""

#. type: Plain text
#: content/resources/readings.md:68
#, no-wrap
msgid "The final goal of colorimetry is not to study human vision, nor to understand its behaviour, but to provide optical and mathematical tools, as well as error metrics (like the delta E) allowing to profile and to correct color rendering on display and image reproduction systems, but also to perform quality control and management. Colorimetry is therefore an engineering field, with all the practical compromises it implies, not a science.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:70
#, no-wrap
msgid "The _colorimetry_ term is improperly used by all sorts of scammers to designate unrelated things, because it sounds scientific while still containing the artsy-connotated \"color\" keyword.\n"
msgstr ""

#. type: Title ##
#: content/resources/readings.md:71
#, no-wrap
msgid "References"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/resources/readings.md:73 content/workflows/scene-referred/index.md:1
#, no-wrap
msgid "Color science"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:76
#, no-wrap
msgid "_Fundamentals, concepts and terminology of colo(u)r._\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:79
#, no-wrap
msgid ""
"Color Appearance Models, 3rd Edition. Mark D. Fairchild. 2013.\n"
": Mark Fairchild is professor at the Rochester Institute of Technology (closely tied to Munsell legacy and located in the neighbourhood of the Eastman Kodak company). The  Chapters 1 to 9 list the different aspects of vision and adaptation, along with the parameters affecting it and the color terminology. The 9 central chapters detail the typical industry-ready color appearance models, with implementation details that will only interest engineers. The last 3 chapters treat matters such as color management and color reproduction that may interest any graphic artist. [Publisher website](https://www.wiley.com/en-us/Color+Appearance+Models%2C+3rd+Edition-p-9781119967033)\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:82
#, no-wrap
msgid ""
"Colour : sense and measurement. Richard Kirk. 2022.\n"
": Richard Kirk holds a PhD in physics and has worked at Filmlight UK research and development since the 1980's. Filmlight is best known for its film digitization workflow (software and hardware) and its Baselight color grading software, used by most Hollywood movie productions to fine-tune the color look. Kirk is the co-author of the color-grading \"tRGB\" space used in Ansel [color balance](/doc/modules/processing-modules/color-balance-rgb/) module and presented in the book (p. 79). The book itself is made available free of charge, as a PDF, so I will not expand on its content here : have a look for yourself. Just know that it is fairly accessible to non-technical people, well illustrated, and covers both film and digital imaging, with their relationships. [Download the PDF](https://www.filmlight.ltd.uk/support/documents/colourbook/colourbook.php).\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:85
#, no-wrap
msgid ""
"The dimensions of color. David Briggs. [Website 1](http://www.huevaluechroma.com/). [Website 2](https://sites.google.com/site/djcbriggs/life-drawings-2).\n"
": David Briggs is a member of the Colour Society of Australia and teacher at the National Art School and University of Technology in Sydney. As a drawer and painter, his publications give an useful insight on the interconnections between color theory and pigments mixing practice.\n"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:86
#, no-wrap
msgid "Color pipelines"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:89
#, no-wrap
msgid "_How digital images are handled in your computer from start to finish_\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:92
#, no-wrap
msgid ""
"The Hitchhiker's Guide to Digital colour. Troy Sobotka. [Website](https://hg2dc.com/)\n"
": I have worked with Troy for years — he has basically helped most open-source software projects to unfuck their color pipelines in the past decade (at least the ones who accepted they had a problem whether or not they saw it) — and he is the original author of Filmic for Blender. We share the same passion for calling bullshit bullshit and idiots idiots. The HG2DC website is a step-by-step walk through computer graphics with lots of pictures and video animations explaining where, why and what happens to your RGB pixels.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:95
#, no-wrap
msgid ""
"The Computer Graphics Cinematography Book. Chris Brejon. [Website](https://chrisbrejon.com/cg-cinematography/)\n"
": Chris has worked at 5 of the most prominent movie studios in the world, over the past 13 years, as a lighting and compositing artist. Although the book focuses on cinematography, the chapters on color management, composition, lighting and color theory apply directly to photography as well (though the workflow changes a bit).\n"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:96
#, no-wrap
msgid "2D painting and 3D rendering"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:99
#, no-wrap
msgid "_Constructing images from scratch_\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:102
#, no-wrap
msgid ""
"Marco Bucci's YouTube channel. [Website](https://www.youtube.com/channel/UCsDxB-CSMQ0Vu_hTag7-2UQ)\n"
": Marco Bucci is a painter and shows how he constructs his paintings, most importantly how he shades subjects to give depth to 2D paintings. This is highly interesting because photographers just capture what is there, and can afford to never bother about the \"true\", \"desired\" and \"believable\" colors of a shadow. Since painters (and 3D artists) create everything from scratch, they have to ask themselves what color it should be. Give a good binge to his channel, I promise you will never look at a drop shadow the same way. _(You may need to discard some of his color theory explanations though, they are often inaccurate)_.\n"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:103
#, no-wrap
msgid "Visual illusions"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:106
#, no-wrap
msgid "_Witnessing the gullibility of our own perceptual system is key to anticipating problems in real-world applications_\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:109
#, no-wrap
msgid ""
"The illusory staircase Gelb effect. [Website](http://www.psy.ritsumei.ac.jp/~akitaoka/illgelbe.html)\n"
": Repeating the same grey or colored patch over a gradient changes the percieved color of the patch, in addition of the typical Mach banding effect (see below).\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:112
#, no-wrap
msgid ""
"Color and Contrast. Nate Baldwin. [Website](https://colorandcontrast.com/)\n"
": Many visual effects and illusions demonstrated, involving local contrast illusions. The website focuses on user interface design and aims at demonstrating the origin of best practices, but the demonstrations are relevant for any audience.\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:115
#, no-wrap
msgid ""
"Optical Illusions. R. Beau Lotto. [Website](https://www.echalk.co.uk/amusements/OpticalIllusions/colourPerception/colourPerception.html)\n"
": Witness the impact of different surround brightness and hue on color patches that are exactly similar.\n"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:117
#, no-wrap
msgid "Color-grading"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:120
#, no-wrap
msgid "_Correcting or introducing color shifts to ensure consistent look between pictures and create some ambiance_\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:123
#, no-wrap
msgid ""
"Color Correction Handbook (vol. 1) / Color Correction Look Book (vol 2). Alexis Van Hurkman. 2013. [Google Play vol. 1](https://books.google.fr/books?id=kDcdAgAAQBAJ). [Google Play vol. 2](https://books.google.fr/books?id=Hm9VAgAAQBAJ)\n"
": These books have a special place in Darktable/Ansel history because I used them as a reference to redesign the features of the [color balance](/doc/modules/processing-modules/color-balance-rgb/) module. While they focus on color grading for movies, they are software-agnostic (showing how to get things done in different applications), and make use of color tools like RGB curves, color balance, channel mixer and 3D LUTs that are all available in Ansel. They contain valuable insight on how to (and why) create color looks in images, to put the form at the service of the content. I recommend you get digital copies of them because they have lots of illustrations that will be rendered on screen better than what printed paper allows.\n"
msgstr ""

#. type: Title ###
#: content/resources/readings.md:124
#, no-wrap
msgid "News and insights"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:127
#, no-wrap
msgid "_Staying up-to-date with color stuff, technical analyses and other myths debunking about color_\n"
msgstr ""

#. type: Plain text
#: content/resources/readings.md:129
#, no-wrap
msgid ""
"Colour science library, blog. [Website](https://www.colour-science.org/blog/)\n"
": The colour-science project provides a Python library with many color models and other numeric tools for engineers and researchers working on color and vision. I use it extensively, in particular to create color sweeps and other graphs on this website. While this will not interest end-users, the blog of the project contains well-documented and useful insights on matters like color calibration and lighting.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/resources/supported-cameras.md:1
#, no-wrap
msgid "Supported cameras and formats"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:7
#, no-wrap
msgid "This page lists all the known cameras and whether or not their raw files are decoded by Ansel, as well as all file types supported in input and output.\n"
msgstr ""

#. type: Title ##
#: content/resources/supported-cameras.md:8
#, no-wrap
msgid "Cameras"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/resources/supported-cameras.md:10
#: content/resources/white-balances/index.md:11
#: content/workflows/scene-referred/index.md:18
#: content/contribute/introduction.md:1
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:13
#, no-wrap
msgid "Some cameras may use different encoding formats (12 bits, 14 bits, sRAW, compressed or not) and image ratios (4:3, 16:9, 3:2). Because one or more of these formats is supported doesn't imply they all are. Different cameras may share the same sensor and electronics, even though their commercial name is different: those will be found in the _aliases_ columns.\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:15
#, no-wrap
msgid "Ansel uses [Rawspeed](https://darktable-org.github.io/rawspeed/) library to decode most raw files. Libraw fallbacks have been introduced because Rawspeed still does not support `.CR3` Canon files (ISOBMFF format). Libraw can also be [manually configured](../../doc/preferences-settings/processing/#libraw) to always load some files, by camera or by extension. Rawspeed support is native and complete in Ansel, whereas Libraw is not fully wired to the application.\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:17
#, no-wrap
msgid "__The Ansel project does not have any control over the list of supported cameras and file formats, by Rawspeed or by Libraw__. The Ansel application handles pixels after they are decoded by Rawspeed or Libraw, and metadata (EXIF, IPTC, XMP) after they are decoded by [Exiv2](https://exiv2.org/). Decoding problems must be reported to Rawspeed, Libraw and Exiv2 projects, depending on their nature.\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:19
#, no-wrap
msgid "Noise profiles are used by the [_denoise (profiled)_](../../doc/modules/processing-modules/denoise-profiled) module. Cameras without noise profiles will still be usable, only denoising at high ISO might be of subpar quality because it will use generic noise stats.\n"
msgstr ""

#. type: Title ###
#: content/resources/supported-cameras.md:20
#, no-wrap
msgid "Raw file formats support"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:23
#, no-wrap
msgid "Ansel accepts raw file formats among the following list: `3FR, ARI, ARW, BAY, BMQ, CAP, CINE, CR2, CR3, CRW, CS1, DC2, DCR, DNG, GPR, ERF, FFF, EXR, IA, IIQ, JPEG, JPG, K25, KC2, KDC, MDC, MEF, MOS, MRW, NEF, NRW, ORF, PEF, PFM, PNG, PXN, QTK, RAF, RAW, RDC, RW1, RW2, SR2, SRF, SRW, STI, TIF, TIFF, X3F`. This means that the application will allow [importing](../doc/getting-started/import.md) them. To be completely supported (read, decoded), either Rawspeed or Libraw, and Exiv2 will need to support them too.\n"
msgstr ""

#. type: Title ###
#: content/resources/supported-cameras.md:24
#, no-wrap
msgid "Camera support table"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:27
#, no-wrap
msgid "Support legend:\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:32
#, no-wrap
msgid ""
"- <span class='badge rounded-circle text-bg-success square-badge'>✓</span> Camera and format supported by Rawspeed. In case of problems, submit [bug reports](https://github.com/darktable-org/rawspeed/issues).\n"
"- <span class='badge rounded-circle text-bg-danger square-badge'>✗</span> Camera and format unsupported by Rawspeed and Libraw,\n"
"- <span class='badge rounded-circle text-bg-warning square-badge'>?</span> Support state unknown because raw samples are missing (see [get your camera supported](#get-your-camera-supported))\n"
"- <span class='badge rounded-circle text-bg-info square-badge'>-</span> Camera and format supported by Libraw fallback. This fallback can be higher or lower quality.\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:34
#, no-wrap
msgid "Support quality legend:\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:40
#, no-wrap
msgid ""
"- 🏆 fully-supported camera,\n"
"- 🥈 partially-supported camera, usable with minor compromises,\n"
"- 🥉 partially-supported camera, usable with compromises,\n"
"- ⁉️ partially-supported camera, practical usability impossible to estimate,\n"
"- 💩 unsupported camera.\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:42
#, no-wrap
msgid "_This table is automatically generated from parsing Rawspeed, Libraw and Ansel source code. No human verification has been made_.\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:44
#, no-wrap
msgid "{{< rawspeed >}}\n"
msgstr ""

#. type: Title ###
#: content/resources/supported-cameras.md:45
#, no-wrap
msgid "Get your camera supported"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:48
#, no-wrap
msgid "Users who are not able to perform command-line operations in a terminal will be unable to help getting their cameras supported. They should buy cameras currently supported or stick to proprietary software. There is no guaranty that a brand-new camera will one day be supported, and no indication regarding when it will be. Camera support is a entirely based on an unpaid community effort, limited by everyone's availability.\n"
msgstr ""

#. type: Title ####
#: content/resources/supported-cameras.md:49
#, no-wrap
msgid "The case of Canon CR3 / ISOBMFF files"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:52
#, no-wrap
msgid "Canon `.CR3` files belong to a new type of ISOBMFF containers. These require specific decoders, from Rawspeed, Libraw and Exiv2. This specific decoder is not available in Rawspeed, so _temporary_ and partial support for Libraw has been introduced in Darktable circa 2020. Ansel inherit it, but, as of 2025, Rawspeed still does not support `.CR3`.\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:54
#, no-wrap
msgid "But Ansel requires more than Libraw to actually handle `.CR3` : it needs Exiv2 built with ISOBMFF support too, for metadata. ISOBMFF support is optional in Exiv2 for (mostly invented) copyright & legal reasons, and some Linux distributions (Fedora) package this library with ISOBMFF disabled. Users that use Ansel pre-built packages from such distributions, or who build it using the Exiv2 library from the distribution repository, will never have complete `.CR3` support.\n"
msgstr ""

#. type: Title ####
#: content/resources/supported-cameras.md:55
#, no-wrap
msgid "Helping support"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:58
#, no-wrap
msgid "If your camera is not or partially supported:\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:61
#, no-wrap
msgid ""
"- upload test raw files to <https://raw.pixls.us>,\n"
"- open a bug report [on Rawspeed tracker](https://github.com/darktable-org/rawspeed/issues) and [on Libraw tracker](https://github.com/LibRaw/LibRaw/issues/608).\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:63
#, no-wrap
msgid "If your camera does not have noise profiles, you can [generate them yourself](https://pixls.us/articles/how-to-create-camera-noise-profiles-for-darktable/) and submit them to Ansel bug tracker.\n"
msgstr ""

#. type: Title ##
#: content/resources/supported-cameras.md:64
#, no-wrap
msgid "Non-raw codecs"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:67
#, no-wrap
msgid "Ansel supports the following file formats and extensions (while reading and writing):\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:83
#, no-wrap
msgid ""
"- JPEG: `.jpg`, `.jpeg` (mandatory),\n"
"- PNG: `.png` (mandatory):\n"
"    - 8/16 bits\n"
"    - transparent background unsupported,\n"
"- HDR: `.pfm` (Portable Float Map format) and `.hdr` (RGBE format) (mandatory),\n"
"- TIFF: `.tif`, `.tiff` (mandatory) :\n"
"    - 8/16 bits integer,\n"
"    - 16/32 bits floating point,\n"
"    - supports exporting blending masks into layers,\n"
"- OpenEXR: `.exr` (optional),\n"
"- WebP: `.wepb` (optional),\n"
"- AVIF: `.avif` (optional),\n"
"- HEIF: `.heif`, `.heic`, `.hif` (optional),\n"
"- JPEG2000: `.j2c`, `.j2k`, `.jp2`, `.jpc` (optional),\n"
"- Through GraphicsMagick/ImageMagick: `.gif`, `.bmp`, `.dcm`, `.jng`, `.miff`, `.mng`, `.pbm`, `.ppm`, `.pgm` (optional)\n"
msgstr ""

#. type: Plain text
#: content/resources/supported-cameras.md:84
#, no-wrap
msgid "Note that the optional formats are enabled only if Ansel is built with the corresponding options enabled and if the libraries providing the codecs are found on the system building it. Pre-built binaries provided by the Ansel project enable them all but third-party packagers may choose otherwise.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/resources/_index.md:1
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/resources/troubleshooting-color.md:1
#, no-wrap
msgid "Troubleshooting color issues"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:9
#, no-wrap
msgid "This will apply to upstream Darktable as to Ansel since they share most of their color pipeline. The following procedure will help you troubleshoot your color issues, whether it is inconsistent appearance between export vs. preview, or between screen vs. print, or between 2 apps.\n"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:10
#, no-wrap
msgid "Setup your desktop properly"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:13
#, no-wrap
msgid "The inherent problem of color is it exists only as a perception, and that perception is highly contextual and fluid. If I take any color patch and display it over a white, middle-grey or black background, it will not appear the same even though a colorimeter would confirm it's the exact same color. I have built a little web animation to showcase this effect, displaying sRGB gamut slices at constant hue, over user-defined background lightness : [the sRGB book of color](https://eng.aurelienpierre.com/2021/04/the-srgb-book-of-color/).\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:15
#, no-wrap
msgid "Now, if you add on top the lighting discrepancy, it will also look different lit by a powerful 120 W halogen bulb or by a weak nightstand lamp. Finally, the color temperature of the light will also come into play : of course, a \"cold white\" D50 (5000 K) bulb or a \"warm\" 3200 K bulb will shift hues in a print, but the cold white will also make colors in the blue-violet region appear more colorful (compared to the others), as the warm white bulb will make colors in the red-orange region appear more colorful.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:17
#, no-wrap
msgid "In all this, your physiological perceptual system will adapt real-time, because it's great piece of biology, but it's specifically what makes our retoucher's like miserable: the perceptual system has no standard (reference) perception. Instead, and because of that, we need to work in standard viewing conditions.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:19
#, no-wrap
msgid "The lighting in your editing room should be as constant as possible across the day. Pick a room with a window exposed to the North (in the Northern hemisphere) so the light doesn't change much over the day, and cover it with cold white opaque sheets to diffuse it (yes, that will be cotton bleached with nasty chemicals to be white, natural cotton is beige-ish).\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:21
#, no-wrap
msgid "You should never edit in the dark or in a dim room (even if that makes the screen more legible — it's a trap). For night editing, try to find high quality D65 bulbs (or, next best option : D55 – this is more available and mainstream) having a Color Rendering Index (CRI) of at least 92, ideally more than 95 (if you find more than 98, it's probably a scam – in any case, the theoritical max is 100). I don't recommend editing in full artificial lighting because natural light has a built-in 100 CRI (since it's actually the reference for all CRI). Stay away from the energy-saving fluorescent bulbs, they have terrible CRI and need a variable heating time to reach their full potential (which is not much).\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:25
#, no-wrap
msgid ""
"{{< warning >}}\n"
"Editing late at night under D55 or D65 light will deeply mess-up your sleep pattern, you should turn those lights off at very least 2h before going to bed, otherwise you won't sleep.\n"
"{{< /warning >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:27
#, no-wrap
msgid "Keep in mind that everything in your visual field will have an impact on your color perception. The wall behind your screen should be painted matte white. Some people recommend middle-grey, but \"middle-grey\" paint is not easy to find, and still… it will need a proper lighting to appear actually at 20% of the luminance of a white sheet displayed under your lighting. Since nobody cares about lighting their wall, a white paint poorly lit will be closer to middle-grey and anyway, brighter will cause fewer issues than darker.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:29
#, no-wrap
msgid "The backlighting of your screen should be set such that a 100% white frame displayed on your screen appears at the same brightness as a white sheet of paper next to your screen (that is, lit by your room lighting). You may have heard to set your screen white luminance to 90 Cd/m², but that's only to compare the screen rendering with a physical print displayed in a (standard) proofing booth, and not really for general editing. In any case, it is more important that your screen backlighting matches your actual room surround lighting than some arbitrary value, since human vision reacts only to contrast (so, basically, even the room surround with your screen, both in color temperature and in brightness, to avoid creating any artificial contrast).\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:31
#, no-wrap
msgid "Only use middle-grey GUI in all your editing software. Yes, the darker GUI look slicker, but they will tamper with your perceptions and you will get bad surprises when printing.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:33
#, no-wrap
msgid "The general idea behind all these pieces of advice is your screen should look as close as possible as a print displayed next to it : whites should have the same brightness and temperature, and then… for blacks, it's a bit more complicated.\n"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:34
#, no-wrap
msgid "Undo your manual color management"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:35
#: content/resources/troubleshooting-color.md:69
#: content/contribute/introduction.md:7
#, no-wrap
msgid "Context"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:38
#, no-wrap
msgid "The vast majority of photographers don't understand how color management work. As a result, they believe in the magic of the \"ICC profile\", they will buy a calibration device (Datacolor Spyder or Xrite), bake a custom color profile and hope think that it magically fixed all their problems. It didn't.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:40
#, no-wrap
msgid "Color profiles can be good or bad, and you need to check their quality by doing another step of characterization after the calibration/profiling.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:42
#, no-wrap
msgid "Strictly speaking, calibration is an hardware operation by which you set the backlighting, contrast and brightness settings of your monitor by using the knobs (so it doesn't apply to laptops). Then, profiling is achieved by recording the color deviation (error) of the display device by measuring how standard (previously-known) color patches render on the device, then computing the corrections that should annihilate such deviations. Finally, the characterization will compute the residual error that remains **after** the profile is applied, because unfortunately, that profile will not make color perfectly accurate. That residual error is expressed as a delta E, typically using the CIE 2000 dE formula, and the average delta E should absolutely be below 2, with a max delta E ideally below 2.3.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:46
#, no-wrap
msgid ""
"{{< warning >}}\n"
"If the profile characterization shows an average delta E higher than 2, your custom profile might actually be worse than using no profile at all. Quality control matters. Custom profile doesn't automatically imply higher quality.\n"
"{{< /warning >}}\n"
msgstr ""

#. type: Title ###
#: content/resources/troubleshooting-color.md:47
#, no-wrap
msgid "Reset everything to sRGB"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:50
#, no-wrap
msgid "In your OS/desktop environment color manager (aka **not** in Ansel), set the global color profile to generic sRGB. In Ansel, set the display color profile to sRGB too. Then, export your files as sRGB. If that fixes issues, then you have a faulty ICC profile somewhere in the pipeline. \"Faulty\" can either be a profile meant for some device and improperly used for another device (profiles are **not** portable, reusable, or else), or a bad profile (wrong profiling options when doing it, or old profile that doesn't match the screen rendering anymore).\n"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:51
#, no-wrap
msgid "Profiling the right way"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:54
#, no-wrap
msgid "**Never use LUT profiles**. Yes, they are theoretically more accurate, but they are also a lot less forgiving to user mistakes, and it would require a solid 4h course to teach you everything you need to know to use LUT-based profiles without harming yourself. Also, LUT-based profiles can generally not be inverted, so they come with technical limitations too. Just forget about them.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:56
#, no-wrap
msgid "In 99% of the use cases, for your screen, you need to use a matrix + 1D curve kind of profile. The 1D curve is essentially a tone curve that will linearize the brightness of your screen and will be applied to the 3 RGB channels the same. Even though LED and LCD screens are *mostly* linear already, they might need some local corrections near black, so the 1D curve deals with that. White point will be set to \"native\" (aka as-is), with D65 color temperature, and black point will be set to \"native\" too. If available, use the \"Bradford\" chromatic adaptation and avoid the CAM02. Use ICC v2 profiles instead of v4, the v4 brings no improvement for us here and is not as widely supported.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:58
#, no-wrap
msgid "If, and only if, the matrix + 1D curve does not yield proper results, you may try matrix + 3D curves (aka one curve per RGB channel). However, DisplayCal has a hardtime ensuring white-balance consistency across the black-to-white range in this setting, and you should check that shadows will not be significatively colder or warmer (in color temperature) than highlights. This is a last-resort attempt. If you need to go that way, I recommend you build your profile with proprietary Xrite or Spyder software, because DisplayCal has issues there.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:60
#, no-wrap
msgid "Keep in mind that the 1D curve is generally not linear, this means that it will not scale with your backlighting setting. You need to check the kind of curve it yields (Display Cal can generate a full HTML report that is very useful if you know how to read it), and if it is far from a straight \"identity\" line, which means you are in for problems. In that case, you may want to produce display color profiles at 100% and 50% backlighting intensity, and switch between those depending on your screen setting. (Yes, it is tedious).\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:62
#, no-wrap
msgid "If you absolutely need to compare physical prints next to your screen (though I have no idea why you would want to do that unless you own a photo lab), you will need to calibrate for D50 white at 90 Cd/m² and for a contrast (white luminance / black luminance) of 250:1 (that's black at 0.36 Cd/m²). Note that D50 is not the native white point of LED screen and, except for the expensive Eizo displays, distorting the white point by that much will result in a substantial loss of gamut.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:64
#, no-wrap
msgid "If you profile a printer, keep in mind that any color profile is valid **only** for a particular triplet { printer driver + paper + ink cartridges }. In any case, I personally think that printing at home is a not worth the trouble and way too expensive for an amateur, unless you print at least several times a week. Indeed, when you start your printer again after some time unused, it will clean its nozzles first, and will do so with good ink from the cardridges – not only will it not be available for the next 15 min, but half or more of your expensive ink will actually end up being used as detergent.\n"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:65
#, no-wrap
msgid "Remove local contrast modifiers"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:68
#, no-wrap
msgid "There **is** an expected discrepancy though, between full resolution exports, and lower resolutions/cropped image exports : the local contrast modifiers. Those are the modules : *local contrast*, *contrast equalizer*, *blurs*, *low-pass*, *diffuse or sharpen*, *sharpen*, *highlights reconstruction* (in *guided laplacian* mode), the *tone equalizer* if used with the internal guided filter for local contrast preservation, and the *details mask* (in parametric masks options).\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:72
#, no-wrap
msgid "All those filters rely on some amount of neighbouring pixels for their output. So, if you crop the image, you change the neighbourhood. But if you downsize it, first of all you remove sharp details (so, for example, sharpening will act on the coarser details instead of the finer), and then there might be rounding errors (say your filter does stuff by grabbing all pixels within a 3 px distance when zoomed 1:1 — zoom at 1:2, that makes it a 1.5 px distance, but there is no such thing as an half pixel, so that will be rounded to either 1 px or 2 px, and that's a 33% error).\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:74
#, no-wrap
msgid "There are tricks and mitigating solutions that try to make the output of these filters visually consistent from afar, no matter the zooming level you are using, but they work until they don't, precisely because of the integer nature of pixels that will necessarily introduce rounding errors.\n"
msgstr ""

#. type: Title ###
#: content/resources/troubleshooting-color.md:75
#, no-wrap
msgid "Export and preview at 1:1"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:78
#, no-wrap
msgid "Exporting can be done using 2 strategies : process the full-resolution image, then downsize last (if needed), or downsize first, then process the low-resolution image. The first option will be slower and may introduce aliasing artifacts (due to the fact that we interpolate non-linear RGB with high-frequencies), but neighbourhood filters will behave as expected. The second option will be faster, but neighbourhood filters can show significantly different output. Choose your poison.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:80
#, no-wrap
msgid "In darkroom, you can also preview at 1:1 but it has one more shortcoming : any guided filter (either in *tone equalizer* or in the masking *feathering*) will only see the currently displayed region (possibly cropped to fit in the screen), instead of the full image. This is of course faster to process, but may generate some discrepancies for very large filters.\n"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:81
#, no-wrap
msgid "Don't upgrade your OpenCL drivers"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:84
#, no-wrap
msgid "OpenCL drivers are notoriously bad, and it has nothing to do with any particular OS/platform or vendor (though AMD tends to be consistently shitty in the 2020's). It happens regularly that some driver update makes OpenCL entirely or subtly broken.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:86
#, no-wrap
msgid "Check **when** your drivers are updated, and don't hesitate to roll back to the previously working version if anything breaks. If you don't have time to deal with that nonsense, simply avoid any driver upgrade once you found the one that worked for you.\n"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:87
#, no-wrap
msgid "Is your image viewer color-managed ?"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:90
#, no-wrap
msgid "Ansel is properly color-managed. This part of the code has been consistently working and tested for the past 10 years, and I have checked it myself several times. Problem is, many image viewers and web browsers are not. So, in case of a disagreement between Ansel's internal color and whatever you see in another image viewer, try to assess first if that app is doing the right thing.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:92
#, no-wrap
msgid "Also, note that the default Windows 10 image viewer has \"image enhancements\" enabled by default, and you need to find that option to disable it, because it will sharpen and resaturate your picture without asking you.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:94
#, no-wrap
msgid "Similarly, pictures exported to Instagram and some other websites from Mozilla Firefox are re-encoded in a weird way (color will look less saturated), compared to exports through Chromium/Google Chrome (which will look as in Ansel).\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:96
#, no-wrap
msgid "There is a common belief that images for the web should be only exported in sRGB, and that's partly wrong. Ansel will put the color profile used to export the image in its metadata, such that any color-managed app can use it and convert the color to whatever display space is being used. So you can technically export pictures in whatever color space you choose. However, there is a common practice that consists in stripping the metadata of the pictures entirely, in websites and CMS, to save some bandwidth. If the image file doesn't provide its color space, then any color management system is supposed to assume it is sRGB (as per ICC recommendations), so if the metadata stripping was done without pre-converting the colors to sRGB, then your picture will be wrongly taken as sRGB all the time. So exporting to sRGB for web is the safe thing to do, but if the images are posted under your control and you know metadata are kept, then do as you please.\n"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:97
#, no-wrap
msgid "Softproofing may not be what you think it is"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:100
#, no-wrap
msgid "Softproofing is a process that tries to emulate on screen the final appearance of a print. It's full of challenges and not great, because the screen is emissive and the print is reflective, so that doesn't start well. But there is worse.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:102
#, no-wrap
msgid "Typical screens have a contrast ratio (white luminance / black luminance) of at least 300:1, and sometimes much more. Inkjet prints on matte paper have a contrast ratio of 50:1, and on glossy paper, maybe 100:1. That's a third to a sixth of what you see on a typical screen.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:104
#, no-wrap
msgid "To emulate the print contrast, the ICC way is to anchor whites (the screen white and the paper white) to the same luminance value (typically, 90 Cd/m²). The adjustment variable will then be black, which means that the softproofing will brighten the blacks on screen as to reproduce the same contrast ratio as the print. This gives a \"veiled\", \"washed\" and \"milky\" black that most people don't expect and call an \"artifact\", but it is absolutely what should be seen. You can read more on that in the [Printing](../workflows/printing/) workflow page.\n"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:106
#, no-wrap
msgid "Note that reduced (global) contrast (that is, the contrast ratio) will result in a reduced perceived sharpness, because we don't perceive sharpness at all, but it is the local contrast that we associate with sharpness. Changes in global contrast affect local contrast too, and therefore trick us into thinking optical the sharpness is better/worse while it didn't change, and it is, again, just an illusion.\n"
msgstr ""

#. type: Title ##
#: content/resources/troubleshooting-color.md:107
#, no-wrap
msgid "Colorimetric intents don't work"
msgstr ""

#. type: Plain text
#: content/resources/troubleshooting-color.md:109
#, no-wrap
msgid "They simply don't. Try loading any ICC profile and changing those intents, the outcome will not change one bit. I'm not sure what LittleCMS2 does with these, but consider them broken.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/resources/white-balances/index.md:1
#, no-wrap
msgid "White balance(s)"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:10
#, no-wrap
msgid "We all know what \"white\" is. We can picture a white sheet of paper. We know it is white because we learned it. But if you put your paper sheet under a summer sun, or a cloudy sky, or at home with those warm living-room bulbs, that white will change color. It might disturb you for the first few seconds, then you will just forget about it: your brain will adapt. But adapt (to) what ?\n"
msgstr ""

#. type: Title ###
#: content/resources/white-balances/index.md:13
#, no-wrap
msgid "Terms"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:16
#, no-wrap
msgid "Let's start by defining some terms and accronyms that will be used and abused here. You may skip that for now and come back later when you find the terms used in the text.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:19
#, no-wrap
msgid ""
"CIE\n"
": [Commission Internationale de l'Éclairage](https://en.wikipedia.org/wiki/International_Commission_on_Illumination) (_International commission on illumination_). International authority for standardization of technical appliances, methods and workflows regarding lighting and color reproduction.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:22
#, no-wrap
msgid ""
"ICC\n"
": [International Color Consortium](https://en.wikipedia.org/wiki/International_Color_Consortium). Professional association of imaging appliances vendors aiming at defining color reproduction workflows across the digital graphic chain, as to ensure color consistency between various output media (screen, paper, etc.). Color profiles respecting ICC specifications are usually dubbed \"ICC profiles\", which may hide the fact that non-ICC profiles exist too.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:25
#, no-wrap
msgid ""
"Color profile\n"
": Computer file describing the color conversion between an arbitrary RGB space and a reference color space (usually, [CIE XYZ 1931](https://en.wikipedia.org/wiki/CIE_1931_color_space) for the 2° observer). It is often misunderstood that a color profile is not a program or an application in itself, but only a \"cooking recipe\" to be read and applied discretionary by a color management system (CMS — _which is a computer program_), that may be implemented in various image applications (viewers, editors, file browsers)… or not.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:28
#, no-wrap
msgid ""
"WB\n"
": White balance. Generic operation aiming at rescaling light emissions such that the brightest white area, on scene, would be mapped to $RGB = (1, 1, 1)$ in any standard RGB space (sRGB, Adobe RGB, DCI P3, etc.). This relies on the property of RGB spaces to describe [additive light mixing schemes](https://en.wikipedia.org/wiki/Additive_color), and on the assumption that $RGB = (1, 1, 1)$ always encodes medium white point (paper white or LED backlighting), by design.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:33
#, no-wrap
msgid ""
"CAT\n"
": Chromatic Adaptation Transform. Numerical method allowing to convert colors to account for a white point change, in a way that preserves color perception.\n"
": CAT are used automatically before applying a color profile, if the destination color space has a different white point than the target color space. For example, Ansel (and ICC) pipeline uses D50 white point but all desktop monitors use D65 white point, so CAT is used to map D50 to D65 prior to applying an output color profile.\n"
": CAT can be used manually to perform white balance, in a more accurate way than basic RGB rescaling, under some conditions. In that case, they become a special case of WB.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:36
#, no-wrap
msgid ""
"Illuminant\n"
": Direct light source emitting the photons (aka, light) bouncing on the reflective surfaces of the scene. It is worth noting that graphic pipelines always assume one single illuminant per scene, which is not the reality faced by photographers. Sometimes, scene have more than one light source. Almost always, 3D objects will get a mix of light from the illuminant(s) and from other surfaces reflections around. Non-white surfaces bouncing light on an object can be seen as virtual illuminants that will tint typically shadows and will trigger the need for selective white balancing.\n"
msgstr ""

#. type: Title ###
#: content/resources/white-balances/index.md:37
#, no-wrap
msgid "The problem of \"white\""
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:40
#, no-wrap
msgid "Color scientists and software programmers alike, love to think of color as a 3D object (R/G/B, hue/saturation/brightness, etc.), expressed as 3 intensive and positive coordinates. While this has some merits in terms of light additivity (an LED screen is very much an RGB additive light scheme, by technological construction), it doesn't account for all the contextual corrections that happen in human perception: human vision is better described in terms of contrast, that is by difference between objects (or surfaces) and their neighbourhood.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:42
#, no-wrap
msgid "For instance, see this color checker:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:44
#, no-wrap
msgid "![](SpyderCheckr.jpg)\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:46
#, no-wrap
msgid "Now, here is the reproduction of this color checker, shot on film, where something went wrong at developing time. Stare at it for some time:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:48
#, no-wrap
msgid "![](color-checker-green.jpeg \"© Guillaume Stutin\")\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:50
#, no-wrap
msgid "You would swear that the red patch is still red, even though the whole picture is shifted to green, right ? Worse, the \"white\" patch, feels white.  Well, let's see the vectorscope of this image:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:52
#, no-wrap
msgid "![](color-checker-vectorscope.jpg)\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:54
#, no-wrap
msgid "Aside from some blueish noise, the whole image is fully contained within ~6° of hue centered in green. In any case, there is zero red pixel in here. If we see red, it is only because our brain does not really care about red as an absolute chromaticity, but rather extracts color patches, \"computes\" their differences with the neighbourhood, and then tries to make sense of these differences from a cognitive standpoint.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:56
#, no-wrap
msgid "__This is where we need to define white for an illuminant and for a surface.__ When you coat an object with a couple of layers of white paint, you make it white. This means that, if you light it with any kind of light, the white surface will reflect and bounce the light spectrum \"as-is\", without favouring any band of the spectrum. Of course, it will absorb some light, only a perfect mirror would reflect close to 100 % of incoming light, but that absorption will be uniformingly scaled over all wavelengths of the spectrum, so the bounce light will be exactly the illuminant light, only less intense. The opposite would be a colored surface: this would selectively attenuate some bands of the spectrum, through [subtractive color synthesis](https://en.wikipedia.org/wiki/Subtractive_color).\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:58
#, no-wrap
msgid "The illuminant is the primary light source blasting photons on a scene (flash, light bulb, sun, clouds, etc.), including on white surfaces. So, given that a white surface reflects everything it gets, the illuminant projects its own color on a white surface. Therefore, this is as white as our scene (and subsequent image) will ever get, meaning the color of our white surface will change if we light it with daylight or with an orange bulb.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:60
#, no-wrap
msgid "So, we tend to expect __the color of the brightest surface in a scene or in a picture__ to be the contextual \"white\" (contextually to our visual field), and our perceptual system uses it as a reference to make sense of all other colors around, by comparing them to that \"white\" reference.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:62
#, no-wrap
msgid "Now, what happens if I make the achromatic patches manually achromatic (with regard to your current display) ?\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:64
#, no-wrap
msgid "![](color-checker-green-frame.jpeg)\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:66
#, no-wrap
msgid "The red patch now feels a bit less saturated and more orange, because we compare it to actual white and not green. But the context is still so overwhelmingly green, that even having true white (with regard to your display medium) within and all around the image, we still percieve that \"less green\" color of the red patch as somewhat red.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:68
#, no-wrap
msgid "Also, the achromatic patches start feeling increasingly magenta as they get darker, again because of the overwhelmingly green surround. So, there is more to \"white\" than just being the \"brightest light emission in visual field\" either: immediate context. While normalizing images for the brightest light emission (aka _illuminant_) is supported in all color appearance models (CAM), through the chromatic adaptation transforms (CAT), accounting for local discrepancies (local contrast) is completly overlooked by color maths, since all CAM so far treat chromaticity as 3 positive coordinates. This will need manual tweaking to fill the gap to _perceptually-accurate_ color reproduction (see [below](#real-life-pictures-have-more-than-one-illuminant)).\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:70
#: content/resources/white-balances/index.md:205
#, no-wrap
msgid "What should we take from that ?\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:75
#, no-wrap
msgid ""
"1. white is highly contextual to the illuminant,\n"
"2. white is _cognitively_ related to the illuminant, through the brightest light emission/reflection in the visual field, which may be misleading when there is no actual white surface in the field,\n"
"3. __but__ white is also somewhat contextual to the visual surrounding, aka dependent upon local color contrast,\n"
"4. __but__ digital imaging pipelines pretend color is only about positive intensities, and don't deal with color differences. Meaning the white balance tooling doesn't exactly deal with what's truly happening, but deals with a rough approximation instead. Meaning complicated cases will need to be handled manually with care.\n"
msgstr ""

#. type: Title ###
#: content/resources/white-balances/index.md:76
#, no-wrap
msgid "No rights, no wrongs, really ?"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:79
#, no-wrap
msgid "Before diving further into the hows and whys of white balancing, we should address the elephant in the room:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:81
#, no-wrap
msgid "> But I like my pictures slightly warm, why should I neutralize the white balance and make whites achromatic ? It's an artistic choice, after all.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:83
#, no-wrap
msgid "No, it isn't. I mean, not in the way you think. Artistic choices are always limited by technical constraints, because art is about shaping a material medium, so the rules of physics apply at every step on said medium whether you like it or not. Now, not _knowing_ the technical constraints at play will give you a wrong sense of freedom that will turn into profound frustration when things stop going your way, that is especially when images have more than one illuminant. Bad workflows can work in nice and easy situations. Good workflows give you provisions to deal with difficult situations.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:85
#, no-wrap
msgid "The digital imaging world would largely benefit from seeing the image making process as remapping process, instead of trying to find some absolute description of images that will never have a material existence. More specifically, we can represent the remapping flowchart as follow:\n"
msgstr ""

#. type: Fenced code block (mermaid)
#: content/resources/white-balances/index.md:86
#, no-wrap
msgid ""
"---\n"
"title: How digital image editing actually works\n"
"---\n"
"%%{init: {\"flowchart\": {\"htmlLabels\": false, \"htmlEdgeLabels\": false}} }%%\n"
"flowchart TD;\n"
"Scene((\"`__Scene__\n"
"_Illuminant_: N.C.\n"
"_Dynamic Range_: N.C\n"
"_Color space_: spectral`\"))\n"
" --> Sensor[\"`__Sensor__\n"
"_White point_: N.C\n"
"_Dynamic Range_: 8-14 EV\n"
"_Color space_: sensor RGB`\"]\n"
"Sensor -- \"`WB,\n"
"input profile,\n"
"CAT`\" --> Pipeline[\"`__Editing Pipeline__\n"
"_White point_: D50 (ICC)\n"
"_Dynamic Range_: virtually infinite\n"
"_Color space_: ITU BT.Rec 2020, CIE Lab 1976`\"]\n"
"Pipeline --\"`tone mapping,\n"
"gamut mapping,\n"
"output profile`\" --> Screen[\"`__Retoucher's Screen__\n"
"aka __Monitoring view__\n"
"_White point_: D65\n"
"_Dynamic Range_: 10-12 EV\n"
"_Color space_: sRGB, DCI P3, Adobe RGB`\"]\n"
"Pipeline -- \"`tone mapping,\n"
"gamut mapping,\n"
"output profile`\" --> ScreenC[\"`__Customer's Screen__\n"
"_White point_: D65\n"
"_Dynamic Range_: 10-12 EV\n"
"_Color space_: sRGB, DCI P3`\"]\n"
"Pipeline -- \"`tone mapping,\n"
"gamut mapping,\n"
"output profile`\" --> Paper[\"`__Paper print__\n"
"_White point_: D50-D55\n"
"_Dynamic Range_: 5-6 EV\n"
"_Color space_: N.C.`\"]\n"
"Pipeline --\"`tone mapping,\n"
"gamut mapping,\n"
"output profile`\" --> T[\"`T-Shirts\n"
"Coffee mugs\n"
"Stickers\n"
"...`\"]\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:134
#, no-wrap
msgid "But, most people still (and wrongly) think it is:\n"
msgstr ""

#. type: Fenced code block (mermaid)
#: content/resources/white-balances/index.md:135
#, no-wrap
msgid ""
"---\n"
"title: How mislead people think digital image editing works\n"
"---\n"
"%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\n"
"flowchart TD;\n"
"Scene((\"`__Scene__\n"
"_Illuminant_: N.C.\n"
"_Dynamic Range_: N.C\n"
"_Color space_: spectral`\"))\n"
" --> Sensor[\"`__Sensor__\n"
"_White point_: N.C\n"
"_Dynamic Range_: 8-14 EV\n"
"_Color space_: sensor RGB`\"]\n"
"Sensor --\"`WB,\n"
"input profile,\n"
"CAT`\" --> Pipeline[\"`__Editing Pipeline__\n"
"_White point_: D50 (ICC)\n"
"_Dynamic Range_: virtually infinite\n"
"_Color space_: ITU BT.Rec 2020, CIE Lab 1976`\"]\n"
"Pipeline --\"`tone mapping,\n"
"gamut mapping,\n"
"output profile`\" --> Screen[\"`__Retoucher's Screen__\n"
"aka __Visible Truth__\n"
"_White point_: D65\n"
"_Dynamic Range_: 10-12 EV\n"
"_Color space_: sRGB, DCI P3, Adobe RGB`\"]\n"
"Screen -- direct --> ScreenC[\"`__Customer's Screen__\n"
"_White point_: D65\n"
"_Dynamic Range_: 10-12 EV\n"
"_Color space_: sRGB, DCI P3`\"]\n"
"Screen -- magic --> Paper[\"`__Paper print__\n"
"_White point_: D50-D55\n"
"_Dynamic Range_: 5-6 EV\n"
"_Color space_: N.C.`\"]\n"
"Screen -- magic --> T[\"`T-Shirts\n"
"Coffee mugs\n"
"Stickers\n"
"...`\"]\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:177
#, no-wrap
msgid "And that last flowchart is completely wrong because the retoucher's screen is not a more important medium than any other: it's no reference, no standard, it bears no truth. Output media exist in parallel, not in sequence, and the conversion between pipeline and output media are completely fluid because each have their own optical properties.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:179
#, no-wrap
msgid "In any case, each arrow in both flowcharts represent a remapping step, while each non-rounded rectangle represents a medium, trying to reproduce the scene. A remapping is a general conversion, that can be fully or partially automated but usually requires some user to drive trade-offs, which will aim at adapting the image content for some display medium or intermediate working step. In particular, we need to remap the dynamic range (or contrast ratio), the color space gamut, and the white point, because we want to retain a consistent look throughout media that have vastly varying display abilities and properties.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:181
#, no-wrap
msgid "For any display medium (paper, screen, diapositives, coffee mug, …), maximum luminance is reached only for a very special achromatic color: white. Think of paper… White is a built-in property of the paper (a mix of core fibers and surface coating optics), in terms of tint. As far as your inkjet printer is concerned, \"white\" means \"don't spray ink there\". Say you want your picture to look slightly warmer and you settle for amber white… You will need to coat all visible paper surface with at least _some_ yellow and red inks. Doing so will result in darkening the peak luminance, that is your \"amber white\" will be darker than native medium white, because of the subtractive light scheme of dyes and pigments, so you will reduce the already limited dynamic range paper can offer (5 EV for typical inkjets prints). But how do you instruct your printer to do so ? Input RGB will be clipped at 1 or 100% (or 255 if encoded as 8 bits unsigned integers), and $RGB = ( 1, 1, 1 )$ means medium white by definition of the color space (aka by design). If you try to reach \"amber white\" by pushing white to $RGB = ( 1.2, 1.2, 1 )$, RGB will get clipped at 1 anyway, so you might get amber gradients that break to medium white at some point. Or, if you know what you are doing, you will push white to $RGB = ( 1, 1, 0.83 )$, and therefore… reduce its luminance. This is how dynamic range connects, in an usually overlooked way, to the medium white point because the peak luminance is __always__ achromatic with regard to a medium.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:188
#, no-wrap
msgid ""
"{{< compare after=\"WB-warm-4341K.jpg\" before=\"WB-neutral-3832K.jpg\" >}}\n"
"__Before__: white balance normalized for nearly-achromatic whites (illuminant: daylight 3832 K).\\\n"
"__After__: white balance kept warm for \"artistic reasons\" (illuminant: daylight 4341 K).\\\n"
"The white point is kept the same between both pictures. Note how the gradient inside the Sun disc is harshly breaking to pure white at some point, near the center, on the warm interpretation, because of RGB clipping. I will propose 2 possible corrections for this below.\\\n"
"Photo licensed under Creative Commons by Andreas Schneider.\n"
"{{</ compare >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:196
#, no-wrap
msgid ""
"{{< compare after=\"WB-warm-4341K-minus-half-ev.jpg\" before=\"WB-warm-4341K-minus-half-saturation.jpg\">}}\n"
"Attempted fixes for the Sun disc gradient break in the warm interpretation above.\\\n"
"__Before__: reducing the highlights saturation by 50 %\\\n"
"__After__: reducing the white point luminance by 0.5 EV\\\n"
"Note that the desaturation strategy partially falls back to neutralizing whites to achromatic, but without adapting color in shadows and midtones in a perceptual way.\\\n"
"Photo licensed under Creative Commons by Andreas Schneider.\n"
"{{</ compare >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:203
#, no-wrap
msgid ""
"{{< compare after=\"WB-warm-4341K-framed.jpg\" before=\"WB-neutral-3832K-framed.jpg\">}}\n"
"Here we try to see how the image content blends within a generous white frame using the medium white point. This simulates a paper print with white borders.\\\n"
"__Before__: white balance normalized for nearly-achromatic whites (illuminant: daylight 3832 K)  with darkened white point.\\\n"
"__After__: white balance kept warm for \"artistic reasons\" (illuminant: daylight 4341 K) with darkened white point.\\\n"
"The warm interpretation has the image illuminant (Sun disc) severely clashing with the medium white, looking like an aged picture. The conflicting whites references between \"paper\" and image content makes it look like a clumsy amateur shot.\n"
"{{</ compare >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:211
#, no-wrap
msgid ""
"1. you have no control over the medium white point, whether it is a screen backlighting or the paper tone: it is technically defined and you need to adapt to it.\n"
"2. when printing with white borders, __you need to mind the clash of white points between image content and paper borders__. This applies too for digital images that will be displayed over white backgrounds on the web,\n"
"3. you don't have a lot of latitude to de-neutralize your image white balance for artistic purposes before it starts visually clashing with paper white,\n"
"4. you will have to darken the image white point, therefore reducing the printable dynamic range, if you want to make it non-neutral (non-achromatic). Failing to do that will create clipping artifacts in smooth gradients,\n"
"5. __peak luminance is expected to be achromatic__ for all typical media: this is what ties dynamic range (or, at least, its upper bound) to a medium white point (white balance).\n"
msgstr ""

#. type: Title ##
#: content/resources/white-balances/index.md:212
#, no-wrap
msgid "How to white balance ?"
msgstr ""

#. type: Title ###
#: content/resources/white-balances/index.md:214
#, no-wrap
msgid "The maths of white balance"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:217
#, no-wrap
msgid "Applying a white balance is surprinsingly simple when you look at the equations: one per-channel division, one per-channel multiplication. But it's so deeply buried under misunderstood concepts and obfuscated GUI (more on this [below](http://localhost:1313/en/resources/white-balances/#gui-obfuscating-white-with-temperature)), that people got completely side-tracked by the technical distractions. So it is a great example of how 3 equations can undo the havoc that software and GUI have wrecked in user's minds over the past decades, by trying to be \"intuitive\".\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:220
#, no-wrap
msgid "Let's say you are in some RGB space, for example camera sensor RGB. You need to find the chromatic coordinates of your scene illuminant in this RGB space. Let's call them $R_w, G_w, B_w$. Conveniently, if you know nothing about the scene illuminant, simply getting the arithmetic mean of $R, G, B$ values of all pixels in the picture will get you fairly close. [^1] In other words, you need to know the color of the illuminant, and convert its chromaticity as RGB coordinates in your working RGB space.\n"
msgstr ""

#. type: Link reference
#: content/resources/white-balances/index.md:221
#, no-wrap
msgid "[^1]: This is called the \"grey world assumption\". It is actually how cameras detect white balance, though nowadays they might choose to do so in some well-chosen areas of interest instead of doing it blindly on the whole image."
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:224
#, no-wrap
msgid "Then, you need to do the same for the expected (reference) white point of your RGB space. Let's call those coordinates $R_{wr}, G_{wr}, B_{wr}$.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:226
#, no-wrap
msgid "Finally, white-balancing the picture is as simple as normalizing each pixel RGB with the scene illuminant RGB and rescaling (denormalizing) it with the target illuminant (or white point) RGB:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:234
#, no-wrap
msgid ""
"$$\n"
"\\begin{cases}\n"
"R_{out} &= R_{in} * \\dfrac{R_{wr}}{R_w}\\\\\\\\\n"
"G_{out} &= G_{in} * \\dfrac{G_{wr}}{G_w}\\\\\\\\\n"
"B_{out} &= B_{in} * \\dfrac{B_{wr}}{B_w}\\\\\\\\\n"
"\\end{cases}\n"
"$$\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:236
#, no-wrap
msgid "See, no need for kelvin temperatures ! Those are only to confuse you in GUI. It's just rescaling pixel RGB with carefully-chosen factors.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:238
#, no-wrap
msgid "If we apply these operations on sensor RGB, we have [input color profiles](../../doc/modules/processing-modules/input-color-profile/) that expect a D65 illuminant to be encoded with certain RGB values: $R_{wr}G_{wr}B_{rw} = (1, 1, 1)$, by design. The $R_{w}G_{w}B_{r}$ values are then derived from the input color profile. This makes the computation even simpler:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:246
#, no-wrap
msgid ""
"$$\n"
"\\begin{cases}\n"
"R_{out} &= \\dfrac{R_{in}}{R_w}\\\\\\\\\n"
"G_{out} &= \\dfrac{G_{in}}{G_w}\\\\\\\\\n"
"B_{out} &= \\dfrac{B_{in}}{B_w}\\\\\\\\\n"
"\\end{cases}\n"
"$$\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:248
#, no-wrap
msgid "That's what we do in Ansel's old [white balance](../../doc/modules/processing-modules/white-balance/) module.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:250
#, no-wrap
msgid "Now, the camera sensor RGB is vastly different from our cone cells RGB. In practice, attempting to white-balance in sensor RGB gives poor results, especially for illuminants for from D65, and special \"RGB\" spaces have been developed to improve the perceptual consistency of the operation over the whole color range. The Bradford, CAT02, CAT16 etc. chromatic adaptation transforms (CAT) apply the same operations but in special spaces. You can [learn more about them](https://acorn.stanford.edu/psych221/projects/2010/JasonSu/adaptation.html), their differences and specifics are beyond the scope of this article.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:252
#, no-wrap
msgid "White-balancing through CAT happens in Ansel's [color calibration](../../doc/modules/processing-modules/color-calibration/) module.\n"
msgstr ""

#. type: Title ###
#: content/resources/white-balances/index.md:254
#, no-wrap
msgid "White balance in Ansel"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:257
#, no-wrap
msgid "If we do a partial pipeline flowchart of the default Ansel's editing pipeline order, we get the following modules:\n"
msgstr ""

#. type: Fenced code block (mermaid)
#: content/resources/white-balances/index.md:258
#, no-wrap
msgid ""
"flowchart TD;\n"
"  raw(RAW) --> wb[white balance]\n"
"  wb --> demosaicing\n"
"  demosaicing --> ip[input color profile]\n"
"  ip --> cc[color calibration]\n"
"  cc --> filmic\n"
"  filmic --> op[output color profile]\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:269
#, no-wrap
msgid "For Fuji XTrans sensors, the Markesteijn demosacing algorithm relies on a luma/chroma separation, which requires at least a rough white balancing step to happen earlier. This is the old [white balance](../../doc/modules/processing-modules/white-balance/) module. But we know the result is not accurate, especially for illuminants far away from D65 (especially for low-quality artifical lighting).\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:271
#, no-wrap
msgid "The quality of the input color profile also relies on having RGB already normalized to D65. But we already know this can't be accurate either. Some Adobe products now use dual-illuminant DNG profiles, which have one input profile for D65 illuminant and one for illuminant A (incandescent bulb), and the final profile used is computed as a mix of both depending of the color temperature of the scene illuminant. Those fix the issue for daylight-ish illuminants, but still don't address the issue of colored stage lights and other energy-saving light bulbs with terrible color-rendering index (CRI).\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:273
#, no-wrap
msgid "Another, more accurate, step of white balancing was later added in [color calibration](../../doc/modules/processing-modules/color-calibration/), using chromatic adaptation transforms (CAT16, Bradford). It can be configured automatically by extracting a profile from a color checker chart. Empirical studies have shown that the lowest color deviation, after profiling from a color checker, was achieved with color calibration after a preliminary step of white balance, in the old module, so we have retained both:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:278
#, no-wrap
msgid ""
"1. the _white balance_ module will normalize sensor RGB such that D65 white that would have been captured on scene would record at $RGB = (1, 1, 1 )$. If the actual scene illuminant is anything else, it will be dealt with later.\n"
"2. _input color profile_ module will convert sensor RGB to CIE XYZ 1931 color space, which acts as a glue for all later color spaces, assuming D65 illuminant (which is wrong in general),\n"
"3. _color calibration_ will convert CIE XYZ 1931 to CAT16 or Bradford \"RGB\" and will normalize any arbitrary scene illuminant (that is, if it's not D65) to the pipeline white point (D50, as per ICC workflow). [^5]\n"
"4. _color calibration_ can optionally apply a refinement step of the input color profile, using a channel mixer (aka a matrix color profile) whose parameters can be directly computed from a color checker in the module.\n"
msgstr ""

#. type: Link reference
#: content/resources/white-balances/index.md:279
#, no-wrap
msgid "[^5]: It is worth noting than we can't directly convert sensor RGB to CAT16 or Bradford without going through CIE XYZ 1931, so we need the input color profiles to be applied first. But we know the input color profile, and therefore the conversion from sensor RGB to CIE XYZ 1931, will be wrong in general because it relies on having whatever scene \"white\" balanced to $(1, 1, 1)$ already. In an ideal world, we would have one input profile for each scene illuminant, but that's technically impossible. So this is why the channel mixing in _color calibration_ comes as a nice refinement step."
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:282
#, no-wrap
msgid "This dual step of white balancing is somewhat confusing for users, but has proven to yield the most accurate colors. The _color calibration_ has a diagnostic mode allowing to compute the color deviation after profiling, as a [delta E](https://en.wikipedia.org/wiki/Color_difference), from a color checker chart, you can check for yourself.\n"
msgstr ""

#. type: Title ##
#: content/resources/white-balances/index.md:283
#, no-wrap
msgid "GUI: obfuscating white with temperature"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:286
#, no-wrap
msgid "In _any_ software around, you will see a white balance setting using a temperature slider (actually, [correlated color temperature](https://en.wikipedia.org/wiki/Correlated_color_temperature)), and then tint. But you saw in the actual equation that white balance internally doesn't deal with anything else than the RGB coordinates of the illuminant, albeit projected in the special RGB space in which we perform the scaling. So, why bother with that confusing kelvin (K) temperature ? Well, there is no reason anymore except legacy.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:288
#, no-wrap
msgid "Physicists have a special radiator, called a [black body](https://en.wikipedia.org/wiki/Black-body_radiation). It's an idealized object which, once heated at a certain temperature, will emit a known light spectrum. More interestingly, the shape of light spectrum can be _entirely predicted_ by the temperature of the black body. Remember how [RGB is a 3D reduction of a light spectrum](../../workflows/scene-referred/index.md) ? Here, it's a 1D reduction, even better ! Meaning one single number suffices to describe unambiguously a full spectrum.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:293
#, no-wrap
msgid ""
"{{< figure src=\"Black_body.svg.png\" >}}\n"
"Light spectra (blue, red, green curves) for black body temperatures between 3000 and 5000 K.\n"
"By <a href=\"//commons.wikimedia.org/wiki/User:Darth_Kule\" title=\"User:Darth Kule\">Darth Kule</a> - <span class=\"int-own-work\" lang=\"en\">Own work</span>, Public Domain, <a href=\"https://commons.wikimedia.org/w/index.php?curid=10555337\">Link</a>\n"
"{{< /figure >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:295
#, no-wrap
msgid "The cool property here is, until the 1990's, (home) light bulbs were all incandescent tungsten filament, which are a black body at 2855 K, standardized as _Illuminant A_ by the CIE. Then, daylight falls very close to black bodies spectra between 3000 K (sunset) and 8000 K (cloudy day). So we could reduce illuminant color to a single temperature value, which makes for a simpler GUI, although good luck explaining to the layman why color got suddently reduced to a temperature… Very few photographers understand what's going on there, so much for an \"intuitive\" GUI…\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:300
#: content/resources/white-balances/index.md:325
#, no-wrap
msgid ""
"{{< figure src=\"Color_temperature_black_body_800-12200K.svg.png\">}}\n"
"Illuminant color associated with black body temperature (adapted for D65 medium white).\n"
"By <a href=\"//commons.wikimedia.org/wiki/User:Bhutajata\" title=\"User:Bhutajata\">Bhutajata</a> - <span class=\"int-own-work\" lang=\"en\">Own work</span>, <a href=\"https://creativecommons.org/licenses/by-sa/4.0\" title=\"Creative Commons Attribution-Share Alike 4.0\">CC BY-SA 4.0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=44144928\">Link</a>\n"
"{{< /figure >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:302
#, no-wrap
msgid "Problems happened, first with tinted lights (stage lights & gels), second with cheap high-power bulbs (sodium vapour, halogens), then with more recent light bulbs (fluorescent, LED), which light spectrum has peaks and valleys, far from the expected smoothness of a black body spectrum. Those can't be accurately described as a single temperature value.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:307
#, no-wrap
msgid ""
"{{< figure src=\"FL3.15.png\" >}}\n"
"Light spectrum of a D65 fluorescent simulator, standardized as CIE illuminant F3.15. The sharp peaks are not expected in a black body 6500 K spectrum.\n"
"By <a href=\"//commons.wikimedia.org/wiki/User:Ellande\" title=\"User:Ellande\">Ellande</a> — <span class=\"int-own-work\" lang=\"fr\">Personal work</span>, <a href=\"http://creativecommons.org/publicdomain/zero/1.0/deed.en\" title=\"Creative Commons Zero, Public Domain Dedication\">CC0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=147285708\">Link</a>\n"
"{{< /figure >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:309
#, no-wrap
msgid "To account for deviations from pure black body spectrum, another \"tint\" setting was added, making the description of our illuminant 2D instead of 1D. While the temperature roams the Planckian locus in a curved way, the tint allows to move away from it orthogonally.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:314
#, no-wrap
msgid ""
"{{< figure src=\"Planckian-locus.png\">}}\n"
"The Planckian locus (bold curve) covers the chromaticities linked to a black body spectrum, here represented in <a href=\"https://en.wikipedia.org/wiki/CIE_1960_color_space\">CIE 1960 UCS</a>. Daylight spectra lie very close but not exactly within the Planckian locus. For any arbitrary color, we can compute the closest correlated color temperature (CCT), using the closest point of the Planckian locus. For $\\Delta_{uv} > 0.05$, that is if the color lies too far away from the bold curve, this CCT is meaningless and the CIE discourages to use it. Software developers answered \"hold my beer\" and added a 2nd coordinate, the tint, orthogonal (in theory) to the Planckian locus (straight lines). In practice, tint is not even that clean, it's usually a green-magenta axis.\n"
"By <a href=\"//commons.wikimedia.org/wiki/User:Adoniscik\" title=\"User:Adoniscik\">Adoniscik</a> - <span class=\"int-own-work\" lang=\"en\">Own work</span>, Public Domain, <a href=\"https://commons.wikimedia.org/w/index.php?curid=3803195\">Link</a>\n"
"{{< /figure >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:316
#, no-wrap
msgid "This could be fine, but it really isn't. Indeed, once we have the RGB coordinates of the illuminant (for example, as the camera detects it internally), finding the correlated color temperature (CCT) is done through various [approximations](https://en.wikipedia.org/wiki/Correlated_color_temperature#Approximation) (each software may use its own). The other way around, knowing the correlated color temperature, we can fetch the RGB coordinates of the illuminant through other [approximations](https://en.wikipedia.org/wiki/Planckian_locus#Approximation). Meaning that the roundtrip RGB → temperature → RGB (or, similarly, temperature → RGB → temperature) will not yield the original value. So in the event of the scene illuminant being anything but a pure black body spectrum, we stack a gross approximation of the arbitrary illuminant by a meaningless (and wrong) temperature on top of the approximation of the RGB coordinates from the temperature, all that only as an intermediate step designed to show a 1D slider in GUI (on 2D if you include tint for difficult cases), whereas all the pixel code cares about is the RGB coordinates of the illuminant anyway, which can perfectly be computed directly in RGB without going through temperature.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:318
#, no-wrap
msgid "For this reason, Ansel has different illuminant settings in [color calibration CAT](../../doc/modules/processing-modules/color-calibration/). If we find that the camera detected something close enough to daylight or blackbody, we automatically offer the temperature setting. Else, we default to \"custom\", which provides users with a 2D hue/chroma setting in [CIE Luv 1976](https://en.wikipedia.org/wiki/CIELUV) that will directly allow to define illuminant color without intermediate computation. From hue/chroma to RGB, the illuminant computation uses no approximation, so the roundtrip RGB → hue/chroma → RGB accurately yields the original values.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:320
#, no-wrap
msgid "But the mess created by temperatures doesn't stop here. The black body model links temperatures to colors like this:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:327
#, no-wrap
msgid "Yet, all white balance temperature sliders show this:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:329
#, no-wrap
msgid "![](temperature-wrong.jpg)\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:331
#, no-wrap
msgid "Yes, it's reverted. Why ? Because it doesn't show the color of the illuminant, but instead an attempt to show the effect (a color shift) on the image. But… The effect of a white balance setting is to turn a non-white color to white (with regard to the white point of our current working space). So the effect should be white all along… What this colored slider _actually shows_ is how a D65 white captured on the scene would look like after applying our white balance. But why should we care about the look of a virtual D65 white from the scene that don't even exist, if our scene illuminant is not D65 (otherwise we wouldn't need white balance at all) ? It doesn't make sense.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:333
#, no-wrap
msgid "In _color calibration_ module, temperatures are shown accordingly to the color they represent, which matches the color patch of the illuminant that can be found by sampling achromatic surfaces in the picture, using the color picker:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:337
#, no-wrap
msgid ""
"{{< compare before=\"temperature-right-uncorrected.jpg\" after=\"temperature-right-corrected.jpg\" >}}\n"
"Disabling the _color calibration_ will show the picture shifting to the color shown in the patch.\n"
"{{< /compare >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:339
#, no-wrap
msgid "Honoring our remapping way of thinking, this clearly shows what original color from the picture will be remapped to D50 white through the transform, instead of attempting to represent a color _shift_ with an absolute color. Problem is many users now think something is broken in this approach, being impregnated with the nonsensical one.\n"
msgstr ""

#. type: Title ##
#: content/resources/white-balances/index.md:340
#, no-wrap
msgid "Real life: pictures have more than one illuminant"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:343
#, no-wrap
msgid "It's a bit late to address another elephant in the room: the core assumption of all chromatic adaptation, __our color pipeline expects one and only one illuminant__. This makes sense, when you print on paper or display on screen: white is defined by the paper tone or by the LED backlighting. But, on the scene, unless you shoot in studio with only black/white walls, floors and ceilings, you have several \"illuminants\".\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:345
#, no-wrap
msgid "Let's explain that with an example. The picture below was shot mid-October, while the tree leaves were turning orange. We have an overhead of foliage, trees left and right, and grass on the ground:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:350
#, no-wrap
msgid ""
"- The green grass on the ground acted as a green reflector, bouncing light mostly under the chin: that's one virtual illuminant.\n"
"- The yellowish leaves overhead acted as a yellow reflector, bouncing light mostly on the cheeks and décolleté: that's another virtual illuminant.\n"
"- Then the direct sunlight pierced through the leaves, on the bright skin spots, which is the real illuminant (aka source of all photons on the scene).\n"
"- Meanwhile, all the green background was likely confusing in-camera automatic white balance detection, and we can't sample any achromatic object for reference once in our photo editor.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:356
#, no-wrap
msgid ""
"{{< compare after=\"Cécile-DSC_0316-0315.jpg\" before=\"Cécile-DSC_0316-0315-off.jpg\" >}}\n"
"__Before__: no color correction, defaulting to WB detected in-camera\\\n"
"__After__: color calibration from color checker, color balance done manually (details below)\\\n"
"© Aurélien Pierre\n"
"{{< /compare >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:358
#, no-wrap
msgid "So this is overall one of the most difficult setups: each feature and surface of the (3D) face is getting its light primarily from a different (real or virtual) illuminant, depending on the orientation of the surface in space, and we can't rely in general on WB auto-detection because the whole frame is biaised by foliage, although here it does a fair-enough job. Many photographers still think it is impossible to recover skin tones in this scenario, the above image proves them wrong, though it requires some virtuosity.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:360
#, no-wrap
msgid "The trick here is first and foremost to shoot a color checker frame, to correct the green deviation as much as possible, using the _color calibration_ module. The color checker will be held in front of the subject, pointing towards the camera in such a way that it gets an average mix of all available illuminants (and hopefully no glare). So the _color calibration_ will be used to \"mostly get there\", trying to account for an average mix of all lights sources. The color checker will save us much manual, frustrating and time-consuming fiddling with parameters.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:367
#, no-wrap
msgid ""
"{{< compare after=\"Cécile-DSC_0005-0004-colorchecker-on.jpg\" before=\"Cécile-DSC_0005-0004-colorchecker-off.jpg\" >}}\n"
"Applying the _color calibration_ settings (CAT and channel mixer) computed from the color checker values.\\\n"
"__Before__: Illuminant detected in-camera: hue 53°, chroma 17.1 % (yellow) - delta E: average 3.47, max 7.94\\\n"
"__After__: Illuminant computed from color checker: hue 67.5°, chroma 13.0 % (green) - delta E: average 2.54, max 5.36\\\n"
"© Aurélien Pierre\n"
"{{< /compare >}}\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:369
#, no-wrap
msgid "If we had artificial objects, with sharp contours, we could then multi-instanciate _color calibration_ and mask in/out the areas we want to selectively white-balance. But here, with an human face, we have rounded surfaces seamlessly blending into each other, and that is not possible.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:371
#, no-wrap
msgid "It is useful to recall, here, that the _color balance_ shadows lift and highlight gain are also mere RGB multiplications, exactly like our white balance. While it is mathematically the same thing, they happen in a special RGB space designed for perceptual uniformity of hues (as to improve color grading), instead of happening in a CAT space, designed specifically for white point adaptation. Nonetheless, lift and gain can be seen as local chromatic adaptation for shadows and highlights, and can be used for this purpose.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:373
#, no-wrap
msgid "So the way to fix this picture is as follow:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:378
#, no-wrap
msgid ""
"1. shadows are expected to have an higher ratio of green bounce light, so turn the _shadows lift_ setting to magenta (always compensate with shifting to opponent color),\n"
"2. highlights are expected to have an higher ratio of yellow light (from autumn foliage), so turn the _highlights gain_ setting to blue,\n"
"3. the final skin tone can be adjusted using the midtones power, in _color calibration_, to soften the magenta-red shift that will most likely result from the next 2 steps. This will happen by re-introducing some yellow.\n"
"4. the direct sunlight spots on the skin can be lazily desaturated to blend, since they are so much brighter than anything else, using _filmic_ saturation (_look_ tab) and/or _color balance_ highlights saturation (_master_ tab).\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:380
#, no-wrap
msgid "In any case, fixing this kind of picture starts on the scene, by untangling how the different illuminants play out on the surfaces of your subject. It will be much easier to unroll a post-processing method once you have all the mental notes of what was going on.\n"
msgstr ""

#. type: Title ##
#: content/resources/white-balances/index.md:381
#, no-wrap
msgid "Back to artistic choices"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:384
#, no-wrap
msgid "So, you want your golden-hour amber haze ? Ok, but twisting white balance is probably not the right way to do so, because it affects all colors over the whole dynamic range.\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:386
#, no-wrap
msgid "There is an easier, better and more suited way, using a neutral white balance, and then tinting the picture using _color balance_ power:\n"
msgstr ""

#. type: Plain text
#: content/resources/white-balances/index.md:391
#, no-wrap
msgid ""
"{{< compare after=\"WB-neutral-3832K-toned-framed.jpg\" before=\"WB-warm-4341K-framed.jpg\">}}\n"
"__Before__: white balance kept warm for \"artistic reasons\" (illuminant: daylight 4341 K).\\\n"
"__After__: white balance normalized for nearly-achromatic whites (illuminant: daylight 3832 K), then amber-red color grading using color balance power.\\\n"
"This allows us to get a deeper color shift and more of that amber haze in midtones, without tampering with peak emission nor with water blue. The look is overall more natural.\n"
"{{</ compare >}}\n"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/workflows/film-scan/index.md:1
#: content/workflows/monochrome-toning/index.md:1
#, no-wrap
msgid "film"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/workflows/film-scan/index.md:1
#, no-wrap
msgid "negative"
msgstr ""

#. type: Yaml Front Matter Hash Value: thumbnail
#: content/workflows/film-scan/index.md:1
#, no-wrap
msgid "film-scan.jpg"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/workflows/film-scan/index.md:1
#, no-wrap
msgid "Film scanning"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:15
#, no-wrap
msgid "Alain Oguse learned photographic printing with [Claudine](https://www.musee-orsay.fr/fr/ressources/repertoire-artistes-personnalites/claudine-sudre-211535) and [Jean-Pierre Sudre](https://en.wikipedia.org/wiki/Jean-Pierre_Sudre) in the late 1960's, and spent his early career in commercial photography. After retiring, he started to investigate how to bring back the photographic (silver halide) grain in digital scans of film negatives, finding the same sharpness and quality he had with near-point light enlargers in the 1970's.\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:17
#, no-wrap
msgid "The point light printing technique uses a very tiny source of light that gives a very precise and detailed reproduction of B&W film negatives, as opposed to diffuse lighting. It is very demanding, as its unforgiving sharpness and contrast do not hide scratches and dust on the film surface. Prints done this way would often need manual (painted) corrections on paper, inducing more work and more costs. By the end of the 1970's, it was usually replaced by diffuse light… better at hiding manipulation mistakes and at maximizing print labs profits.\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:19
#, no-wrap
msgid "But cleaning up negatives is no issue once they are digitized, and on this topic, Alain and I share the same values : digital imaging should augment the possibilities offered to photographers, building on top of the analog legacy, instead of settling down for what is easy and fast while trying to re-invent photography as if it was born digital.\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:21
#, no-wrap
msgid "As an early Ansel user, Alain contacted me to get help on tuning the [_Diffuse or sharpen_](../doc/modules/processing-modules/diffuse/) module to dial up or down the photographic grain in a way that closely reproduces the impact of the enlarger light source quality (point or diffused) on the final print, starting with a DSLR scan. After all, light diffusion is what happens here.[^1]\n"
msgstr ""

#. type: Link reference
#: content/workflows/film-scan/index.md:22
#, no-wrap
msgid "[^1]: Though it should be mentionned that _diffuse or sharpen_ uses thermal diffusion models ([Fourier heat equation](https://en.wikipedia.org/wiki/Heat_equation)) in [wavelets space](https://en.wikipedia.org/wiki/Wavelet). This equation can also model particle diffusion, and its fundamental solution can be identified as a convolution with a Gaussian function (aka producing here a very computationnaly-expensive Gaussian blur with the right settings). But since we apply it in wavelets space and we don't do it at the photon level, I cannot in good faith claim physical accuracy here, with regard to light diffusion. It's rather _physically-inspired_ generalized diffusion."
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:25
#, no-wrap
msgid "But he also built a complete apparatus to achieve the initial film scan and was kind enough to document and illustrate all of his process, from preparation to post-processing, translate it into English and allow me to publish it here. You get for free the very finest of what open-source has to give you:\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:32
#, no-wrap
msgid ""
"- 50 years of experience from Alain,\n"
"- real-life examples and results,\n"
"- optical explanations of what's going on,\n"
"- complete schematics of the scanning apparatus in point light setting,\n"
"- physically-accurate modules from Ansel/Darktable pixel pipeline, and presets for _demosaicing_, _input color profile_ and _diffuse or sharpen_ modules to dial the grain up or down at post-processing,\n"
"- thoughts on the work and responsibility of a print lab technician, regarding heritage conservancy and exhibition quality.\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:34
#, no-wrap
msgid "_Please note that Alain is a French speaker and this book was mostly translated using machine translation. If you understand French enough, you might want to read the original version._\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:38
#, no-wrap
msgid ""
"<object data=\"https://static.ansel.photos/article-lumiere-ponctuelle-en-compress.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900px\">\n"
"  <p>Unable to display PDF file. <a href=\"https://static.ansel.photos/article-lumiere-ponctuelle-en-compress.pdf\">Download</a> instead.</p>\n"
"</object>\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:42
#, no-wrap
msgid ""
"<div class=\"text-center\">\n"
"{{< button url=\"https://static.ansel.photos/article-lumiere-ponctuelle-en-compress.pdf\" label=\"Download the eBook (PDF)\" icon=\"download fas\" class=\"\">}}\n"
"</div>\n"
msgstr ""

#. type: Title ##
#: content/workflows/film-scan/index.md:44
#, no-wrap
msgid "Summary of Ansel settings"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:47
#, no-wrap
msgid "These settings assume you scan B&W negatives using quasi-monochromatic green light with a digital camera.\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:62
#, no-wrap
msgid ""
"- Download the color profile [IdentityRGB-elle-V2-g10.icc](https://github.com/ellelstone/elles_icc_profiles/blob/master/profiles/IdentityRGB-elle-V2-g10.icc) and put it into both folders:\n"
"  - for Linux/Mac:\n"
"    - `~./config/ansel/color/in`\n"
"    - `~./config/ansel/color/out`\n"
"  - for Windows:\n"
"    - `./AppData/Local/ansel/Color/In`\n"
"    - `./AppData/Local/ansel/Color/Out`\n"
"- Open your film scan into Ansel,\n"
"- Set the _demosaicing_ module to use VNG4[^2] mode,\n"
"- Set the _input color profile_ module to use `IdentityRGB-elle-V2-g10.icc` as input profile and working profile,\n"
"- Set _color calibration_ module :\n"
"  - in the  _CAT_ tab, set the adaptation to _none (bypass)_,\n"
"  - in the _B&W_ tab, set the green channel to 1,0 and the blue/red channels to 0,0.\n"
"- See the book for settings of _diffuse or sharpen_.\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:64
#, no-wrap
msgid "These settings allow to avoid any possible cross-talk between channels, either arising from demosaicing (that can use collaborative methods between channels, for methods other than VNG4) or from color spaces conversions (in which cross-talk is built-in by design into the matrix calculus). This way, any possible chromatic aberration linked to optical refraction, which varies depending on light wavelength, is removed and, if you scan under quasi-monochromatic green light, the sharpness of your scan will be maximum because only the green photosites of the camera sensor will be used. In practice, this is equivalent to completely removing trichromy from the graphic pipeline.\n"
msgstr ""

#. type: Plain text
#: content/workflows/film-scan/index.md:66
#, no-wrap
msgid "This, of course, will not work for color negatives and slides, which will require a broad-spectrum white light and a trichromatic color management.\n"
msgstr ""

#. type: Link reference
#: content/workflows/film-scan/index.md:67
#, no-wrap
msgid "[^2]: CHANG, Edward, CHEUNG, Shiufun, et PAN, Davis Y. Color filter array recovery using a threshold-based variable number of gradients. In : Sensors, Cameras, and Applications for Digital Photography. SPIE, 1999. p. 36-43. <https://doi.org/10.1117/12.342861>"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/workflows/monochrome-toning/index.md:1
#, no-wrap
msgid "monochrome"
msgstr ""

#. type: Yaml Front Matter Hash Value: thumbnail
#: content/workflows/monochrome-toning/index.md:1
#, no-wrap
msgid "toning-workflow-cyanotype-3.jpg"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/workflows/monochrome-toning/index.md:1
#, no-wrap
msgid "Monochrome toning"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:15
#, no-wrap
msgid "This article will demonstrate how to perform monochrome toning on digital images in Ansel, to emulate the color rendition of cyanotypes, platinotypes, sepia and split-toning developments.\n"
msgstr ""

#. type: Title ##
#: content/workflows/monochrome-toning/index.md:16
#, no-wrap
msgid "Step 0 : global preparation"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:19
#, no-wrap
msgid "Set the global exposure and filmic scene white and scene black, as in any other editing. See [basic editing steps](./basic-editing.md). This is our base image, by Glenn Butcher :\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:21
#, no-wrap
msgid "![](toning-workflow-base.jpg)\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:23
#, no-wrap
msgid "If you start from a color image, you need to turn it into black and white : the recommended way is through the [color calibration](../doc/modules/processing-modules/color-calibration.md) module, using the B&W presets. Here is what we get :\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:25
#, no-wrap
msgid "![](toning-workflow-monochrome.jpg)\n"
msgstr ""

#. type: Title ##
#: content/workflows/monochrome-toning/index.md:26
#, no-wrap
msgid "Variant 1 : cyanotype"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:29
#, no-wrap
msgid "The cyanotype is a development where \"black\" is replaced by blue, because the typical silver halide (that develop black) are replaced by ferric ferrocyanide, which develops blue.\n"
msgstr ""

#. type: Title ###
#: content/workflows/monochrome-toning/index.md:30
#, no-wrap
msgid "Step 1 : switch black and blue"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:33
#, no-wrap
msgid "In the [color balance](../doc/modules/processing-modules/color-balance-rgb.md) module, go to the _4 ways_ tab, and in the _Global offset_ section, define a hue of 259° at a chroma of 1.50%. You will need to right-click on the chroma slider, then input the `1.5` value on the keyboard, because the range of the slider goes as high as 0.75%, which fits typical color-grading uses.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:35
#, no-wrap
msgid "If you just do that, you will note that blacks stay neutral, and don't get tinted to blue. This is because of the internal gamut mapping in the module, that prevents negative RGB values, which would create later problems in the pipeline. To force blacks to be colored, you will need to raise the luminance of the _Global offset_ by the same amount as the chroma, that is 1.50% in this example.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:37
#, no-wrap
msgid "This is the result:\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:39
#, no-wrap
msgid "![](toning-workflow-cyanotype-1.jpg)\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:41
#, no-wrap
msgid "From there, you can fine-tune the _Global offset_ settings to your taste.\n"
msgstr ""

#. type: Title ###
#: content/workflows/monochrome-toning/index.md:42
#, no-wrap
msgid "Step 2 : adjust contrast"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:45
#, no-wrap
msgid "The luminance increase of the black point, mandatory to be able to tint black, reduces the contrast and flattens the image. To overcome this, you will need to come back to filmic and to raise the scene black exposure until the density of the darkest parts seems acceptable to you. Here is the result:\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:47
#, no-wrap
msgid "![](toning-workflow-cyanotype-2.jpg)\n"
msgstr ""

#. type: Title ###
#: content/workflows/monochrome-toning/index.md:48
#, no-wrap
msgid "Step 3 : fine-tune midtones"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:51
#, no-wrap
msgid "The _Global offset_ that we adjusted at the step 1 will mostly affect blacks and deep shadows. You may want to drive the fall-off of the tinting toward white, as to get more or less tinted mid-tones.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:53
#, no-wrap
msgid "You will have to go the _mask_ tab of the color balance module, and set the white fulcrum with the color picker on the right of the slider. This is important for the _Power_ setting next. In a display-referred, where white is known beforehand to be at 100%, this wouldn't be necessary, but since we are in a [scene-referred workflow](./scene-referred.md) where white can have any value, we need to define it explicitly.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:55
#, no-wrap
msgid "Then, in the _4 ways_ tab, move to the bottom, at the _Power_ section. In here, use the same hue as before (259°) and a chroma more or less intense depending on how blue you want your midtones to be. This is what we get:\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:57
#, no-wrap
msgid "![](toning-workflow-cyanotype-3.jpg)\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:59
#, no-wrap
msgid "Once you raised the blueing in the midtones, you may want to soften it slightly in the deep shadows by reducing a bit the chroma of the _Global offset_. Adjust everything to taste and watch out for flat blue surfaces that might indicate over-saturation.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:63
#, no-wrap
msgid "That's it. The look is pretty consistent with analog cyanotypes. You having nothing to do with whites and highlights, which are defined by the paper tone for analog cyanotypes. For a more vintage look, you can choose a slightly greener hue, that is around 257° or even less, and even delicately shift the highlights gain toward yellow to simulate paper aging.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:65
#, no-wrap
msgid "For a believable look, you absolutely need to watch out for any neutral blacks: you should not have any. Increase the chroma and luminance of the _Global offset_ until they are fully tinted.\n"
msgstr ""

#. type: Title ##
#: content/workflows/monochrome-toning/index.md:66
#, no-wrap
msgid "Variant 2 : platinotype"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:69
#, no-wrap
msgid "The platinotype uses palladium and platinum in variable proportions, instead of silver halide. Depending on the proportions of each, blacks will be warmer or colder, but will be less dense than with silver halide. We will go here for the warmer look.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:71
#, no-wrap
msgid "It works very much the same as the cyanotype emulation, we only change the hue, so refer to the previous section for the full explanations.\n"
msgstr ""

#. type: Title ###
#: content/workflows/monochrome-toning/index.md:72
#, no-wrap
msgid "Step 1 : warm up black"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:75
#, no-wrap
msgid "We will use much gentler settings than before, that is hue set at 55°, chroma at 0.20% and luminance at 0.20% in _Global offset_.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:77
#, no-wrap
msgid "![](toning-workflow-platinotype-1.jpg)\n"
msgstr ""

#. type: Title ###
#: content/workflows/monochrome-toning/index.md:79
#, no-wrap
msgid "Step 2 : fine-tune midtones"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:82
#, no-wrap
msgid "Again, I barely touched the _Power_ settings, with a 0.10% chroma at hue 55°.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:84
#, no-wrap
msgid "![](toning-workflow-platinotype-2.jpg)\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:88
#, no-wrap
msgid "There is not one definite platinotype look because the final tint depends on the proportions of the mix between platinum and palladium in the photo-sensible emulsion. The result presented here is more opinionated than most actual platinotypes I have seen, for educating purposes. You may want to dial it down a notch for a more believable result (reduce chroma).\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:90
#, no-wrap
msgid "Selenium toning can be reproduced exactly the same way, only the hue will need to be changed to purple.\n"
msgstr ""

#. type: Title ##
#: content/workflows/monochrome-toning/index.md:91
#, no-wrap
msgid "Variant 3 : sepia"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:94
#, no-wrap
msgid "The sepia toning is obtained from a typical silver halide print where the silver halide is turned into sulphide, which is more stable and has better longevity. It results in a brown shift.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:96
#, no-wrap
msgid "The digital reproduction of the toning is very similar in spirit to the platinotype, only the hue will be slightly different (70° instead of 55°) and the shift is more pronounced, which will require to use the _Shadows lift_ as well.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:98
#, no-wrap
msgid "The proposed settings are (all hues set to 70°): \n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:107
#, no-wrap
msgid ""
"* _Global offset_:\n"
"  * chroma : 0.20%\n"
"  * luminance : 0.20%\n"
"* _Shadows lift_:\n"
"  * chroma: 10%\n"
"* _Highlights gain_ : don't touch it (same as previously)\n"
"* _Power_: \n"
"  * chroma: 1.50%\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:109
#, no-wrap
msgid "This gives us:\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:111
#, no-wrap
msgid "![](toning-workflow-sepia.jpg)\n"
msgstr ""

#. type: Title ##
#: content/workflows/monochrome-toning/index.md:113
#, no-wrap
msgid "Variant 4 : split-toning"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:116
#, no-wrap
msgid "Split-toning is a process where highlights and shadows get a different color shift, the most common being teal and orange. It is not specific to monochrome toning, and can be used for color work, where it becomes a particular case of color grading (more on that topic in [ressources](../resources/readings.md#color-grading)). For monochrome, the split-toning will need to be very gentle to keep it believable.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:118
#, no-wrap
msgid "Using the color balance module, we only need to use the _Highlights gain_ and the _Shadows lift_. Here is a proposal for teal and orange :\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:120
#, no-wrap
msgid "![](toning-workflow-split-toning.jpg)\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:122
#, no-wrap
msgid "The possibilities are limitless, and the typical \"teal and orange\" should be used carefully because it has been already overused and abused.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:126
#, no-wrap
msgid "You may have noticed that all the analog-inspired tonings (that is, all except split-toning) don't affect whites. This is because, on an analog print, white is achieved by letting the paper naked, while black and midtones uses photosensitive pigments.\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:128
#, no-wrap
msgid "Pure black and pure white are ignored by the _Power_ setting of the color balance module, which is a property of the power function (maths…). However, the more you increase its chroma and the more impact it has on very bright and very dark midtones. If you ever find that it takes too much of highlights once you found a proper setting for midtones, you can always desaturate them in the _Master_ tab, using the _Perceptual saturation grading_ for the _Highlights_ channel (because _perceptual saturation_ is applied after the _4 ways_ settings in the pixel pipeline, while the _linear chroma grading_ is applied before).\n"
msgstr ""

#. type: Plain text
#: content/workflows/monochrome-toning/index.md:129
#, no-wrap
msgid "The real strength of the color balance module here is to let you fine-tune very precisely how the effects target shadows, midtones or highlights, and how fast the transitions are between them. But with great power comes great responsibilities, and it is certainly a tool that requires some time to master.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/workflows/_index.md:1
#, no-wrap
msgid "Workflows"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/workflows/basic-editing.md:1
#, no-wrap
msgid "Basic Editing"
msgstr ""

#. type: Plain text
#: content/workflows/basic-editing.md:11
#, no-wrap
msgid "Here is how to get started with Ansel editing, going through only the most basic steps that should serve you well most of the time.\n"
msgstr ""

#. type: Plain text
#: content/workflows/basic-editing.md:13
#, no-wrap
msgid "<!-- more -->\n"
msgstr ""

#. type: Plain text
#: content/workflows/basic-editing.md:15
#, no-wrap
msgid "The video was recorded on Darktable 3, but the same modules and principles apply to Ansel.\n"
msgstr ""

#. type: Plain text
#: content/workflows/basic-editing.md:16
#, no-wrap
msgid "{{< youtube 5CmsxxxsMDs >}}\n"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/workflows/scene-referred/index.md:1
#, no-wrap
msgid "Pipeline"
msgstr ""

#. type: Yaml Front Matter Hash Value: thumbnail
#: content/workflows/scene-referred/index.md:1
#, no-wrap
msgid "hero-scene-referred.en.svg"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/workflows/scene-referred/index.md:1
#, no-wrap
msgid "The scene-referred workflow"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:16
#, no-wrap
msgid "In this article, you will learn what the scene-referred workflow is, how Ansel uses it and why it benefits digital image processing at large.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:21
#, no-wrap
msgid "The scene-referred workflow is the backbone of the Ansel's imaging pipeline. It is a working logic that comes from the cinema industry, because it is the only way to achieve robust, seamless compositing (also known as *alpha blending*) of layered graphics, upon which movies rely heavily to blend computer-generated special effects into real-life footage. For photographers, it is mostly for high dynamic range (HDR) scenes (backlit subject, sunsets, etc.) that it proves itself useful.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:23
#, no-wrap
msgid "If you have been using *any* kind of image processing software so far, you should be already familiar with the *display-referred* workflow, but without knowing neither its name nor its core assumptions. Explaining how *scene-referred* differs from this unspoken _display-referred_ you are used to is going to be a challenge without explaining what *display-referred* was before.\n"
msgstr ""

#. type: Title ##
#: content/workflows/scene-referred/index.md:24
#, no-wrap
msgid "Making an image"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:27
#, no-wrap
msgid "When you take a picture of a scene, your camera sensor turns a light spectrum into 3 electric signals, much like the retina cone cells do it before sending electric impulses to the optical nerve. The specifics are beyond the scope of this article, but let us pretend the light spectrum gets split into three R, G, and B intensities such that the ratio of R, G and B in each pixel is a fair-enough representation of the shape of the spectrum.\n"
msgstr ""

#. type: Fenced code block (mermaid)
#: content/workflows/scene-referred/index.md:28
#, no-wrap
msgid ""
"graph TD;\n"
"\tO[fa:fa-bulb Light source] --> A;\n"
"    A[<img src='/FL1_lightspectrum.png' width='800' height='447' />] --> B[\"fa:fa-camera Sensor (Nikon D5100)\"];\n"
"    B --> C[Sensor RGB<br><img src='/FL1_seen_by_NikonD5100.png' width='400' height='226' />];\n"
"    A --> D[\"fa:fa-eye Human eye\"];\n"
"    D --> E[Cone LMS<br><img src='/FL1_seen_by_human.png' width='400' height='226' />];\n"
"    E ------> F[\"fa:fa-brain Human brain\"];\n"
"    F --> G[Color stimulus<br><img src='/FL1_color_scene.png' width='400' height='397' />];\n"
"\n"
"    C --> H[\"fa:fa-laptop Lots of digital work\"];\n"
"    H --> HH[sRGB<br><img src='/FL1_sRGB.png' width='400' height='304' />];\n"
"    HH --> I[fa:fa-desktop Screen];\n"
"    I --> J[<img src='/FL1-sRGB_spectrum.png' width='400' height='223' />];\n"
"    J --> K[\"fa:fa-eye Human eye / fa:fa-brain Human brain\"];\n"
"    K --> L[Color stimulus<br><img src='/FL1_color_display.png' width='400' height='397' />];\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:49
#, no-wrap
msgid ""
"{{< note >}}\n"
"The graphs above are generated by the author from real data. The CIE FL1 illuminant is a standard daylight fluorescent (energy-saving) light bulb. The \"human RGB\" is produced using the retina cone cells response (LMS) for the CIE 2015 2° Standard Observer. The sensor RGB is produced from spectral sensitivity measurements. The actual color of the light spectrum is a daylight \"white\" (close to D65).\n"
"{{</ note >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:51
#, no-wrap
msgid "We should note that the beginning and the end of the graphic pipeline are a light spectrum which, if identical, will produce the same color stimulus for the observer[^4]. But the light spectra are actually quite different : the large spikes from the FL1 illuminant have been smoothened once displayed on an sRGB screen. The difference between the original scene and its rendition on screen comes from the signal losses that are unavoidable when reducing a spectrum to RGB, which is designed to work only with daylight-like (smooth) spectra. This assumption is often forgotten, and the problem we see here comes at no surprise, given that the FL1 illuminant has a [CRI](https://en.wikipedia.org/wiki/Color_rendering_index) of 76 %. In fact, we can predict how a such illuminant, although technically balanced for D65, will affect color rendition:\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:53
#, no-wrap
msgid "{{< figure src=\"/fl1-report.png\" />}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:55
#, no-wrap
msgid "So this illuminant will make red and purple surfaces look less saturated than they should, compared to other colored surfaces, and will also shift their hues. Blue and green surfaces will appear mostly unaffected. However, we can note that the actual perceived color of a such illuminant (that is, \"the shade of white\") shows no visible shift despite the spectra difference. The relative color deviation is indeed lower than 0.001 % in chromatic coordinates u'v'. This is all to show that the intrications between spectra (from the illuminant as well as from light reflected by material, colored, surfaces) and color perception are far from intuitive and clearly not easily predicted.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:57
#, no-wrap
msgid "Similarly, both technological organs involved in the signal capture and its restitution work in RGB. But, none of the involved RGB spaces actually match the cone LMS. If we want the digital image to look remotely close to the human perception of the scene, we will need to work hard to make that happen, by digitally manipulating the raw RGB signal, but without necessarily caring about perception in the process. It will be enough to ensure the consistency of the light spectrum at both ends.\n"
msgstr ""

#. type: Link reference
#: content/workflows/scene-referred/index.md:58
#, no-wrap
msgid "[^4]: This is assuming the dynamic range of the scene is small enough. For very high dynamic range, highlights will shift to yellow (Bezold-Brücke shift), as can be observed with the sun disc or flames, while the same spectrum at a lower intensity will appear red."
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:61
#, no-wrap
msgid "This is a misunderstood aspect of digital photography where digital manipulation is often thought by purists as faking or tampering content, and the raw image is often seen as a sort of \"neutral\" or \"objective\" truth because it was made by a machine. The image produced by the machine is actually quite off and digital manipulation is absolutely necessary to make it look like the original scene despite all the optical distortions that happened in the camera.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:63
#, no-wrap
msgid "Fixing the raw RGB to make it look somewhat like what the viewer experienced on the scene requires to manipulate colours, using at least an input color profile and a white balance adjustment. Unfortunately, these are inaccurate and will still not exactly match human vision, especially when the light source of the scene is not a natural daylight (with a \"full\" spectrum). In the example above, the fluorescent bulb shows a spiky spectrum that will make some very particular colors appear more saturated and bright than the rest of them, which will be challenging to correct.[^3]\n"
msgstr ""

#. type: Link reference
#: content/workflows/scene-referred/index.md:64
#, no-wrap
msgid "[^3]: The quality of a particular lighting is measured by its [Color Rendering Index (CRI)](https://en.wikipedia.org/wiki/Color_rendering_index), which expresses how close the light spectrum is from natural daylight."
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:67
#, no-wrap
msgid "The property of this raw RGB signal is to be scene-linear : the RGB code values are roughly proportional to the energy of the light emission. This is the closest representation we can take of a light spectrum, pending a fully spectral pipeline (as in [Manuka](https://www.wetafx.co.nz/research-and-tech/technology/manuka/)).\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:69
#, no-wrap
msgid "Unfortunately, in most cases we can't just send this linear RGB to the computer display, even after correcting colors to match human vision, usually because :\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:72
#, no-wrap
msgid ""
"1. the dynamic range that sensors can capture is much larger than what screens can render,\n"
"2. to better use this dynamic range, camera manufacturers \"under-expose\" the scene by roughly 2/3 of EV, which will make the raw RGB appear quite dark.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:74
#, no-wrap
msgid "Therefore, we need at least to brighten the mid-tones and usually to compress the highlights, which is the job of the display transform.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:76
#, no-wrap
msgid "In camera firmwares and in typical image editing applications, this display transform is commonly achieved through a \"curve\" (though the curve is only the graphical representation of the transform, not the transform itself) resembling this :\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:78
#, no-wrap
msgid "{{< figure src=\"display-transform.png\" caption=\"A typical 'S' curve used commonly as SDR display transform. The 3 nodes represent respectively the black, middle-grey and white points. The dark diagonal in background is the 'no-operation' line, meaning the pixels will have the same RGB values after the transform as before.\" width=\"600\" class=\"align-center\" />}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:82
#, no-wrap
msgid ""
"{{< compare after=\"display-calibrated.jpg\" before=\"raw-calibrated.jpg\" >}}\n"
"The result of applying a display transform for SDR screen (after) over calibrated raw RGB (before). Note how we lost local contrast in highlights, due to the compression, for the sake of brightening mid-tones. This is a trade-off difficult to avoid without introducing other much uglier artifacts.\n"
"{{</ compare >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:84
#, no-wrap
msgid "The slope of this curve determines the global contrast. Many proprietary applications will apply a such curve without telling you and without letting you disable it, so you may have no idea what happens backstage. Some applications only let you choose a base look between \"default\", \"neutral\", \"portrait\", \"intense\", \"HDR\", etc. which will load a different curve. Some applications even embed the curve in the input color profile.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:88
#, no-wrap
msgid ""
"{{< note >}}\n"
"For a commercial software publisher, the choice of this default curve is crucial because it determines the first impression that the customer has when opening his photo, and this first impression often conditions the feeling of quality of the software. However, advanced users often regret that the first step of their editing is to cancel or soften the default look, which is not always easy. You will find people saying they like \"Capture One colors\" or rather \"Lightroom colors\", which is nothing more than an aesthetic choice of the publisher regarding the default look.\n"
"{{</ note >}}\n"
msgstr ""

#. type: Title ##
#: content/workflows/scene-referred/index.md:89
#, no-wrap
msgid "Working on an image"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:92
#, no-wrap
msgid "In the previous section, we learned that we would have to work to not only to reconstruct a believable color rendition from the raw RGB, but also to remap the scene dynamic range properly for the target display device. Here, we will see how this work is actually done, by studying more specifically the \"_Lots of digital work_\" step of the previous section flowchart.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:94
#, no-wrap
msgid "If we generalize how _any_ image processing software works, being typical desktop editors, in-camera firmware, mobile apps, no matter what workflow they use, we come to this flowchart :\n"
msgstr ""

#. type: Fenced code block (mermaid)
#: content/workflows/scene-referred/index.md:95
#, no-wrap
msgid ""
"graph TD\n"
"    A((fa:fa-sun Scene)) --> B([Raw sensor reading]);\n"
"    B --> C;\n"
"\n"
"    subgraph Software;\n"
"      C[\"(Linear) Color profiling\"];\n"
"      C --> D[Scene-referred processing];\n"
"      D --> E[\"(Non-linear) Display transform\"];\n"
"      E --> I[Display-referred processing];\n"
"      I --> G[Color Management System];\n"
"    end;\n"
"\n"
"    G --> H([Screen buffer]);\n"
"    H --> J((fa:fa-lightbulb Display));\n"
"\n"
"    style D fill:#BAFFD2;\n"
"    style I fill:#FFB7B5;\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:116
#, no-wrap
msgid "The typical image applications don't make use of the scene-referred processing at all, or only for some technical image reconstruction filters, so they go directly from the color profiling to the display transform. The digital manipulation happens solely in display space, where \"white\" is forced at 100 % (or the code value `255` when working in 8 bits RGB), \"black\" is forced at 0 % (or the code value `0` in 8 bits RGB), and middle-grey is typically in the middle at 45-50 % (see more details below).\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:118
#, no-wrap
msgid "The problem of this logic lies in the life cycle of the picture :\n"
msgstr ""

#. type: Fenced code block (mermaid)
#: content/workflows/scene-referred/index.md:119
#, no-wrap
msgid ""
"graph LR;\n"
"\tA[fa:fa-tree Scene] --> B[fa:fa-camera Camera];\n"
"\tB --> C[__WORKFLOW__];\n"
"\tC --> D[fa:fa-poop Color Management System];\n"
"\tD --> E[fa:fa-desktop SDR screen];\n"
"\tD --> F[fa:fa-sun HDR Screen];\n"
"\tD --> G[fa:fa-print Fine-art print];\n"
"\tD --> H[fa:fa-book Books/Magazines];\n"
"\tD --> I[fa:fa-tshirt Merch];\n"
"\tD --> J[fa:fa-save Archives];\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:133
#, no-wrap
msgid "Because the target display medium can now be anything from a T-shirt to an HDR screen, and everything in-between, we need to use different display transforms to account for the properties of the target medium. But if we use the display transform as the first step of our editing, changing it will often void the subsequent editing, especially if it used parametric masks. This practically means you need to redo your editing for each output medium, which is tedious.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:137
#, no-wrap
msgid ""
"{{< note >}}\n"
"Typical color management systems (CMS) rely on the ICC v2 and ICC v4 specifications, which are designed for the printing industry with small dynamic range (SDR) in mind. They only take care of converting pixels from RGB space to RGB space but do not handle dynamic range rescaling, color adaptation to compensate for viewing conditions, and handle gamut mapping pretty coarsely. They do not fall under what we call \"display transform\" here, and are not ready for HDR, which means we need to rely on them as little as possible and bake them an SDR signal before using them.\n"
"{{</ note >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:139
#, no-wrap
msgid "Working in the scene-referred part of the pipeline means we work before the display transform and our editing will be immune to the output medium discrepancies. This is like working on a \"master edit\" that will stay the same, no matter the output, and then dealing with the specifics of the output when we export the master. Removing the display-referred part of the workflow allows to collapse the display transform and the color management steps, which is very desirable because they all deal with the same task : mapping the \"master edit\" to whatever output medium we have, by correcting its peculiarities to try and preserve the intent color appearance for the audience.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:141
#, no-wrap
msgid "The challenge of working in the scene-referred part is that \"white\" can't be assumed to be anchored at a specific value anymore, but can be anything positive up to infinity. To circumvent this lack of reference, we switch from a \"white-centric\" pipeline to a \"grey-centric\" pipeline, where the reflective middle-grey (the one of the grey cards) is expected to be anchored at 0.18-0.20. Since the HDR \"white\" can be 4 times as bright as the SDR \"white\", all we know is that all devices will have a middle-grey around 0.20 and all devices will be able to display it, no matter their dynamic range. It also turns out that images of natural scenes have most of their histogram centered around this value.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:150
#, no-wrap
msgid ""
"We can summarize the assumption of each workflow below :\n"
"{{< table >}}\n"
"| Assumption | Scene-referred | Display-referred (SDR) |\n"
"| -----------| ---------------| -----------------|\n"
"| Black point RGB encoding| > 0              | 0 % of the encoding range               |\n"
"| White point RGB encoding| unspecified    | 100 % of the encoding range      |\n"
"| Middle-grey RGB encoding| 0.18   | 18 % our 45 % of the encoding range |\n"
"{{</ table >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:152
#, no-wrap
msgid "The RGB encodings are the digital representation of the image inside the computer. They are not  _directly_ connected to the real-world luminance, either recorded on the original scene or on the rendering display. For example, the luminance of black pixels measured on physical displays will be around 0.1 Cd/m², whereas will be encoded `0` in RGB. In the scene-referred workflow, we often need to offset black to non-zero RGB values to reconnect with its luminous meaning, upon which we rely.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:154
#, no-wrap
msgid "When working in RGB spaces encoded with an [OETF](https://en.wikipedia.org/wiki/Transfer_functions_in_imaging) (wrongly dubbed \"_gamma_\"), like sRGB, Adobe RGB or Prophoto RGB, middle-grey is expected around 45 % of the encoding range. [^1] Applications having an 8 bit integer pipeline have to use OETF-encoded RGB to avoid posterization in gradients. Applications having a 16 bits integer pipeline often choose to do the same for consistency, although it's not a technical requirement in this case. Middle-grey will be encoded at 18 % of the encoding range in display-referred workflows that use linear RGB, that is RGB spaces stripped off of their OETF/gamma.\n"
msgstr ""

#. type: Link reference
#: content/workflows/scene-referred/index.md:155
#, no-wrap
msgid "[^1]: This property is extensively used in graphical interfaces, like in typical [levels tools](https://www.cambridgeincolour.com/tutorials/levels.htm), because it puts the middle-grey effectively in the middle of the black-white range which makes for a nice usability, even though it comes at an high price in terms of colorimetry."
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:165
#, no-wrap
msgid ""
"We can now match the assumptions of each workflow on the RGB code values to their meaning in terms of real-life luminance :\n"
"{{< table >}}\n"
"| Assumption | Scene-referred | Display-referred (SDR) |\n"
"| -----------| ---------------| -----------------|\n"
"| Black point actual luminance | user-defined, scene-dependent | optionally defined in ICC profiles |\n"
"| White point actual luminance | user-defined, scene-dependent | 80-160 Cd/m² |\n"
"| Middle-grey actual luminance | grey card   | 14-29 Cd/m² |\n"
"{{</ table >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:167
#, no-wrap
msgid "The Cd/m² values in the display-referred column come from the usual pre-print ISO standards. The black point luminance of the display can optionally be defined in the medium ICC profile, which is often the case for professionally-made printer profiles, in order to enable the [black point compensation](https://www.color.org/WP40-Black_Point_Compensation_2010-07-27.pdf). Since the OETF gets decoded inside the screen, the luminance value of middle grey is connected to the linear RVB code value and will be found at 18-20 % of the screen white luminance.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:169
#, no-wrap
msgid "For the scene-referred workflow, black and white luminances match the minimum and maximum luminances found on the scene. The middle-grey reference is the middle-grey patch of a Color Checker (or a grey card) lit under the same conditions as the subject of the image. It is therefore possible to set the middle-grey directly from sampling the luminance of a grey card in a test photo.\n"
msgstr ""

#. type: Title ##
#: content/workflows/scene-referred/index.md:170
#, no-wrap
msgid "Practical benefits of the scene-referred workflow"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:173
#, no-wrap
msgid "We have seen in the previous section that the scene-referred workflow allows you to work your master edit independently from any fixed target medium. The benefits of it don't stop there.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:175
#, no-wrap
msgid "First, because scene-referred is designed around the idea that \"white\" has no particular fixed value, it can scale to any input dynamic range, which means that the same tools and workflow can be used to process digital photographs, synthetic renderings or any kind of composite HDR.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:177
#, no-wrap
msgid "Then, where it really shines is for all optically-defined digital filters trying to mimic real-life effects, like blurring, deblurring, removing noise or reconstructing signals. The example below showcases the difference it makes to apply a digital bokeh filter, simulating a lens diaphragm, before or after the display transform.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:179
#, no-wrap
msgid "{{< figure src=\"initial.jpg\" caption=\"Base image\" />}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:183
#, no-wrap
msgid ""
"{{< compare after=\"blur-after.jpg\" before=\"blur-before.jpg\" >}}\n"
"The result of applying a lens blur before (scene-referred) or after (display-referred) the display transform. The relationship in brightness between the bokeh bubbles and the dark surround is destroyed and inconsistent in display-referred.\n"
"{{</ compare >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:185
#, no-wrap
msgid "Since lens blur happens on light, and scene-linear RGB is the closest digital representation we can have of real light, it only makes sense to apply optically-defined digital filters in the scene-linear part of the pipeline, but the above example visually confirms the validity of the reasoning.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:187
#, no-wrap
msgid "Similar effects will be observed when working with masks and alpha compositing, when one wants to feather and smooth the edges of the masks to better blend them with the surrounding (which, again, is a blur).\n"
msgstr ""

#. type: Title ##
#: content/workflows/scene-referred/index.md:188
#, no-wrap
msgid "How is it implemented in Ansel ?"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:191
#, no-wrap
msgid "Ansel is able to use both the display-referred and scene-referred workflows, because it inherits some legacy modules from darktable. Most display-referred modules have been replaced by scene-referred counterparts, and the remaining ones should follow in 2023.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:193
#, no-wrap
msgid "Soon, Ansel will be entirely scene-referred, allowing for more clever display transforms combined with gamut mapping and ICC profiles extractions.\n"
msgstr ""

#. type: Plain text
#: content/workflows/scene-referred/index.md:194
#, no-wrap
msgid "It is generally not possible to use display-referred modules in the scene-referred part of the pipeline, because they expect a white point at 100 %, and will generally clip RGB values above 100 % (some need to do it to avoid numeric instabilities in algorithms). Some even expect a grey point at 50 %, like the alpha [blending modes](https://en.wikipedia.org/wiki/Blend_modes) _screen_, _soft light_, _hard light_, _overlay_, _dodge_, _burn_ which process differently pixels which values are greater or lower than the  50 % threshold.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: thumbnail
#: content/workflows/printing/index.md:1
#, no-wrap
msgid "charte-noirs.jpg"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/workflows/printing/index.md:1
#, no-wrap
msgid "Printing"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:12
#, no-wrap
msgid "The [scene-referred](./scene-referred.md) workflow promises an editing independent from the output medium. It will typically produce an image encoded in sRGB colorspace with 8 bits, that is code values between 0 and 255. To simplify, we will consider here only the 8 bits case. Concepts are the same in 16 bits, only the coding range goes from 0 to 65535, which is anecdotal.\n"
msgstr ""

#. type: Title ##
#: content/workflows/printing/index.md:13
#, no-wrap
msgid "The printing problem"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:16
#, no-wrap
msgid "Unfortunately, nothing guarantees that the printer is able to use the whole encoding range. The minimum density (_Dmin_ in analog) is reached with naked paper, and matches an RGB code value 255. The maximum density (_Dmax_ in analog) is reached with 100% ink coverage.[^1] Problem is, if Dmin matches an RGB code value of 255, Dmax never matches an RGB value of 0.\n"
msgstr ""

#. type: Link reference
#: content/workflows/printing/index.md:17
#, no-wrap
msgid "[^1]: Printers reach deeper blacks by mixing pure black ink with all of CYM inks."
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:20
#, no-wrap
msgid "To understand the problem, I generated a synthetic chart of sRGB code values from 0 to 59 (over 255) and printed it on regular office paper, with an old photo printer, then scanned it. The grid in-between the patches is pure black (RGB = 0).\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:24
#, no-wrap
msgid ""
"{{<compare before=\"charte-noirs.jpg\" after=\"chartes-scan.jpg\">}}\n"
"Before : digital original ; After : scanned print without correction.\n"
"{{</compare >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:26
#, no-wrap
msgid "The printed blacks are muted, compared to the digital original, but it's not the worst part : the patches below 0.12 % are completely blended into the 0 % grid, which means that all RGB code values below 5 / 255 are printed at the same density and end up in the same black blob.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:28
#, no-wrap
msgid "Said otherwise, our printer black saturates at 5 / 255 and we will not be able to resolve details in deep shadows without proper correction. But why ?\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:30
#, no-wrap
msgid "While 8 bits sRGB (with OETF) can theorically encode a contrast ratio of 6588:1 (that is, a dynamic range of 12.69 EV),  LED displays can typically render a contrast of 300:1 to 1000:1 thanks to __emissive__ whites having a controlled intensity. On paper, whites are __reflective__, and the contrast adjustment variable is therefore black ink, absorbing incident light. The renderable contrast on paper prints varies between 50:1 (Dmax 1.7) and 200:1 (Dmax 2.3), that is a dynamic range varying between 5.6 and 7.6 EV.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:32
#, no-wrap
msgid "During printing, we unroll the file dynamic range into the paper dynamic range, starting at white. 5.6 EV below white, we hit the dynamic range limit of black ink on matte paper, but we are not even half-way through the digital file dynamic range. All tones included between -5.6 and -12.7 EV below white, in the digital file, are printed with the same black density : the printer reached the maximum inking.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:45
#, no-wrap
msgid ""
"{{<table>}}\n"
"| Object | Contrast ratio | Dmax | Dynamic range |\n"
"|--------|----------------:|------:|---------------:|\n"
"| 8 bits sRGB (with OETF) | 6588:1 | 3.8 | 12.7 EV |\n"
"| 8 bits linear RGB | 510:1 | 2.7 | 9.0 EV |\n"
"| 12 bits linear RGB (raw photos) | 8190:1 | 3.9 | 13 EV |\n"
"| 14 bits linear RGB (raw photos) | 32766:1 | 4.5 | 15 EV |\n"
"| 16 bits linear RGB (raw photos) | 131070:1 | 5.1 | 17 EV |\n"
"| matte paper print | 50:1 | 1.7 | 5.6 EV |\n"
"| glossy paper print | 200:1 | 2.3 | 7.6 EV |\n"
"| ICC standard PCS black point | 287:1 | 2.5 | 8.2 EV |\n"
"| Eizo Color Edge CG319X | 1500:1 | 3.2 | 10.6 EV |\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:48
#, no-wrap
msgid ""
"_Equivalences of contrast units : all of them represent the same span between pure white and pure black luminances, but measured differently._\n"
"{{</table>}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:50
#, no-wrap
msgid "Printing all digital tones between -12.7 and -5.6 EV to the same density on paper means, in practice, flattening details and texture to a solid black blob. To avoid that, we will need to remap the sRGB dynamic range to the paper dynamic range, which in our example here means pushing RGB code values between 5 and 255.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:52
#, no-wrap
msgid "{{<figure src=\"sRGB-to-printer-zones.png\" caption=\"The tonemapping problem from digital sRGB to a 50:1 contrast paper, as shown by Filmic zone system graph\" />}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:54
#, no-wrap
msgid "Let's see the difference it makes on a real image having a lot of content in deep shadows :\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:56
#, no-wrap
msgid "{{<figure src=\"Shooting Minh Ly-0155-_DSC0155-Minh-Ly-resized.jpg\" caption=\"Digital original\" />}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:60
#, no-wrap
msgid ""
"{{<compare before=\"Shooting Minh Ly-0155-_DSC0155-Minh-Ly-no-bpc.jpg\" after=\"Shooting Minh Ly-0155-_DSC0155-Minh-Ly-bpc.jpg\">}}\n"
"Before : print simulation at contrast 66:1 without black point compensation ; After : print simulation at contrast 66:1 with black point compensation.\n"
"{{</compare >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:62
#, no-wrap
msgid "Black must be fixed to retain details in the hair, even though it is done at the expense of contrast in the neck.\n"
msgstr ""

#. type: Title ##
#: content/workflows/printing/index.md:64
#, no-wrap
msgid "Understanding black point compensation"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:67
#, no-wrap
msgid "The [black point compensation](https://www.color.org/WP40-Black_Point_Compensation_2010-07-27.pdf) has been invented by Adobe and standardized by the ICC later. It is a simple black offset meant to raise (brighten) all RGB values above the black saturation threshold, such that we recover gradients in deep shadows, acknowledging that blacks will remain more muted than the original no matter what we do.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:69
#, no-wrap
msgid "Unfortunately, the black point compensation by offsetting does not preserve hues and may shift colors. For this reason, [Capture One simply does not support it](https://support.captureone.com/hc/en-us/articles/360002654477-Black-point-compensation).\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:71
#, no-wrap
msgid "It should be noted that the black point compensation is the last resort, for when the [perceptual intent](https://www.color.org/v2profiles_v4.pdf) is not available in your output color profile (that is, when the `AtoB` and `BtoA` LUTs are not defined in the profile). This is the most common case when dealing with open-source printer drivers, because those LUTs have to be manually set by someone who understands this, and not by a mere calibration software. Therefore, the perceptual LUTs are typically found only in vendor-shipped color profiles, but those will not be fully accurate for your inkjet cartridges and paper set.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:73
#, no-wrap
msgid "In the absence of defined perceptual intent, the color manager can fallback to the relative colorimetric intent and can use the black point compensation if the profile has some tone curve (the `TRC`). If you miss both the perceptual LUTs and the TRC, that is if you didn't calibrate your printer yourself, then tough luck : you will not be able to perform black point compensation by standard ICC methods.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:75
#, no-wrap
msgid "Fortunately, Filmic lets you remap the scene dynamic range to any arbitrary medium dynamic range, through the _display_ tab, by raising the _target black value_ setting.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:77
#, no-wrap
msgid "{{<figure src=\"sRGB-to-printer-curve.png\" caption=\"Filmic black point compensation curve (log scale)\" />}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:79
#, no-wrap
msgid "Because Filmic tone-mapping is a generic 3-points map (black, middle-grey, white), it lets you raise the black point without affecting middle-grey and white values, and with minimal impact on global contrast. Since Filmic manages hue and saturation as well, its black point compensation doesn't induce color shifts, unlike the Adobe method. The problem remains to find the proper target black value.\n"
msgstr ""

#. type: Title ##
#: content/workflows/printing/index.md:80
#, no-wrap
msgid "Adjusting black point without profiling the printer"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:91
#, no-wrap
msgid ""
"1. [Download the chart of blacks](charte-noirs.jpg download)\n"
"2. print it directly as an sRGB image, with no editing and no correction,\n"
"3. on the print, note the darkest patch that you can visually tell apart from the pure black grid, and record its percent value,\n"
"4. open the chart image in Ansel, and in Filmic module do the following :\n"
"   1. in _scene_ tab, click on the auto-tuner button,\n"
"   2. in _look_ tab, set the contrast to the minimum value (0.5),\n"
"   3. in _display_ tab, input the target black value you read on the patch previously,\n"
"   4. in _options_ tab, set the _contrast in shadows_ parameter to _safe_.\n"
"5. export the corrected chart and print again to validate the settings.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:94
#, no-wrap
msgid "This is the result from the example here:\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:98
#, no-wrap
msgid ""
"{{< compare before=\"chartes-scan.jpg\" after=\"chartes-scan-bpc.jpg\">}}\n"
"Before, the display black point is set at 0 % (no compensation). Patches from 0% to 0.09 % are fully blended in the grid. After, the display black point is set to 0.12 %. All patches stand out of the grid, but the grid itself lost some density. 0.9 % is would be a better setting.\n"
"{{< / compare >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:102
#, no-wrap
msgid ""
"{{< note >}}\n"
"The patches have all integer RGB code values in 8 bits, from 0 to 49 over 255, with the sRGB OETF on, which is what the printer driver will get when printing. The percents translate those values in linear Rec2020 RGB, for Ansel pipeline. It is useless to try and use intermediate percent values for black compensation, since the picture is ultimately converted to 8 bits sRGB by most drivers.\n"
"{{</ note >}}\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:106
#, no-wrap
msgid ""
"{{<warning >}}\n"
"The black saturation level read on patches is not a metric of print contrast. Printers get images through computer drivers and process them with onboard electronics, at least to convert RGB to CYMK. Drivers and onboard electronics apply undisclosed image transformations that prevent us from finding absolute relationships between RGB code values and actual ink density, unless we perform a full profiling. What is done here is a kind of reverse-engineering to guess the sweet spot of the printer black, applied on top of the native image corrections performed by the printer. Refrain from drawing hasty conclusions from these readings.\n"
"{{</warning>}}\n"
msgstr ""

#. type: Title ##
#: content/workflows/printing/index.md:108
#, no-wrap
msgid "Applying the settings to real images"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:111
#, no-wrap
msgid "When editing your picture, proceed as usual, without black point compensation. Filmic has a default black point compensation meant to deal with quantization errors when going to 8 bits, it is not linked to any particular medium, but only to 8 bits sRGB.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:113
#, no-wrap
msgid "You just need to mind the brightness of your screen backlighting, compared to the surround brightness of the room in which you edit. If your display is a lot brighter than the surround, you may not be able to spot underexposed pictures until you print them. The correct backlighting is reached when a 100% white rectangle displayed on screen appears to have the same brightness as a white papersheet displayed next to the screen.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:115
#, no-wrap
msgid "Before printing, change the Filmic _display black_ to the value measured on the chart above and export with _relative colorimetric_ intent.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:119
#, no-wrap
msgid ""
"{{< note >}}\n"
"A global _display black_ override will be offered in the GUI for temporary changes at export time, without having to change the image parameters, as well as a way to directly extract the black point compensation from a printing ICC profile, if available.\n"
"{{</ note >}}\n"
msgstr ""

#. type: Title ##
#: content/workflows/printing/index.md:121
#, no-wrap
msgid "White point compensation"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:124
#, no-wrap
msgid "Users of Fuji Instax pocket printers have reported a similar issue, but with white. Fuji Instax, using a photochemical printing process, seems to add a lot of contrast in highlights, resulting in clipping above 75 % luminance, or so.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:126
#, no-wrap
msgid "You can reproduce the steps above for white, using <a href=\"/en/workflows/img/charte-blancs.jpg\" download>the charts of whites</a>. Note the darkest patch that starts blending into the white grid, and use the corresponding percent value for Filmic _display white_.\n"
msgstr ""

#. type: Title ##
#: content/workflows/printing/index.md:127
#, no-wrap
msgid "About softproofing"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:130
#, no-wrap
msgid "Ansel is able to [softproof a print](/en/doc/module-reference/utility-modules/darkroom/soft-proof/), using LittleCMS2, if you give it a proper printer profile. Softproofing means converting the image to the printer color space, that is compensating the white and black points, then remapping color gamut, using the data contained into the profile and standard ICC methods. In practice, it will uglify the picture by desaturating it and removing a lot of contrast (\"milky blacks\"), in an attempt to come close to the printed result. There are some caveats there, though.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:132
#, no-wrap
msgid "First of all, the softproofing shows what you would get out of a standard ICC pipeline if your printer conformed to ICC specifications. The softproofing is not written in the exported file, so applying the set of changes you see on screen is entirely up to the printer driver and photolab technician.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:134
#, no-wrap
msgid "Then, even with muted contrast, a digital softproof on an emissive medium doesn't come close to an hardcopy on reflective paper. The practical usability of softproofing is at best anecdotal.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:136
#, no-wrap
msgid "Finally, there is not much information to be gathered from a softproof, except that prints suck. The most you can do is check that the automatic color conversion behaves properly, in particular, check that they preserve smooth gradients and don't create solid blobs where your digital original has gradients.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:138
#, no-wrap
msgid "If you enable the gamut check, you will almost always see that the deepest, richest colors are out of the printer gamut. Again, it's nothing to be worried about, these are remapped by the printer perceptual LUTs or Filmic gamut mapping.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:140
#, no-wrap
msgid "My experience with softproofing and gamut check is they needlessly worry semi-skilled users, making them believe that they have something to fix manually to make those out-of-gamut alerts disappear. I have also seen several bug reports mentionning a problem with softproofing, because it veiled blacks, even though it's exactly the point. All scopes are useful only if you know how to read them, and data becomes information only if know what you are looking for.\n"
msgstr ""

#. type: Title ##
#: content/workflows/printing/index.md:141
#, no-wrap
msgid "Filmic : complex solution to a tricky problem"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:144
#, no-wrap
msgid "The ICC pipeline aims at automating color spaces conversions, defining standardized methods using descriptive profiles. Doing so, it puts an heavy burden on photolab technicians, tasked with creating and operating these profiles, and experience has shown that most of them play it by ear in colorimetry.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:146
#, no-wrap
msgid "Far from having made the pipeline more reliable, ICC standards have made it more complex, with magical and incomprehensible black boxes (the _Color Management Systems_), which specifications complexity could make us forget that they are not doing more than freshman-level maths. Printing digital photographs is more than ever a trial and error game, relying on test prints and empirical adjustments, involving software understood only by their developers.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:148
#, no-wrap
msgid "The secret weapon of ICC profiles is the perceptual intent, relying on `AtoB` and `BtoA` tags duly filled in the profile file. These fields are to be found only in vendor profiles, and when they are, the technical trade-offs governing their design are opaque.[^3] In any case, the perceptual approach is limited because the ICC v2 LUT are valid only for a given source color space : typically, printer profiles expect sRGB or Adobe RGB space at the intput, and any other space invalidate their perceptual LUT. Given that any raw photo editing software works in large gamut RGB, you need 2 stages of gamut mapping (large gamut to sRGB, then sRGB to printer), each of them introducing color shifts more or less predictable.[^2]\n"
msgstr ""

#. type: Link reference
#: content/workflows/printing/index.md:149
#, no-wrap
msgid "[^2]: For more edifying details on the horror of gamut mapping intents in ICC profiles, see Argyll CMS documentation : <https://www.argyllcms.com/doc/iccgamutmapping.html>"
msgstr ""

#. type: Link reference
#: content/workflows/printing/index.md:151
#, no-wrap
msgid "[^3]: We would like to know, notably, if the gamut mapping picks the closest color, or enforces a constant hue, or constant luminance, etc."
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:154
#, no-wrap
msgid "In the absence of those fields, color management systems fallback silently to colorimetric intents, without notifying users. They have therefore no way to know what is going on, and the result is unpredictable. In most cases, switching between perceptual and relative colorimetric intents, in Ansel export, leads to the same result since open-source profiles don't have perceptual LUTs.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:156
#, no-wrap
msgid "Filmic was born as a tone mapping system, with HDR to SDR conversion in mind. Since the beginning, its design has been as generic as possible, without any fixed assumption on black and white points for the output medium. It quickly appeared that gamut mapping could not be decoupled from tone mapping, because we operate RGB signals which modulation drives lightness, saturation and hue altogether, and the \"color\" vs. lightness decoupling is only a creation of the mind to better grasp things, but without technical reality.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:158
#, no-wrap
msgid "Filmic got more complex over years to transparently solve the problem that ICC failed to solve with the perceptual intent. Instead of relying on a LUT which existence is not certain, built we don't know how, assuming a rigid but undocumented source input color space, Filmic lets users parametrize themselves a perceptual intent by defining :\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:163
#, no-wrap
msgid ""
"- the black/white points of the input space (scene) and output space (display),\n"
"- the contrast curve for tone mapping,\n"
"- an optional normalization of colors through RGB norms preserving original saturation (similar to the saturation intent), or without normalization (similar to perceptual intent), or a mix of both (since version 7),\n"
"- a gamut mapping to the output space by saturation soft-clipping at constant luminance and hue (since version 6).\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:165
#, no-wrap
msgid "By exporting images to the printer color space (or otherwise to sRGB), by defining the black point compensation in the _target black_ of Filmic and by writing the _relative colorimetric_ intent in the exported file, you can bypass the opaque and unreliable color correction steps of the ICC workflow, and manage color space resizings internally.\n"
msgstr ""

#. type: Plain text
#: content/workflows/printing/index.md:166
#, no-wrap
msgid "The misunderstanding and the ignorance of those problems lead Darktable 4.0 to introduce the _Sigmoid_ module as a simplified alternative to Filmic, which can afford to be far simpler since it fulfills 25% of the requirements and moves the software back 5 years.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/support.md:1
#, no-wrap
msgid "Support"
msgstr ""

#. type: Plain text
#: content/support.md:9
#, no-wrap
msgid "<div class=\"lead my-5 ps-3\">This page will show you how and where you can learn and get help, in particular on Ansel, but also in general on photography.</div>\n"
msgstr ""

#. type: Title ##
#: content/support.md:10
#, no-wrap
msgid "General info"
msgstr ""

#. type: Plain text
#: content/support.md:13
#, no-wrap
msgid "Ansel is mostly a one-person operation. This is good news when it comes to keeping developement in sync with users needs and expectations, not so much when it comes to balancing the workload. So everything that could be automated [was automated](./contribute/workflows.md) for the developer's sanity, and you are asked to use the online resources first everytime it is possible.\n"
msgstr ""

#. type: Plain text
#: content/support.md:17
#, no-wrap
msgid ""
"{{< warning >}}\n"
"When you submit a bug report or book a training session, please upload your attachment files on my [private cloud](https://cloud.apmlt.net/s/YAdfYajPkE5nLyW) instead of using third-party hosting services with an expiration date : there is no guaranty I will download the files in time and it keeps things tidy for me.\n"
"{{< /warning >}}\n"
msgstr ""

#. type: Title ##
#: content/support.md:19
#, no-wrap
msgid "Online learning resources"
msgstr ""

#. type: Plain text
#: content/support.md:22
#, no-wrap
msgid "There already is a fair deal of information around on Ansel's usage. As Ansel is based on darktable 4.0, most tutorials on darktable 4.x (and 3.x, to a lesser extent) are still relevant, even though the GUI may be slightly different.\n"
msgstr ""

#. type: Plain text
#: content/support.md:27
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% card title=\"Videos\" icon=\"chalkboard-teacher\" %}}\n"
"{{< button url=\"https://www.youtube.com/channel/UCmsSn3fujI81EKEr4NLxrcg\" icon=\"youtube fab\" label=\"Youtube channel\" >}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/support.md:32
#, no-wrap
msgid ""
"{{% card title=\"Documentation\" icon=\"book\" %}}\n"
"{{< button url=\"/en/doc\" icon=\"glasses\" label=\"Read it, seriously\" >}}\n"
"{{% /card %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Plain text
#: content/support.md:36
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% card title=\"Chantal AI, search engine 🇫🇷 🇬🇧\" icon=\"search\" class=\"border border-info bg-info-subtle\" %}}\n"
"Chantal is a __bilingual AI language model__ trained specifically for open-source __image processing and photography__, coupled with a search engine that indexes more than __47.000 pages__, including Ansel docs, bug reports and forum threads.\n"
msgstr ""

#. type: Plain text
#: content/support.md:38
#, no-wrap
msgid "It acts as your virtual librarian and can greatly improve access to information when you are __not sure of the exact terms__ to look for because __it understands synonyms__ and context.\n"
msgstr ""

#. type: Plain text
#: content/support.md:41
#, no-wrap
msgid ""
"{{< button url=\"https://chantal.aurelienpierre.com\" icon=\"search\" label=\"Search\" >}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/support.md:44
#, no-wrap
msgid ""
"{{% card title=\"Ansel GPT\" icon=\"search\" %}}\n"
"Ansel GPT is a custom ChatGPT model trained with all the content of the Ansel website and documentation, plus other color science resources. It can answer many questions and help you build and configure Ansel on your system. It has access to significantly fewer resources than Chantal but can form full explanations.\n"
msgstr ""

#. type: Plain text
#: content/support.md:49
#, no-wrap
msgid ""
"It is available to _ChatGPT Plus_ subscribers only (as per OpenAI limitations).\n"
"{{< button url=\"https://chatgpt.com/g/g-680d2f861a608191a0f7549eadd40f2e-ansel-gpt\" icon=\"search\" label=\"Search\" >}}\n"
"{{% /card %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Title ##
#: content/support.md:50
#, no-wrap
msgid "Support and training with the developer"
msgstr ""

#. type: Plain text
#: content/support.md:53
#, no-wrap
msgid "Getting a chance to learn how to use the tools directly with their developer is a pretty rare opportunity as far as software goes. Ansel gives it to you, with 1-on-1 personalized assistance through video-conferencing.\n"
msgstr ""

#. type: Plain text
#: content/support.md:59
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% card title=\"Training sessions\" icon=\"chalkboard-teacher\" %}}\n"
"2 hours sessions with 2 days booking heads-up\n"
"{{< button url=\"/en/booking\" icon=\"calendar-alt\" label=\"Book training\" >}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/support.md:65
#, no-wrap
msgid ""
"{{% card title=\"Emergency support\" icon=\"ambulance\" %}}\n"
"30 minutes sessions with 24 h booking heads-up\n"
"{{< button icon=\"calendar-alt\" label=\"Book support\" data=\"data-cal-link='aurelien-pierre/emergency-ansel-support' data-cal-namespace='emergency-ansel-support'\" >}}\n"
"{{% /card %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Title ##
#: content/support.md:67
#, no-wrap
msgid "Community support"
msgstr ""

#. type: Plain text
#: content/support.md:70
#, no-wrap
msgid "Free user support is typically assumed by other users.\n"
msgstr ""

#. type: Plain text
#: content/support.md:75
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% card title=\"Forum\" icon=\"comments\" %}}\n"
"{{< button url=\"https://community.ansel.photos\" icon=\"users\" label=\"Community discussions\" >}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/support.md:80
#, no-wrap
msgid ""
"{{% card title=\"Chat\" icon=\"comment-dots\" %}}\n"
"{{< button url=\"https://matrix.to/#/#ansel:matrix.org\" icon=\"envelope\" label=\"Matrix chat\" >}}\n"
"{{% /card %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Title ##
#: content/support.md:82
#, no-wrap
msgid "Bugs and oddities"
msgstr ""

#. type: Plain text
#: content/support.md:94
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% card title=\"Bugs\" icon=\"bug\" %}}\n"
"Everything that leads to the software crashing, producing invalid output or unusable core features is a bug.\n"
"{{< button url=\"https://github.com/aurelienpierreeng/ansel/issues/\" icon=\"github fab\" label=\"Bug tracker\" >}}\n"
"{{% /card %}}\n"
"{{% card title=\"Questions\" icon=\"question\" %}}\n"
"If a feature seems to have been removed or to work differently, that might be a redesign, and there is always a reason behind.\n"
"{{< button url=\"https://community.ansel.photos/discussions-category?category=7\" icon=\"question\" label=\"Ask a question\" >}}\n"
"{{% /card %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Title ##
#: content/support.md:96
#, no-wrap
msgid "Developer support"
msgstr ""

#. type: Plain text
#: content/support.md:99
#, no-wrap
msgid "If you are considering joining forces for development and debugging, here is how I work.\n"
msgstr ""

#. type: Plain text
#: content/support.md:104
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% card title=\"Guidelines\" icon=\"code-branch\" %}}\n"
"{{< button url=\"/en/contribute\" icon=\"github fab\" label=\"Dev wiki\" >}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/support.md:108
#, no-wrap
msgid ""
"{{% card title=\"Dev mentorship\" icon=\"user-friends\" %}}\n"
"{{< button url=\"https://cal.com/aurelien-pierre/developer-mentorship\" icon=\"calendar-alt\" label=\"Book an appointment\" >}}\n"
"{{% /card %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/booking.md:1
#, no-wrap
msgid "Book a training session"
msgstr ""

#. type: Plain text
#: content/booking.md:10
#, no-wrap
msgid "<div class=\"lead my-4 ms-3\">Whether you want personnalized help for your workflow and style, or you need pointers to get started with Ansel, don't stay alone with your issues.</div>\n"
msgstr ""

#. type: Plain text
#: content/booking.md:12
#, no-wrap
msgid "Training sessions & editing classes are given through video-conferencing with screen-sharing, using your own photos, and either Ansel or Darktable.\n"
msgstr ""

#. type: Title ##
#: content/booking.md:13
#, no-wrap
msgid "Appointments"
msgstr ""

#. type: Plain text
#: content/booking.md:16
#, no-wrap
msgid "{{< calcom \"aurelien-pierre\" \"darktable-ansel-editing-class-en\" >}}\n"
msgstr ""

#. type: Title ##
#: content/booking.md:17
#, no-wrap
msgid "Contents"
msgstr ""

#. type: Plain text
#: content/booking.md:20
#, no-wrap
msgid "The course of the session can be adapted by mixing any of the following:\n"
msgstr ""

#. type: Plain text
#: content/booking.md:35
#, no-wrap
msgid ""
"- Ansel & post-processing matters :\n"
"  - Lecture on image processing, signal processing, color science, etc.\n"
"  - Demonstration of Ansel/Darktable on raw photos provided by the student,\n"
"  - Reproduction of visual results (from another software or reference images),\n"
"  - Retouch by the student analysed and commented, with advice for improvement,\n"
"  - Eye training (color casts and mismatches detection),\n"
"  - Mitigation strategies to recover damaged pictures (bad lighting, noise, out-of-focus),\n"
"- General photography matters :\n"
"  - Editing and culling series of pictures,\n"
"  - Image reading and analysis (lighting, composition), artistic direction at post-processing time,\n"
"  - Visual narration and photo essay projects building,\n"
"  - Printing and framing advice (choosing paper, printing process, retouching for reflective media, etc.),\n"
"  - Specialized retouching technics (beauty, HDR, monochrome, color-grading, etc.),\n"
"  - Custom-taylored and comprehensive scene-to-printer photographic workflow.\n"
msgstr ""

#. type: Plain text
#: content/booking.md:37
#, no-wrap
msgid "The typical and suggested process is 1 h of presentation on the teacher's computer, followed by 1 h of guided retouching on the student's computer, through screen sharing. But anything is possible, really. Some commited students came for specific answers on the software and keep coming back to improve their photography skills at large.\n"
msgstr ""

#. type: Plain text
#: content/booking.md:39
#, no-wrap
msgid "Over the years, I have also designed a large body of teaching resources (color charts, schematics, graphs) to help explaining how things behave and work.\n"
msgstr ""

#. type: Title ##
#: content/booking.md:40
#, no-wrap
msgid "Benefits"
msgstr ""

#. type: Plain text
#: content/booking.md:43
#, no-wrap
msgid "With individual training, you get :\n"
msgstr ""

#. type: Plain text
#: content/booking.md:48
#, no-wrap
msgid ""
"- Advice adapted to your particular photographic practice, education, background and skills,\n"
"- First-hand information about the software and how it is intended to work,\n"
"- Technics adapted to your visual style,\n"
"- Theoretical complements directly related to your practice, on a need-to-know basis.\n"
msgstr ""

#. type: Plain text
#: content/booking.md:50
#, no-wrap
msgid "And then, I get :\n"
msgstr ""

#. type: Plain text
#: content/booking.md:55
#, no-wrap
msgid ""
"- Direct feedback regarding the application usability,\n"
"- A better understanding of users needs and challenges,\n"
"- GUI and documentation improving hints,\n"
"- Ideas for new modules.\n"
msgstr ""

#. type: Title ##
#: content/booking.md:56
#, no-wrap
msgid "Your teacher"
msgstr ""

#. type: Plain text
#: content/booking.md:59
#, no-wrap
msgid "<img src=\"https://gravatar.com/avatar/34c543cded16518a500a754423124f30?s=400\" class=\"img-fluid rounded-start-4 float-end ms-3 mt-1 mb-3\" load=\"lazy\">\n"
msgstr ""

#. type: Plain text
#: content/booking.md:61
#, no-wrap
msgid "I am a [portrait and studio photographer](https://photo.aurelienpierre.com/en/portfolio) turned into image-processing developer, obsessed with color expressivity and light shaping.\n"
msgstr ""

#. type: Plain text
#: content/booking.md:63
#, no-wrap
msgid "I have been using Darktable since 2010, and started making tutorials in 2016. In 2018, I began working on improving Darktable code, especially regarding the color pipeline reliability in HDR settings (color constancy through HDR tone mapping). In 2022, I forked Ansel from Darktable 3.8/4.0 because Darktable has taken huge backwards steps in terms of GUI, basic usability, overall stability and maintainability.\n"
msgstr ""

#. type: Plain text
#: content/booking.md:65
#, no-wrap
msgid "I am the designer of the [scene-referred workflow](./workflows/scene-referred/) in Darktable, and the author of the following modules: filmic, color balance RGB, tone equalizer, color calibration, blurs, diffuse or sharpen, censorize, negadoctor. I have created the [Darktable UCS 22 color space](https://eng.aurelienpierre.com/2022/02/color-saturation-control-for-the-21th-century/), to allow color saturation manipulations that don't degrade to neon colors.\n"
msgstr ""

#. type: Plain text
#: content/booking.md:67
#, no-wrap
msgid "I am trained in mechanical engineering, where I specialized in computer simulation of thermodynamics, hence my involvement in some of the most maths-heavy topics of image processing. [I play 3 music instruments](https://soundcloud.com/aurelien-pierre) (piano, nyckelharpa, Irish whistles), I compose, improvise and have taught on-and-off the piano for a decade.\n"
msgstr ""

#. type: Plain text
#: content/booking.md:69
#, no-wrap
msgid "Music and photography share more than you would think : we operate a medium through technics, guided by theory, hoping to create something personal and touching at the end. From this, we should separate the goals from the means, learn to master the instruments through relentless training, and break free from the useless dichotomy between technics and arts. The point of mastering technics is to stop thinking about it and achieve the results we have in mind. Now, photography being non-performative, the lack of technical craftsmanship can be hidden by trial-and-errors processes and careful culling/editing, but that can end up being very unreliable and the feeling of constantly battling against hardware and software can be very frustrating.\n"
msgstr ""

#. type: Plain text
#: content/booking.md:71
#, no-wrap
msgid "I build Ansel as I would like my music instruments to be built : with state-of-the-art technics and science serving artistic expression, such that the creative process could focus on expressivity and get the technical concerns mostly out of the way.\n"
msgstr ""

#. type: Title ##
#: content/booking.md:72
#, no-wrap
msgid "Testimonials"
msgstr ""

#. type: Plain text
#: content/booking.md:75
#, no-wrap
msgid "<div class=\"my-3\">\n"
msgstr ""

#. type: Plain text
#: content/booking.md:79
#, no-wrap
msgid ""
"{{< testimonial name=\"Ricky Moon\" url=\"https://rickymoon.com/\" location=\"USA\" >}}\n"
"It’s my custom to seek out and learn from only the very best in any field of study. The numerous and ongoing private consultations with Aurélien not only meet but exceed my expectations. In Aurélien there is a rare and wonderful balance of expertise spanning the full spectrum from the technical to the aesthetic. His eagle eye for detail, combined with a passion, and caring demeanor is inspiring. Deep discussions of putting \"how\" in the service of the \"why\" keeps me fueled to iterate my photography in the pursuit of excellence. If that resonates with you, then I highly recommend booking Aurélien time.\n"
"{{< /testimonial >}}\n"
msgstr ""

#. type: Plain text
#: content/booking.md:83
#, no-wrap
msgid ""
"{{< testimonial name=\"Anna Kowalska\" location=\"Poland\" >}}\n"
"I am a hobby photographer and use to edit JPEGs from camera using ACDSee. When I understood that JPEGs were limiting me, I wanted to take a leap and use RAWs for editing but I was lost with no starting point in darktable. After trying to watch videos and read articles, I was getting somewhere but it was still daunting. I took a lesson with Aurelien and it was all I needed to understand to get good results. Now all my photos are edited in darktable from RAWs.\n"
"{{< /testimonial >}}\n"
msgstr ""

#. type: Plain text
#: content/booking.md:87
#, no-wrap
msgid ""
"{{< testimonial name=\"Hubert Kowalski\" location=\"Poland\" >}}\n"
"I knew about darktable for a long time, but only used it a couple of times a year. After watching several hours of videos on Youtube, my results were ok-ish but it sill was neither as easy nor as fast as expected. I asked Aurelien for a lesson, where I managed to quickly understand concepts and principles guiding processing. Now my edits take far less time than previously and I am able to produce consistently good results.\n"
"{{< /testimonial >}}\n"
msgstr ""

#. type: Plain text
#: content/booking.md:89 content/_index.md:33 content/_index.md:253
#: content/_index.md:303 content/_index.md:332 content/_index.md:351
#: content/_index.md:384
#, no-wrap
msgid "</div>\n"
msgstr ""

#. type: Title ##
#: content/booking.md:91
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: content/booking.md:96
#, no-wrap
msgid ""
"1. Internet access allowing HD videoconferencing (minimum 1 Mb/s, ideally 4 Mb/s, up and down),\n"
"2. Have photographs as raw files to edit,\n"
"3. Upload the pictures to edit on [my private cloud](https://cloud.apmlt.net/s/YAdfYajPkE5nLyW) at least 24 h in advance,\n"
"4. A working account for a videoconferencing service, among Skype, Jitsi Meet, Google Meet, Element call, Discord (your choice).\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/website/index.md:1
#, no-wrap
msgid "Websites"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:7
#, no-wrap
msgid "Ansel website is built using [Hugo 0.146](https://github.com/gohugoio/hugo/releases/tag/v0.146.7). This is a static website generator that allows to build very fast website from Markdown files. A custom template and a lot of custom shortcodes have been built for Ansel. You will need to [install Hugo extended version](https://gohugo.io/installation/) on your computer first, although minor changes can be made directly to the Markdown files without building the whole website.\n"
msgstr ""

#. type: Title ##
#: content/contribute/website/index.md:8
#, no-wrap
msgid "Getting the source code"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:10
#, no-wrap
msgid "This website"
msgstr ""

#. type: Fenced code block (bash)
#: content/contribute/website/index.md:12
#, no-wrap
msgid ""
"$ git clone https://github.com/aurelienpierreeng/ansel-website\n"
"# Stored for example in /home/user/dev/ansel-website\n"
"$ cd ansel-website\n"
"$ sh build-modules.sh\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:19
#, no-wrap
msgid "Ansel doc"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:22
#, no-wrap
msgid "Ansel Doc is an important part of the Ansel website, but since it's under a different license and forked from GNU/GPL dtdocs, it can't be on this repo. We want to edit both as a pack but we need to be able to commit them separately on different repositories. Here is the solution.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:24
#, no-wrap
msgid "Ansel doc is fetched automatically as a module of this website on your disk as part of the `build-modules.sh` script above, which also auto-generates the translated pages through `.po` files. You will find it in the local folder of the website, under `_vendor/github.com/aurelienpierreeng/ansel-doc/`. No file should be manually edited there, this is only for auto-generated content.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:26
#, no-wrap
msgid "To edit Ansel docs, do\n"
msgstr ""

#. type: Fenced code block (bash)
#: content/contribute/website/index.md:27
#, no-wrap
msgid ""
"$ git clone https://github.com/aurelienpierreeng/ansel-doc\n"
"# Stored for example in /home/user/dev/ansel-doc\n"
"$ cd ansel-doc\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:34
#, no-wrap
msgid "And then, edit the (English) content of `ansel-doc/content`.\n"
msgstr ""

#. type: Title ##
#: content/contribute/website/index.md:35
#, no-wrap
msgid "Interactive editing/Live preview"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:37
#, no-wrap
msgid "Start the development server"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:40
#, no-wrap
msgid "Hugo lets you open a rendered version of the website, on a local development server, to preview your changes into your web browser.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:42
#, no-wrap
msgid "If you only want to edit this website, run from `./ansel-website` directory:\n"
msgstr ""

#. type: Fenced code block (bash)
#: content/contribute/website/index.md:43
#, no-wrap
msgid "hugo server --disableFastRender\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:48
#, no-wrap
msgid "If you want to edit the docs and see the results in realtime as part of this website, after you cloned the docs (see previous step), run from `./ansel-website` directory:\n"
msgstr ""

#. type: Fenced code block (bash)
#: content/contribute/website/index.md:49
#, no-wrap
msgid "env HUGO_MODULE_REPLACEMENTS=\"github.com/aurelienpierreeng/ansel-doc -> ../../ansel-doc/\" hugo server --disableFastRender\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:54
#, no-wrap
msgid "This trick will dynamically load the docs module from your local folder rather than from Github, which means the local changes done to the docs will immediately appear into the main website through your development server.\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:55
#, no-wrap
msgid "Updating websites translations"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:58
#, no-wrap
msgid "See [Translating](../translating.md).\n"
msgstr ""

#. type: Title ##
#: content/contribute/website/index.md:59
#, no-wrap
msgid "Editing files"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:61
#, no-wrap
msgid "Open Obsidian"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:64
#, no-wrap
msgid "Open `./ansel-website/content` as an Obsidian vault. Obsidian is able to resolve folder symlinks as if they were local folders, so we basically see the website as a whole, which makes it easier to make internal links between doc and website in the editor.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:66
#, no-wrap
msgid "Working in Obsidian is significantly nicer than working in VS Code to edit \"text\" text (as opposed to code text in monospace), since the editor is less bloated and monospace fonts are eye-straining after a couple of hours for full paragraphs.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:71
#, no-wrap
msgid ""
"- Hugo Markdown doesn't support [Obsidian call-outs](https://help.obsidian.md/How+to/Use+callouts). You have to use the alerts boxes shown above as Hugo shortcodes, but they will not render in Obsidian,\n"
"- Hugo doesn't support [Obsidian wikilinks](https://help.obsidian.md/How+to/Internal+link), so you will have to stick to usual Markdown links with relative pathes. That said, Obsidian provides paths auto-completion for those.\n"
"- Obsidian doesn't support [Markdown definition lists](https://www.markdownguide.org/extended-syntax/#definition-lists), but you can still use them (they will just not be rendered in previews),\n"
"- Obsidian doesn't support [Markdown headings IDs](https://www.markdownguide.org/extended-syntax/#heading-ids),\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:73
#, no-wrap
msgid "However:\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:76
#, no-wrap
msgid ""
"- Obsidian supports Hugo tags in Yaml frontmatter, and implements them in a much nicer way that gives a lot more sense to horizontal content linking,\n"
"- Obsidian supports Hugo [aliases](https://help.obsidian.md/How+to/Add+aliases+to+note) for pages redirection,\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:77
#, no-wrap
msgid "Dealing with broken links"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:80
#, no-wrap
msgid "There is an extension for that : https://github.com/graydon/obsidian-dangling-links. Once installed, it shows the links that point to no existing file throughout the whole vault, including main website and doc :\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:82
#, no-wrap
msgid "![](obsidian-screenshots-broken-links.jpg)\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:84
#, no-wrap
msgid "In the node graph view, broken links also appear by their path `../../stuff.md` instead of appearing by their filename.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:86
#, no-wrap
msgid "In each page editor, it is possible to see what pages are linking the page currently opened, including the headings anchor, which is useful before changing headings and therefore destroying internal links :\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:88
#, no-wrap
msgid "![](obsidian-screenshots-external-links.jpg)\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:90
#, no-wrap
msgid "Improving content meshing"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:93
#, no-wrap
msgid "Horizontal linking, through tags and internal links, is just as important as vertical linking, following hierarchical trees.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:95
#, no-wrap
msgid "Obsidian can show the vault-wise available tags for reuse:\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:97
#, no-wrap
msgid "![](obsidian-screenshots-available-tags.jpg)\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:99
#, no-wrap
msgid "It can also show the best candidate internal links for each keyword in the page, under the \"Unlinked mentions\" collapsible:\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:101
#, no-wrap
msgid "![](obsidian-screenshots-available-links.jpg)\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:103
#, no-wrap
msgid "Checking content organization"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:106
#, no-wrap
msgid "It's often hard to follow the chaining of headings in a Markdown page, when using a typical code editor. Obsidian has an \"outline\" widget that allows to keep the table of contents in sight when writing, to ensure the hierarchy of headings is consistent :\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:108
#, no-wrap
msgid "![](obsidian-screenshots-document-outline.jpg)\n"
msgstr ""

#. type: Title ##
#: content/contribute/website/index.md:110
#: content/contribute/coding-style.md:360
#, no-wrap
msgid "Guidelines"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:113
#, no-wrap
msgid "The documentation is not a manual or a course. It should answer the questions :\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:117
#, no-wrap
msgid ""
"- \"what is the GUI doing ?\"\n"
"- \"how can I configure the software ?\"\n"
"- \"what are the bottlenecks, caveats, limitations and traps ?\".\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:119
#, no-wrap
msgid "The documentation expects the reader to know **what** to do and will explain **how** to do it. Start-to-end workflows, tutorials, scientific background etc., aka the **what** and the **why** go on the website ([resources](../../resources/_index.md), [workflows](../../workflows/_index.md)).\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:120
#, no-wrap
msgid "Content folder"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:123
#, no-wrap
msgid "The content folder is located in the `content/` directory and the structure of folders and sub-folders will produce the structure of sections and sub-sections on the website. Files are written in Markdown and end with `.md` extension. Each file should have the following header (frontmatter):\n"
msgstr ""

#. type: Fenced code block (yaml)
#: content/contribute/website/index.md:124
#, no-wrap
msgid ""
"---\n"
"title: This page title\n"
"date: 2022-12-04T02:19:02+01:00\n"
"lastmod: 2022-12-31\n"
"draft: false\n"
"weight: 120\n"
"tags:\n"
"    - color science\n"
"    - pipeline\n"
"---\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:142
#, no-wrap
msgid ""
"- The title is mandatory. Please use initial capitals, like in real language.\n"
"- The date is set once for all at the creation of the page and should never change after.\n"
"- Update the `lastmod` date with today's date everytime you update a file, and add it if not present. On the internet, every content is perishable and this helps readers to guess wether the page is still relevant at the time of reading or not.\n"
"- `draft` set to `true` means the page will be on the repository (in the source code) but will not appear on the website front-end. Set to `false`, the page is visible on front-end.\n"
"- `tags` are optional but welcome. The content is, by default, organized vertically (hierarchically). Tags help to create horizontal (thematic) links between pages. Relevant tags could be \"film processing\", \"HDR\", \"monochrome\", etc. Reuse existing tags in priority. Tags should always be a list, even when there is only one (otherwise Hugo build breaks).\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:144
#, no-wrap
msgid "Internal links"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:147
#, no-wrap
msgid "Internal links should use relative paths from the current file whenever possible, which is not Hugo default behaviour. The purpose is to be able to follow relative links on the local file system from any modern text editor, like in any `README.md` file. We use our own code to reconnect those relative links to files with Hugo website structure (after compilation).\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:149
#, no-wrap
msgid "When building the website, internal links are checked and a critical error (aborting compilation) will be thrown if a page can't be found from internal links. You need to watch them out. Non-critical errors (aka `WARNING [languages] REF_NOT_FOUND`) can also be shown in a console because we twist the Hugo linker in a non-standard way, but those can be disregarded.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:151
#, no-wrap
msgid "Example of internal links:\n"
msgstr ""

#. type: Fenced code block (markdown)
#: content/contribute/website/index.md:152
#, no-wrap
msgid ""
"[Filmic](../../module-reference/processing-modules/filmic-rgb.md)\n"
"[Filmic](./filmic-rgb.md)\n"
"[Some page](./section/index.md)\n"
msgstr ""

#. type: Title ####
#: content/contribute/website/index.md:158
#, no-wrap
msgid "Page anchors"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:161
#, no-wrap
msgid "If you make links to page anchors, like `/my-post.md#some-heading`, be sure to __not__ insert a slash `/` between the page slug and the hashtag `#` in your Markdown code, or else the file will be taken for a directory and not found.\n"
msgstr ""

#. type: Title ####
#: content/contribute/website/index.md:162
#, no-wrap
msgid "Absolute links"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:165
#, no-wrap
msgid "Say you want to link to the [support](../../support.md) page. Here are all the possibilitie to create a link to that page:\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:170
#, no-wrap
msgid ""
"- `[support](/support/)` -> valid for Hugo, but works only after the website is compiled, so it can't be debugged easily in code editor. __please avoid__\n"
"- `[support](/support.md)` -> invalid for Hugo, will work as a side-effect of our custom link processing, but can't be debugged at all in code editor. __please avoid__\n"
"- `[support](./support.md)` -> invalid for Hugo, works as intended by our custom link processing if called from the index page, for example. __please use this__\n"
"- `[support](../support.md)` -> invalid for Hugo, works as intended by our custom link processing if called from a subfolder of the site, like `/contribute`. __please use this__\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:172
#, no-wrap
msgid "If a page is in what Hugo calls a [page or section bundle](https://gohugo.io/content-management/page-bundles/), please use the link to its `index.md` or `_index.md` file.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:179
#, no-wrap
msgid ""
"Do:\n"
":   ```markdown\n"
"    [user manual](/doc/_index.md)\n"
"    [user manual](./doc/_index.md)\n"
"    [user manual](../../doc/_index.md)\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:185
#, no-wrap
msgid ""
"Don't (even if it technically works):\n"
":   ```markdown\n"
"    [user manual](/doc)\n"
"    [user manual](/doc/)\n"
"    ```\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:187
#, no-wrap
msgid "External links"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:190
#, no-wrap
msgid "External links are not checked because that would take too much time at building, and building may happen without network access anyway. Always use `https://` in the external URLs when possible.\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:191
#, no-wrap
msgid "Titles (headings)"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:194
#, no-wrap
msgid "H1 titles (encoded `# Title` in Markdown) are reserved for page titles and each page should have exactly one H1. darktable-doc messed up big time here by using H1 as section titles, this is both a SEO and an accessibility mistake. The web is semantic because it's designed for crawlers and screen readers just as much as for humans.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:196
#, no-wrap
msgid "Be aware that Hugo automatically generates anchor links for headings, using the text of the heading. Thus, refrain from using symbols in headings, especially (back)slashes, which will mess-up the anchor links.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:198
#, no-wrap
msgid "Also be aware that these headings anchors may be used in other pages to make direct links. Changing the text of an heading will break its anchor and may break external links. To avoid breaking anchors in external links, you can change the heading text but force their ID to the previous, like so:\n"
msgstr ""

#. type: Fenced code block (markdown)
#: content/contribute/website/index.md:199
#, no-wrap
msgid "### My New Heading {#my-old-heading}\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:204
#, no-wrap
msgid "This will preserve external links to `/my-post/#my-old-heading`. [See the details…](https://www.markdownguide.org/extended-syntax/#heading-ids)\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:205
#, no-wrap
msgid "Embedding images"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:208
#, no-wrap
msgid "Hugo treats images as page assets. There are global assets, for images reused on several pages, stored in an `assets/` subfolder of the main source code folder, and local assets, stored in the same folder as the page using them.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:210
#, no-wrap
msgid "As for internal links, everything needs to be linked relatively to the source code as hosted on the local filesystem, not relatively to the compiled HTML.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:212
#, no-wrap
msgid "See [how to translate images](../translating.md#translating-images).\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:213
#, no-wrap
msgid "Screenshots"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:216
#, no-wrap
msgid "Screenshots are the basics of any front-end software documentation. The darktable-doc maintainers refuse them on the ground that they can't be translated and they will be soon be obsolete given the frequency of GUI hanges, but it's a huge pedagogic mistake. Even in the wrong language, screenshots help to see what to look for in the window. Use them. They will get obsolete and may not be translated, just as the rest of the text.\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:217
#, no-wrap
msgid "Info, Warnings, Alerts"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:220
#, no-wrap
msgid "The Ansel theme from the main website provides shortcodes to create alerts and info boxes using Hugo templating system. Here is the code:\n"
msgstr ""

#. type: Fenced code block (html)
#: content/contribute/website/index.md:221
#, no-wrap
msgid ""
"{{</* warning */>}}\n"
"This is where you say what users should be aware of, because what may sound like a good idea in general may be really bad in some circumstances.\n"
"{{</* /warning */>}}\n"
msgstr ""

#. type: Fenced code block (html)
#: content/contribute/website/index.md:227
#, no-wrap
msgid ""
"{{</* note */>}}\n"
"Your side note here.\n"
"{{</* /note */>}}\n"
msgstr ""

#. type: Fenced code block (html)
#: content/contribute/website/index.md:233
#, no-wrap
msgid ""
"{{</* advice */>}}\n"
"Your friendly advice here.\n"
"{{</* /advice */>}}\n"
msgstr ""

#. type: Fenced code block (html)
#: content/contribute/website/index.md:239
#, no-wrap
msgid ""
"{{</* danger */>}}\n"
"This is where you remind users that they are free to do shit but there will be consequences.\n"
"{{</* /danger */>}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:246
#, no-wrap
msgid "The content of the boxes can use Markdown too.\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:248
#, no-wrap
msgid "Before/after sliders"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:251
#, no-wrap
msgid "Again, using Hugo templating system, you can display before/after sliders where both images are overlayed. This resembles the Ansel & darktable darkroom snapshot feature and can efficiently explain the effect of modules and settings in a way that users can reproduce in the GUI. Both before and after images need to have the same size in pixels.\n"
msgstr ""

#. type: Fenced code block (html)
#: content/contribute/website/index.md:252
#, no-wrap
msgid ""
"{{</* compare after=\"./img-after.jpg\" before=\"./img-before.jpg\" */>}}\n"
"Your slider legend goes here.\n"
"{{</* /compare */>}}\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:258
#, no-wrap
msgid "Maths"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:261
#, no-wrap
msgid "The docs support MathJax configured for LaTeX syntax support. Though the goal is not to write scientific litterature, there are some algorithms made of multiplications and additions that are more easily shown as equations rather than writing blocks of texts.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:263
#, no-wrap
msgid "Inline LaTeX should be enclosed in `$`, block equations enclosed in `$$`. If you use LaTeX, you need to notify Hugo to append the Mathjax script on the page by setting `latex: true` in the header/frontmatter of the Markdown page.\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:264
#, no-wrap
msgid "Mermaid graphs"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:267
#, no-wrap
msgid "Ansel makes an heavy use of pipelines, and those are best described with flowcharts. Mermaid.js is now supported natively on Github and within Visual Studio Code and is great for that purpose. You can [try it visually here](https://mermaid.live/edit#pako:eNpVkE1rhDAQhv9KmFML-gc8FLra7sXSQvdU9TDVcRPWfBBHlkX97002FNqcQp73mQzvCr0dCAo4e3RSnKrWiHCem1J6NbPGuRN5_rQdiYW2hm6bODwcrZildU6Z82PKH2JIlGsdYyRYKnPZEyrv_ruhTVRNjY6t6_6S09Vu4qVRHzKM_0-kp2C9NiMWI-Y9elGi7yADTV6jGsLaaxRaYEmaWijC1dDCHqcWsoTGyV57iZ4jXtP8FiTrqcZvmuZksV-CH2lYew9f4ML282Z6KCLKYHEDMlUKQ1H695EGxda_pQbvRWbg0HxZGyIjTjPtPxIKcek) and copy-paste the code of the graphs within Markdown code blocks like this:\n"
msgstr ""

#. type: Fenced code block (markdown)
#: content/contribute/website/index.md:268
#, no-wrap
msgid ""
"    ```mermaid\n"
"    graph TD\n"
"        A[Christmas] -->|Get money| B(Go shopping)\n"
"        B --> C{Let me think}\n"
"        C -->|One| D[Laptop]\n"
"        C -->|Two| E[iPhone]\n"
"        C -->|Three| F[fa:fa-car Car]\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:280
#, no-wrap
msgid "This renders:\n"
msgstr ""

#. type: Fenced code block (mermaid)
#: content/contribute/website/index.md:281
#, no-wrap
msgid ""
"graph TD\n"
"    A[Christmas] -->|Get money| B(Go shopping)\n"
"    B --> C{Let me think}\n"
"    C -->|One| D[Laptop]\n"
"    C -->|Two| E[iPhone]\n"
"    C -->|Three| F[fa:fa-car Car]\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:291
#, no-wrap
msgid "Icons from [Font Awesome v5](https://fontawesome.com/v5/search?o=r&m=free&s=solid) are supported by Ansel main website and documentation, using the syntax `fa:fa-YOUR-ICON-CODE` as shown in the example above. Use [Font Awesome v5 search engine](https://fontawesome.com/v5/search?o=r&m=free&s=solid) to get the `fa-` code of the icons you may use.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:293
#, no-wrap
msgid "Mermaid graphs are rendered client-side in SVG at display size and can be translated as text. Hugo is configured to detect these graphs automatically and load the javascript library only when needed. Github can also render Mermaid graphs natively, when displaying Markdown files.\n"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:295
#, no-wrap
msgid "Changing pages URL"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:298
#, no-wrap
msgid "Sometimes, it makes sense to reorganize the content and to changes the path of some pages. To not break external links, you must record the old url of the new page as an alias, in the frontmatter of the new page like so:\n"
msgstr ""

#. type: Fenced code block (toml)
#: content/contribute/website/index.md:299
#, no-wrap
msgid ""
"aliases:\n"
"    - /my-old-url/\n"
"    - /another-even-older-url\n"
msgstr ""

#. type: Title ##
#: content/contribute/website/index.md:305
#, no-wrap
msgid "Notes"
msgstr ""

#. type: Title ###
#: content/contribute/website/index.md:307
#, no-wrap
msgid "RSS feed"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:310
#, no-wrap
msgid "The documentation has an RSS localized feed, for now :\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:313
#, no-wrap
msgid ""
"- https://ansel.photos/en/doc/index.xml,\n"
"- https://ansel.photos/fr/doc/index.xml.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:315
#, no-wrap
msgid "This is unusual and is meant to help users keep track of changes and evolutions, by subscribing to the RSS feed or by connecting it with bots.\n"
msgstr ""

#. type: Plain text
#: content/contribute/website/index.md:316
#, no-wrap
msgid "The date of the documentation pages set in the RSS feed is the `lastmod` parameter, aka the time of last modification. Since RSS doesn't have a `jast modified date`, it's the best I have found for the time being.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/coding-style.md:1
#, no-wrap
msgid "Coding style"
msgstr ""

#. type: Title ##
#: content/contribute/coding-style.md:7 content/contribute/audience.md:27
#, no-wrap
msgid "Values"
msgstr ""

#. type: Title ###
#: content/contribute/coding-style.md:9
#, no-wrap
msgid "If it ain't broken, don't fix it"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:12
#, no-wrap
msgid "Too much of Darktable \"design\" has started with \"it would be cool if we could ...\". I'll tell you what's cool : hanging good pictures of yours on your walls ASAP. Visual arts are not performing art (like music or theater), so only the result matters. Everything that comes before is overhead, and you typically want to keep it minimal. That's not to say that the process can't be enjoyed in itself. However, to enjoy the process, you need to master your tools and to bend them to __your__ will, otherwise you only fight them and the whole process amounts to frustration. Problem is, Darktable \"design\" puts too much effort into being different for the sake of it.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:14
#, no-wrap
msgid "In this process of adding \"cool new stuff\", Darktable has broken keyboard shortcuts and a lot of basic GUI behaviours, replacing clean code with spaghetti and adding more GUI clutter without ever pruning stuff.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:16
#, no-wrap
msgid "__Ansel__ has an [explicit](./design.md) design process that mandatorily starts with defined problems met by defined users. Turns out the quantity of code to write is inversely proportionnal to the amount of thinking you have done on your solution, typically to spot the root problem out of what users tell you, and find the simplest path to solution (which is often not even a software solution...).\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:18
#, no-wrap
msgid "But bugs don't wait for you in the thinking, they wait only in the code you wrote. So, the more you think, the less you code, the less maintainance burden you create for yourself in the future. But of course... you need to have enough time to think things through. Essentially, that means bye bye to Saturday-afternoon, amateur-driven hacking !\n"
msgstr ""

#. type: Title ###
#: content/contribute/coding-style.md:19
#, no-wrap
msgid "Don't extend it if you can't simplify it first"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:22
#, no-wrap
msgid "A lot of Darktable hacking has been done by copy-pasting code, from other parts of the software, or even from other projects, mostly because contributors don't have time nor skills to undertake large rewrites. This triggers code duplication and increases the length of functions, adding internal branching and introducing `if` and `switch case` nested sometimes on more than 4 levels, making the structure and logic more difficult to grasp and bugs more difficult (and frustrating) to chase, while being more likely to happen.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:24
#, no-wrap
msgid "In any case, when the code responsible for existing features is only growing (sometimes by a factor 10 over 4 years), it raises serious questions regarding future maintainablity, in a context where contributors stick around for no more than a couple of years, and developers have a limited time to invest. It's simply irresponsible, as it sacrifices long-term maintainability for shiny new things.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:26
#, no-wrap
msgid "Simplifying and generalizing code, through clean APIs, before adding new features is a must and Ansel only accepts code I personaly understand and have the skills to maintain. KISS.\n"
msgstr ""

#. type: Title ##
#: content/contribute/coding-style.md:27
#, no-wrap
msgid "Basic coding logic"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:30
#, no-wrap
msgid "Pull requests that don't match the minimum code quality requirements will not be accepted. These requirements aim at ensuring long-term maintainability and stability by enforcing clear, legible code structured with a simple logic.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:40
#, no-wrap
msgid ""
"1. Procedures need to be broken into unit, reusable functions, whenever possible. Exception to this are specialized linear procedures (no branching) doing tasks too specific to be reused anywhere, but in this case use comments to break down the procedures in \"chapters\" or steps that can be easily spotted and understood.\n"
"2. Functions should achieve only one task at a time. For example, GUI code should not be mixed with SQL or pixel-processing code. Getters and setters should be different functions.\n"
"3. Functions should have only one entry and one exit point (`return`). The only exceptions accepted are an early return if the memory buffer on which the function is supposed to operate is not initialized or if a thread mutex lock is already captured.\n"
"4. Functions should have legible, explicit names and arguments name that advertise their purpose. Programs are meant to be read by humans, if you code for the machine, do it in binary.\n"
"5. Functions may only nest up to 2 `if` conditional structures. If more than 2 nested `if` are needed, the structure of your code needs to be reevaluated and probably broken down into more granular functions.\n"
"6. `if` should only test uniform cases like the state or the value of ideally one (but maybe more) variable(s) of the same type. If non-uniform cases need to be tested (like `IF user param IS value AND picture buffer IS initialized AND picture IS raw AND picture HAS embedded color profile AND color profile coeff[0] IS NOT NaN`), they should be deferred to a checking function returning a `gboolean` `TRUE` or `FALSE` and named properly so fellow developers understand the purpose of the check without ambiguity on cursory code reading, like `color_matrix_should_apply()`. The branching code will then be `if(color_matrix_should_apply()) pix_out = dot_product(pix_in, matrix);`\n"
"7. Comments should mention why you did what you did, like your base assumptions, your reasons and any academic or doc reference you used as a base (DOI and URLs should be there). Your code should tell what you did explicitly. If you find yourself having to explain what your code is doing in comments, usually it's a sign that your code is badly structured, variables and functions are ill-named, etc.\n"
"8. Quick workarounds that hide issues instead of tackling them at their root will not be accepted. If you are interested in those, you might consider contributing to upstream darktable instead. The only exceptions will be if the issues are blocking (make the soft crash) and no better solution has been found after some decent amount of time spent researching.\n"
"9. Always remember that the best code is the most simple. KISS. To achieve this goal, it's usually better to write code from scratch rather than to try mix-and-matching bits of existing code through heavy copy-pasting.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:42
#, no-wrap
msgid "In an ideal world, any PR would follow [design patterns best practices](https://en.wikipedia.org/wiki/Software_design_pattern).\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:44
#, no-wrap
msgid "Some random pieces of wisdom from the internet :\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:48
#, no-wrap
msgid ""
"{{< quote author=\"Brian W. Kernighan\" class=\"full-width ps-0 ms-0 my-2\" >}}\n"
"Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?\n"
"{{< / quote >}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:52
#, no-wrap
msgid ""
"{{< quote author=\"Martin Fowler, Refactoring: Improving the Design of Existing Code\" class=\"full-width ps-0 ms-0 my-2\" >}}\n"
"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\n"
"{{< /quote >}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:56
#, no-wrap
msgid ""
"{{< quote author=\"John Woods\" class=\"full-width ps-0 ms-0 my-2\" >}}\n"
"Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\n"
"{{< /quote >}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:60
#, no-wrap
msgid ""
"{{< quote author=\"Martin Fowler, Refactoring: Improving the Design of Existing Code\" class=\"full-width ps-0 ms-0 my-2\" >}}\n"
"Whenever I have to think to understand what the code is doing, I ask myself if I can refactor the code to make that understanding more immediately apparent.\n"
"{{< /quote >}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:69
#, no-wrap
msgid ""
"{{< quote author=\"[Rich Skrenta](http://www.skrenta.com/2007/05/code_is_our_enemy.html)\"  class=\"full-width ps-0 ms-0 my-2\" >}}\n"
"<div class=\"mb-3\">\n"
"Code is bad. It rots. It requires periodic maintenance. It has bugs that need to be found. New features mean old code has to be adapted. The more code you have, the more places there are for bugs to hide. The longer checkouts or compiles take. The longer it takes a new employee to make sense of your system. If you have to refactor there’s more stuff to move around.\n"
"</div>\n"
"<div>\n"
"Code is produced by engineers. To make more code requires more engineers. Engineers have n^2 communication costs, and all that code they add to the system, while expanding its capability, also increases a whole basket of costs. You should do whatever possible to increase the productivity of individual programmers in terms of the expressive power of the code they write. Less code to do the same thing (and possibly better). Less programmers to hire. Less organizational communication costs.\n"
"</div>\n"
"{{< /quote >}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:73
#, no-wrap
msgid ""
"{{< quote author=\"[John Byrd](https://www.quora.com/profile/John-Byrd-2)\" class=\"full-width ps-0 ms-0 my-2\" >}}\n"
"Good programmers write good code. Great programmers write no code. Zen programmers delete code.\n"
"{{< /quote >}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:75
#, no-wrap
msgid "<div class=\"clearfix\"></div>\n"
msgstr ""

#. type: Title ##
#: content/contribute/coding-style.md:76
#, no-wrap
msgid "Specific C coding logic"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:79
#, no-wrap
msgid "Ansel as well as darktable are written in C. This language is meant for advanced programmers to write fast bugs in OS and system-level applications. It gives too much freedom to do harmful things and can't be debugged before running the program, or writing your own tests (which can be bugged themselves, or can bias the kind of bugs they let through, and anyway, nobody writes tests). Yet most contributors are not trained for C, many of them are not even professional programmers (though professional C programmers should probably not be let anywhere nead end-user applications), so C is a dangerous language for any open source app.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:81
#, no-wrap
msgid "C will let you write in buffers that have not been allocated (resulting in `segfault` error) and will let you free them more than once, but will not free buffers when they are not needed anymore (resulting in memory leaks if you forgot to do it manually). Problem is, since buffer alloc/free may be far away (in the program lifetime as in the source code) from where you use them, it's easy to mess that up. C will also let you cast any pointer to any data type, which enables many programmer mistakes and data corruption. The native string handling methods are not safe _(for reasons I never bothered to understand)_, so we have to use the GLib ones to prevent security exploits.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:83
#, no-wrap
msgid "Basically, C makes you your own and worst enemy, and it's on you to observe safety rules which wisdom will become clear only once you break them. Much like the bugs in a C program. Consider that you write your code to be read by dummies who never programmed in C before.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:85
#, no-wrap
msgid "You also need to keep in mind that the compiler will do most optimizations for you, but will be super conservative about them. The rule of thumb is, if your code is easily understandable by an human (simple logic), it will be properly understood by the compiler, which will take the appropriate optimization measures. The other way around, manual optimizations in the code, that yield cryptic code assumed to be faster on single-threaded systems, usually backfires and yields slower programs after compilation.\n"
msgstr ""

#. type: Title ###
#: content/contribute/coding-style.md:86
#, no-wrap
msgid "Patterns and structures"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:109
#, no-wrap
msgid ""
"1. `for` loops are reserved for iterating over arrays of size known beforehand, so the number of looping steps is known. Stretching that logic, they can also be used to iterate over `GList *` items (which have no size property since they are dynamically allocated), although this checks if each item `(GList *)->next` is not `NULL`. `for` loops should generally not use `break` or `return` statements inside their control flow, unless the loop is looking for a specific item inside the array and returns is as soon as it is found. If your loop has a stopping condition, use `while`.\n"
"2. C is not an object-oriented language, but you can and should use OO logic when relevant in C by using structures to store data and pointers to methods, then uniform [getters and setters](https://en.wikibooks.org/wiki/Object_Oriented_Programming/Getters_and_Setters) to define and access the data.\n"
"2. structures like `while`, `for`, `if`, or `switch` should not be nested over more than 3 (and preferably 2) levels. Use functions if that happens :\n"
"    ```C\n"
"    // Bad\n"
"    void stuff(float *array, char *output)\n"
"    {\n"
"      if(condition)\n"
"      {\n"
"        for(int i = 0; i < 5; i++)\n"
"        {\n"
"          if(array[i] > 1.f)\n"
"            array[i] = ...\n"
"        }\n"
"        output = \"true\";\n"
"      }\n"
"      else\n"
"      {\n"
"        ...\n"
"      }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:131
#, no-wrap
msgid ""
"    // Good\n"
"    char *_process(float *array)\n"
"    {\n"
"      for(int i = 0; i < 5; i++)\n"
"      {\n"
"        if(array[i] > 1.f)\n"
"          array[i] = ...\n"
"      }\n"
"      return \"true\";\n"
"    }\n"
"    void stuff(float *array, char *output)\n"
"    {\n"
"      if(condition)\n"
"      {\n"
"        output = _process(array);\n"
"      }\n"
"      else\n"
"      {\n"
"        output = _something_else(array);\n"
"      }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:141
#, no-wrap
msgid ""
"    ```\n"
"3. Long sequequences of checks should be put in function returning `gboolean` clearly stating what we are checking, so in procedures, we get:\n"
"    ```C\n"
"    gboolean _is_raw(dt_image_t *image)\n"
"    {\n"
"      return (image->flag & DT_RAW == DT_RAW) &&\n"
"             (image->buffer != NULL) &&\n"
"             strcmp(image->ext, \"dng\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:157
#, no-wrap
msgid ""
"    void stuff(dt_image_t *image)\n"
"    {\n"
"      if(_is_raw(image))\n"
"        ...\n"
"      else if(_is_raster(image))\n"
"        ...\n"
"    }\n"
"    ```\n"
"    instead of\n"
"    ```C\n"
"    if((image->flag & DT_RAW == DT_RAW) && (image->buffer != NULL) && strcmp(image->ext, \"dng\"))\n"
"      ...\n"
"    else if(...)\n"
"      ...\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:218
#, no-wrap
msgid ""
"3. Always access data from buffers using the array-like syntax, from their base pointer, instead of using non-constant pointers on which you perform arithmetic. For example, do:\n"
"    ```C\n"
"    float *const buffer = malloc(64 * sizeof(float));\n"
"    for(int i = 0; i < 64; i++)\n"
"    {\n"
"      buffer[i] = ...\n"
"    }\n"
"    ```\n"
"    Do not do:\n"
"    ```C\n"
"    float *buffer = malloc(64 * sizeof(float));\n"
"    for(int i = 0; i < 64; i++)\n"
"    {\n"
"      *buffer++ = ...\n"
"    }\n"
"    ```\n"
"    The latter version is not only less clear to read, but will prevent parallelization and compiler optimizations because the value of the pointer depends on the loop iteration and would need to be shared between threads if any. The former version leads to a memory access logic independent from the loop iteration and can be safely parallelized.\n"
"4. The use of inline variable increments (see a [nightmare example here](https://www.youtube.com/watch?v=_7Wok3JoOcE)) is strictly forbidden, unless it's the only operation of the line. These are a mess making for many programming errors. This is permitted :\n"
"    ```C\n"
"    uint32_t counter;\n"
"    for(int i = 0; i < 64; i++)\n"
"    {\n"
"      if(array[i] > threshold)\n"
"        counter++;\n"
"    }\n"
"    ```\n"
"5. The `case` statements in the `switch` structure should not be additive. Do not do:\n"
"    ```C\n"
"    int tmp = 0;\n"
"    switch(var)\n"
"    {\n"
"      case VALUE1:\n"
"      case VALUE2:\n"
"        tmp += 1;\n"
"      case VALUE3:\n"
"        do_something(tmp);\n"
"        break;\n"
"      case VALUE4:\n"
"        do_something_else();\n"
"        break;\n"
"    }\n"
"    ```\n"
"    On cursory reading, it will not be immediately clear that the `VALUE3` case inherits the clauses defined by the previous cases, especially in situations where there are more cases. Do:\n"
"    ```C\n"
"    int tmp = 0;\n"
"    switch(var)\n"
"    {\n"
"      case VALUE1:\n"
"      case VALUE2:\n"
"        do_something(tmp + 1);\n"
"        break;\n"
"      case VALUE3:\n"
"        do_something(tmp);\n"
"        break;\n"
"      case VALUE4:\n"
"        do_something_else();\n"
"        break;\n"
"    }\n"
"    ```\n"
"    Each case is self-enclosed and the outcome does not depends on the order of declaration of the cases.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:225
#, no-wrap
msgid ""
"7. Sort and store your variables into structures that you pass as function arguments instead of using function with more than 8 arguments. Do not do:\n"
"    ```C\n"
"    void function(float value, gboolean is_green, gboolean is_big, gboolean has_hair, int width, int height, ...)\n"
"    {\n"
"      ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:246
#, no-wrap
msgid ""
"    void main()\n"
"    {\n"
"      if(condition1)\n"
"        function(3.f, TRUE, FALSE, TRUE, 80, 90, ...);\n"
"      else if(condition2)\n"
"        function(3.f, FALSE, TRUE, TRUE, 80, 90, ...);\n"
"      else\n"
"        function(3.f, FALSE, FALSE, FALSE, 110, 90, ...);\n"
"    }\n"
"    ```\n"
"    Do:\n"
"    ```C\n"
"    typedef struct params_t\n"
"    {\n"
"      gboolean is_green;\n"
"      gboolean is_big;\n"
"      gboolean has_hair;\n"
"      int width;\n"
"      int height;\n"
"    } params_t;\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:251
#, no-wrap
msgid ""
"    void function(float value, params_t p)\n"
"    {\n"
"      ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:263
#, no-wrap
msgid ""
"    void main()\n"
"    {\n"
"      params_t p = { .is_green = (condition1),\n"
"                    .is_big = (condition2),\n"
"                    .has_hair = (condition1 || condition2),\n"
"                    .width =  (condition1 || condition2) ? 80 : 110,}\n"
"                    .height = 90 };\n"
"      function(3.0f, p);\n"
"    }\n"
"    ```\n"
"    The former example is taken from [darktable](https://github.com/darktable-org/darktable/blob/master/src/bauhaus/bauhaus.c#L2210-L2251). The copy-pasting of the function calls is unnecessary and the multiplication of positional arguments makes it impossible to remember which is which. It also doesn't show what arguments are constant over the different branches, which will make refactoring difficult. The latter example is not more concise, however the structure not only makes the function easier to call, but the structure declaration allows to explicitly set each argument, with inline checks if needed. The dependence of the input arguments upon the external conditions is also made immediately clear, and the boolean arguments are directly set from the conditions, which will make the program easier to extend in the future and less prone to programming error due to misunderstandings in the variables dependence.\n"
msgstr ""

#. type: Title ###
#: content/contribute/coding-style.md:264
#, no-wrap
msgid "OpenMP optimisations"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:267
#, no-wrap
msgid "Pixels are essentially 4D RGBA vectors. Since 2004, processors have special abilities to process vectors and apply Single Instructions on Multiple Data (SIMD). This allows us to speed-up the computations by processing an entire pixel (SSE2) up to 4 pixels (AVX-512) at the same time, saving a lot of CPU cycles.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:269
#, no-wrap
msgid "Modern compilers have auto-vectorization options that can optimize pure C, and the OpenMP library allows to provide hints to improve that, provided the code is written in a vectorizable way and uses some pragmas are used.\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:271
#, no-wrap
msgid "Write vectorizable code : https://info.ornl.gov/sites/publications/files/Pub69214.pdf\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:273
#, no-wrap
msgid "Best practices for auto-vectorization:\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:283
#, no-wrap
msgid ""
"* avoid branches in loops that change the control flow. Use inline statements like `absolute = (x > 0) ? x : -x;` so they can be converted to bytes masks in SIMD,\n"
"* pixels should only be referenced from the base pointer of their array and the indices of the loops, such that you can predict what memory address is accessed only from the loop index,\n"
"* avoid carrying `struct` arguments in functions called in OpenMP loops, and unpack the `struct` members before the loop. Vectorization can't be performed on structures, but only on `float` and `int` scalars and arrays. For example:\n"
"    ```lang-C\n"
"    typedef struct iop_data_t\n"
"    {\n"
"      float[4] pixel;\n"
"      float factor;\n"
"    } iop_data_t;\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:288
#, no-wrap
msgid ""
"    float foo(float x, struct iop_data_t *bar)\n"
"    {\n"
"      return bar->factor * (x + bar->pixel[0] + bar->pixel[1] + bar->pixel[2] + bar->pixel[3]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:305
#, no-wrap
msgid ""
"    void loop(const float *in, float *out, const size_t width, const size_t height, const struct iop_data_t bar)\n"
"    {\n"
"      for(size_t k = 0; k < height * width; ++k)\n"
"      {\n"
"        out[k] = foo(in[k], bar);\n"
"        // the non-vectorized function will be called at each iteration (expensive)\n"
"      }\n"
"    }\n"
"    ```\n"
"    should be written:\n"
"    ```lang-C\n"
"    typedef struct iop_data_t\n"
"    {\n"
"      float[4] pixel DT_ALIGNED_PIXEL; // align on 16-bits addresses\n"
"      float factor;\n"
"    } iop_data_t;\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:313
#, no-wrap
msgid ""
"    #ifdef _OPENMP\n"
"    #pragma declare simd\n"
"    #endif\n"
"    /* declare the function vectorizable and inline it to avoid calls from within the loop */\n"
"    inline float foo(const float x, const float pixel[4], const float factor)\n"
"    {\n"
"      float sum = x;\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:320
#, no-wrap
msgid ""
"      /* use a SIMD reduction to vectorize the sum */\n"
"      #ifdef _OPENMP\n"
"      #pragma omp simd aligned(pixel:16) reduction(+:sum)\n"
"      #endif\n"
"      for(size_t k = 0; k < 4; ++k)\n"
"        sum += pixel[k];\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:323
#, no-wrap
msgid ""
"      return factor * sum;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:332
#, no-wrap
msgid ""
"    void loop(const float *const restrict in,\n"
"              float *const restrict out,\n"
"              const size_t width, const size_t height,\n"
"              const struct iop_data_t bar)\n"
"    {\n"
"      /* unpack the struct members */\n"
"      const float *const restrict pixel = bar->pixel;\n"
"      const float factor = bar-> factor;\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:352
#, no-wrap
msgid ""
"      #ifdef _OPENMP\n"
"      #pragma omp parallel for simd default(none) \\\n"
"      dt_omp_firstprivate(in, out, pixel, factor, width, height) \\\n"
"      schedule(simd:static) aligned(in, out:64)\n"
"      #endif\n"
"      for(size_t k = 0; k < height * width; ++k)\n"
"      {\n"
"        out[k] = foo(in[k], pixel, factor);\n"
"      }\n"
"    }\n"
"    ```\n"
"* if you use nested loops (e.g. loop on the width and height of the array), declare the pixel pointers in the innermost loop and use `collapse(2)` in the OpenMP pragma so the compiler will be able to optimize the cache/memory use and split the loop more evenly between the different threads,\n"
"* use flat indexing of arrays whenever possible (`for(size_t k = 0 ; k < ch * width * height ; k += ch)`) instead of nested width/height/channels loops,\n"
"* use the `restrict` keyword on image/pixels pointers to avoid aliasing and avoid inplace operations on pixels (`*out` must always be different from `*in`) so you don't trigger variable dependencies between threads\n"
"* align arrays on 64 bytes and pixels on 16 bytes blocks so the memory is contiguous and the CPU can load full cache lines (and avoid segfaults),\n"
"* write small functions and optimize locally (one loop/function), using OpenMP and/or compiler pragmas,\n"
"* keep your code stupid simple, systematic and avoid smart-ass pointer arithmetic because it will only lead the compiler to detect variable dependencies and pointer aliasing where there are none,\n"
"* avoid types casts in loop,\n"
"* declare input/output pointers as `*const` and variables as `const` to avoid false-sharing in parallel loops (using  `shared(variable)` OpenMP pragma).\n"
msgstr ""

#. type: Title ###
#: content/contribute/coding-style.md:353
#, no-wrap
msgid "Code formatting"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:359
#, no-wrap
msgid ""
"- Use spaces instead of tabs,\n"
"- Indentation uses 2 spaces,\n"
"- Remove trailing spaces,\n"
"- `{` and `}` go to their own line,\n"
msgstr ""

#. type: Plain text
#: content/contribute/coding-style.md:365
#, no-wrap
msgid ""
"1. **Do things you master** : yes, it's nice to learn new things, but Ansel is not a sandbox, it's a production software, and it's not the right place to get your training.\n"
"2. **KISS and be lazy** : Ansel doesn't have 50 devs full-time on deck, being minimalistic both in features and in volume of code is reasonable and sane for current management, but also for future maintenance. *(KISS: keep it stupid simple)*.\n"
"3. **Do like the rest of the world** : sure, if everybody is jumping out of the window, you have a right to not follow them, but most issues about software UI/UX have already been solved somewhere and in most cases, it makes sense to simply reuse those solutions, because most users will be familiar with them already.\n"
"5. **Programming is not the goal** : programming is a mean to an end, the end is to be able to process large volume of pictures in a short amount of time while reaching the desired look on each picture. Programming tasks are to be considered overhead and should be kept minimal, and the volume of code is a liability for any project.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/audience.md:1
#, no-wrap
msgid "Ansel target audience"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:8
#, no-wrap
msgid "As knowing the audience is the first step of design, it is useful to define it.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:10
#, no-wrap
msgid "[The Darktable survey](https://eng.aurelienpierre.com/2023/01/who-are-the-darktable-users/) of 2020 showed an abnormal bias among users, favouring highly-educated men coming from technical and scientific background, and with higher programming skills than the average population. This is problematic because it does not overlap with the sociology of photographers at large (regarding computer skills as well as men/women ratio), but is a filtered subset of that social group.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:12
#, no-wrap
msgid "Ansel expects its users to have\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:16
#, no-wrap
msgid ""
"- an intermediate to advanced knowledge of __color theory__ (brightness vs. lightness vs. luminance, chroma vs. saturation, additive models, delta E, etc.), [^1]\n"
"- an intermediate to advanced knowledge of __cameras__ (ISO, dynamic range, exposure bias, etc.),[^2]\n"
"- an intermediate to advanced knowledge of __stage lighting__ (illuminant, CRI, cast shadows, inverse square law of lighting, etc.)\n"
msgstr ""

#. type: Link reference
#: content/contribute/audience.md:17
#, no-wrap
msgid "[^1]: See [Chris Brejon's website](https://chrisbrejon.com/) for the scope of this knowledge,"
msgstr ""

#. type: Link reference
#: content/contribute/audience.md:19
#, no-wrap
msgid "[^2]: See [DxO Mark website](https://dxomark.com) for the scope of this knowledge,"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:22
#, no-wrap
msgid "As such, Ansel does not target beginners and will be more (photography-wise) technical than proprietary competitors, which are frustrating to use for advanced users. That increased technical rootedness is meant to unlock more accurate and fine-grained control over image (especially color) manipulations, it is by no mean technics for the sake of it.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:24
#, no-wrap
msgid "However, Ansel expects average computer-savvy users, with no scripting or programming skills. As such, tasks achieved through the command line interface or direct editing of configuration files should remain exceptionnal, alternative to GUI ways, and limited to advanced tasks.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:26
#, no-wrap
msgid "Ansel does not aim at competing against commercial alternatives like Adobe Lightroom or Capture One. First of all, it would be pointless to compete against million-dollars companies with current resources. But then, those have made technical choices to be appealing to masses, only to ensure a large market share : they are actually quite limited, when you know what you are doing. Which is fine, because the users who are the most willing to pay high price don't.\n"
msgstr ""

#. type: Title ###
#: content/contribute/audience.md:29
#, no-wrap
msgid "Users should not have to read the manual"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:32
#, no-wrap
msgid "_(Some restrictions apply)_\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:34
#, no-wrap
msgid "Image processing is hard. It uses notions of optics and color \"science\". No matter if you shoot digital or analog, _illuminant_, _dynamic range_, _gamut_ and _chroma_ will affect your process, in ways you may not have foreseen, and it might be a good idea to understand what they mean and where they come at play. Digital has its own lot of issues, from _color spaces & management_ to _alpha compositing_. Not much we can do here, except providing documentation : you need the skills. But that is, at least, the core basics of everything we do, no matter the software used.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:36
#, no-wrap
msgid "Managing files and navigating in a graphical interface are things computer users have been doing for decades, using well-known paradigms that converged to pretty unified semantics. Users should not have to read a manual to discover why mouse scrolling is blocked, for example, or how to increase the opacity of a mask, or even what all those silly custom-drawn icons mean.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:38
#, no-wrap
msgid "Users should not have to read the manual because, anyway, they won't. Instead, they will annoy developers with questions already answered somewhere on the extensive docs, which are too long to read because they have to explain why too much standard stuff is not handled in a standard way.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:40
#, no-wrap
msgid "Acknowleging that, bad design loses the time of both users and developers, and it's time to cut the losses, for everybody's sake.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:42
#, no-wrap
msgid "Now, trying to follow typical desktop GUI paradigms is fine for ubiquitous tasks, until you get into the core specifics of your particular application. There, trying to blindly follow paradigms enforced by industry-leading software working on different assumptions and in a different context is just a [cargo cult](https://en.wikipedia.org/wiki/Cargo_cult#As_a_metaphor) that will get in the way of actual productivity. This is no license to stupidly reproduce existing design without understanding the assumptions on which it is grounded.\n"
msgstr ""

#. type: Title ###
#: content/contribute/audience.md:43
#, no-wrap
msgid "Simplifying is not making things easier"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:46
#, no-wrap
msgid "A violin is a simple instrument : 4 strings, some wood and a design that has barely changed since the 18th century. A piano is a complicated instrument and got recent innovations : 88 keys, 230 strings, a cast-iron frame on top of a wood table, wool felt everywhere, 3 pedals. Now, your first years of learning the piano will be much easier than your first decade of learning how to play a violin. Until you get to the point where Bach's fugues have 4 voices to play at the same time, or Chopin's studies will have you play chords over 3 octaves at 120 BPM, and you still have only 2 hands and one keyboard, but anyway…\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:48
#, no-wrap
msgid "The point is : the apparent simplicity of your instrument (aka the number of organs to interact with) has little to do with the actual easiness of playing it. And a picture-editing software is very much like a music instrument : it lets you manipulate technically a \"material\" medium for artistic purposes. Emphasis on the dichotomy between using technics to achieve art on a stupid medium that constantly gets in the way of your intents and abilities.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:50
#, no-wrap
msgid "So, simplifying without stupidifying aims at reducing the number of steps needed to achieve a predetermined task. Or the depth of the clutter putting you in cognitive overload during said task. It has nothing to do with allowing you to skip class and use the instrument without prior knowledge.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:52
#, no-wrap
msgid "Allowing users to use the instrument without knowledge nor training is turning a tool into a toy: remove everything possibly harmful or frightening, reduce features to the bare minimum, and put playfulness above the ability to solve problems. You do that when you want to sell many copies of your software, by enlarging your market shares to everybody willing to pose as a photographer without having the slightest idea of what they are doing. ~~Later on, you will force them to host their pictures on the cloud, only to fetch them to train your AI automagic, and sell them canned editings under the label \"professional results\"~~.\n"
msgstr ""

#. type: Title ###
#: content/contribute/audience.md:53
#, no-wrap
msgid "The ability to learn is more important than being beginner-friendly"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:56
#, no-wrap
msgid "Technical names, such as methods or algorithms, are kept as they are published by their authors in the technical and scientific litterature. This allows to use any search engine to learn more about those methods, for example their strong and weak points, or the other competing methods available. It also allows to learn image editing tricks from books written on other software, provided those software abide by the same rule of using original names.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:58
#, no-wrap
msgid "This is an unpopular design choice, as Adobe Lightroom has deliberately chosen to hide technical names, hereby locking users from further understanding… but also preventing any reverse-engineering attempt. Advanced Lightroom users will often try to infer what controls and settings actually do, often incorrectly from the visual feedback and limited theoritical knowledge they have, only to teach, preach and diffuse wrong knowledge.\n"
msgstr ""

#. type: Plain text
#: content/contribute/audience.md:59
#, no-wrap
msgid "I believe that keeping doors open to deepen user's understanding of image processing matters is a virtuous and empowering circle, even though it has a cognitive price to pay. Therefore, technics will not be hidden or renamed in GUI for the sake of being less frightening.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/workflows.md:1
#, no-wrap
msgid "Automated workflows"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:7
#, no-wrap
msgid "Because Ansel is mostly a one-person operation, everything that could be automated was automated. This page keeps track of everything that should be maintained in the future, and where.\n"
msgstr ""

#. type: Title ##
#: content/contribute/workflows.md:8
#, no-wrap
msgid "Software"
msgstr ""

#. type: Title ###
#: content/contribute/workflows.md:10 content/contribute/organization.md:24
#, no-wrap
msgid "Nightly builds"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:13
#, no-wrap
msgid "Nightly builds prepare a compiled and packaged version of the software, every night at 6am UTC, for:\n"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:17
#, no-wrap
msgid ""
"- [Linux](https://github.com/aurelienpierreeng/ansel/blob/master/.github/workflows/lin-nightly.yml),\n"
"- [Windows](https://github.com/aurelienpierreeng/ansel/blob/master/.github/workflows/win-nightly.yml),\n"
"- MacOS is currently disabled.\n"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:19
#, no-wrap
msgid "The newest binary files are automatically added to the [pre-release](https://github.com/aurelienpierreeng/ansel/releases/tag/v0.0.0) assets, are posted on a [Matrix channel](https://matrix.to/#/#ansel-builds:matrix.org) so users can subscribe to updates, and can be downloaded through (constantly up-to-date) permalinks at:\n"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:22
#, no-wrap
msgid ""
"- <https://nightly.link/aurelienpierreeng/ansel/workflows/lin-nightly/master/ansel.stable.AppImage.zip> for the Linux AppImage,\n"
"- <https://nightly.link/aurelienpierreeng/ansel/workflows/win-nightly/master/ansel.stable.win64.zip> for the Windows AppImage.\n"
msgstr ""

#. type: Title ###
#: content/contribute/workflows.md:23
#, no-wrap
msgid "Developer documentation"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:26
#, no-wrap
msgid "The dev docs are [automatically built](https://github.com/aurelienpierreeng/ansel/blob/master/.github/workflows/docs.yml) from the source code with Doxygen, every Sunday at 00:00 UTC, then uploaded to <https://dev.ansel.photos>, which is hosted on Github Pages attached to the Ansel (software) repository.\n"
msgstr ""

#. type: Title ###
#: content/contribute/workflows.md:27
#, no-wrap
msgid "Commits and issues"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:30
#, no-wrap
msgid "Github new commits and issues are [automatically posted](https://github.com/aurelienpierreeng/ansel/blob/master/.github/workflows/matrix.yml) to a [Matrix channel](https://matrix.to/#/#ansel-dev:matrix.org) for updates.\n"
msgstr ""

#. type: Title ###
#: content/contribute/workflows.md:31 content/contribute/organization.md:42
#, no-wrap
msgid "Website"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:34
#, no-wrap
msgid "The Hugo static website is [automatically built](https://github.com/aurelienpierreeng/ansel-website/blob/master/.github/workflows/hugo.yml) on every new commit to the source code and ever Sunday at 00:00 UTC. This auto-update is intended for [camera support](https://github.com/aurelienpierreeng/ansel-website/blob/master/themes/ansel/layouts/shortcodes/rawspeed.html) which re-parses Libraw, Rawspeed and Ansel source code straight from Github, and dynamically generates the camera support table. It is uploaded to <https://ansel.photos>, which is hosted on Github Pages attached te the Ansel Website repository.\n"
msgstr ""

#. type: Title ###
#: content/contribute/workflows.md:35 content/contribute/organization.md:50
#, no-wrap
msgid "Documentation"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:38
#, no-wrap
msgid "The documentation is imported into the website as a Go/Git module ([see _website_](./website/index.md)). Every new commit to the documentation [fires a workflow dispatch](https://github.com/aurelienpierreeng/ansel-doc/blob/master/.github/workflows/hugo.yml) to the main website to rebuild and update it.\n"
msgstr ""

#. type: Title ##
#: content/contribute/workflows.md:39
#, no-wrap
msgid "Forum"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:42
#, no-wrap
msgid "New posts on the forum are posted through an RSS bot to the [Matrix channel](https://matrix.to/#/#ansel-dev:matrix.org) for updates.\n"
msgstr ""

#. type: Title ##
#: content/contribute/workflows.md:43
#, no-wrap
msgid "Chantal"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:46
#, no-wrap
msgid "The page crawler for Chantal search engine database does not yet run automated and needs manual updating.\n"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:48
#, no-wrap
msgid "Converting web pages to their vector representation, through the language model, will probably remain too heavy for any public server and will need to be done on a powerful private server.\n"
msgstr ""

#. type: Title ##
#: content/contribute/workflows.md:49
#, no-wrap
msgid "Ansel GPT"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:52
#, no-wrap
msgid "The [custom ChatGPT model for Ansel](https://chatgpt.com/g/g-680d2f861a608191a0f7549eadd40f2e-ansel-gpt) is meant to assist users who have questions on Ansel software (installation, compilation, usage) or color theory. It is trained with Ansel website, documentation, Github issues, Matrix chats, and other resources. It also uses Chantal AI JSON API as backend, from where it can tap into the database of 68.800+ imaging-related pages indexed there.\n"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:54
#, no-wrap
msgid "It is configured to automatically recrawl and cache, once a week, all the following resources for all languages:\n"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:61
#, no-wrap
msgid ""
"- [the main website sitemap](https://ansel.photos/sitemap.xml),\n"
"- each [language-centric sitemap](https://ansel.photos/en/sitemap.xml),\n"
"- the [one-page aggregated website](https://ansel.photos/en/index.md) content for each language,\n"
"- Github RSS feed of new commits,\n"
"- Github issues,\n"
"- the main Community forum RSS feed.\n"
msgstr ""

#. type: Plain text
#: content/contribute/workflows.md:62
#, no-wrap
msgid "Users can request to see the last update log by asking \"show me the last update log\" to GPT.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/triaging.md:1
#, no-wrap
msgid "Triaging issues"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:8
#, no-wrap
msgid "This page is written for people helping triaging issues on the issue Github tracker.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:16
#, no-wrap
msgid ""
"- Any project has limited resources, the difference between projects will be the threshold.\n"
"- Any project should have clear goals. For Ansel, it is to manage, edit and export collections of RAW images on a desktop computer by an end-user who is not a CLI user but puts visual image quality above all else.\n"
"- Any project has overhead, that is actions requested to meet the goals, although they are not directly the goal and therefore should stay minimal. For Ansel, it is the maintenance of the website, documentation, servers, nightly-built packages, code cleanups, debugging, regression tests, cross-OS support, issues triaging, etc.\n"
"- Goals and overhead should be expressed in terms of __tasks__ to perform in order to __solve problems__ (issues). If no problem to solve, then no work to do: status quo is great too, don't create work for the sake of it.\n"
"- because of resource limitation, tasks have to be ordered depending on their priority.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:18
#, no-wrap
msgid "The following document aims at defining this priority.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:20
#, no-wrap
msgid "Ansel was forked on Darktable because Darktable has no clear goal, no priority management, and the overhead is increasing every year, which is the trademark of burn-out factories and is unsustainable mid-term.\n"
msgstr ""

#. type: Title ##
#: content/contribute/triaging.md:21
#, no-wrap
msgid "Defining good issues"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:24
#, no-wrap
msgid "Project management works better with SMART tasks. S.M.A.R.T. stands for:\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:30
#, no-wrap
msgid ""
"- Specific _(ex: finding URI of pictures Ansel exported on the filesystem and open them)_\n"
"- Measurable _(ex: number of clicks/steps required, CPU time to perform the task on some target platform)_\n"
"- Actionnable/Achievable _(ex: can be integrated on current code base with only minor rewrites, needs only a few hundreds of lines of code)_\n"
"- Relevant/Reasonable _(ex: is part of a fairly-general photography workflow, would be used by a signicative part of users)_\n"
"- Time-bound _(ex: requires at most 70 man-hours)_.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:32
#, no-wrap
msgid "__A good issue is one that leads to a SMART task__. For Ansel, that means issues focusing on a clearly-defined problem affecting a clearly-defined step of the picture editing workflow (\"I have problems doing X because Y and I would like Z\").\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:34
#, no-wrap
msgid "Questions and general discussions should happen on <https://community.ansel.photos>.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:36
#, no-wrap
msgid "Bad issues are:\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:42
#, no-wrap
msgid ""
"- too broad _(\"automatize workflow\", \"improve UX\")_,\n"
"- focusing on the means _(\"use neural network\", \"extend tone curve\")_ instead of the goal _(\"mask the sky out\", \"control saturation selectively\")_,\n"
"- out of scope _(\"port to Android\", \"switch to Qt\", \"switch to Vulkan\")_\n"
"- affecting third-party libraries/projects _(Rawspeed, Libraw, Exiv2, Lensfun, GPhoto2, Gtk, etc.)_,\n"
"- too subjective _(\"please do things like that other software I used in the past and really like\")_. What user A likes will be disliked by user B, we can't work with that.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:44
#, no-wrap
msgid "Side note: some issues may sound like things in need for more code, whereas they actually need better documentation of current features, or slight GUI touch-ups (renaming labels, reorganizing widgets), so that's something to keep in mind before jumping on the guns.\n"
msgstr ""

#. type: Title ##
#: content/contribute/triaging.md:45
#, no-wrap
msgid "Defining priorities"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:48
#, no-wrap
msgid "In an ideal world, tasks (aka good issues) would be added to the to-do list in a linear fashion, as milestones are reached, and their code product would be tested for a couple of weeks while the code is otherwise frozen, until it is proven that everything holds, in which case we would unfreeze the code and move on to the next task in the to-do list.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:50
#, no-wrap
msgid "Problem is this implies everybody on deck for the testing phase, so it doesn't freeze the code for too long. Because that doesn't happen (people take vacations, have kids, move homes, change jobs, have a life…), we have to parallelize testing the product of previous tasks while we are working on the next, to be efficient.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:52
#, no-wrap
msgid "This is to say the to-do list is not linear and some important things might get added or removed dynamically, depending on what happens. The problem is then to determine what constitutes something important enough as to disrupt the schedule.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:54
#, no-wrap
msgid "There is no definitive rule here, so you will have to use your best judgment, but there are some rules of thumbs:\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:58
#, no-wrap
msgid ""
"- something recently broken (a regression) is easier to spot and fix sooner than later, so in the grand scheme of things, it might be less work overall to do it sooner,\n"
"- something that prevents the software from working at all (crash, corrupted output files, loss of data) is critical enough to take precedence over improvements and more cosmetic fixes,\n"
"- something that impacts a large number of users and where no work-around can be found will take precedence too.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:60
#, no-wrap
msgid "On the contrary, anything impacting a small number of users, or niche/secondary features, or minor annoyances that have work-arounds, are not critical enough to justify disrupting the schedule. Those will be added on the queue in a first-in/first-out way.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:62
#, no-wrap
msgid "Ansel has 4 levels of priorities, set as issue tags:\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:67
#, no-wrap
msgid ""
"- `priority: critical`: Affects basic and core functionnalities of the software in a way that prevents it to work at all,\n"
"- `priority: high`: Affects basic and core functionnalities of the software in a way that severly degrades usability,\n"
"- `priority: medium`: Affects basic and core functionnalities of the software in a way that mildly degrades usability (work-arounds available),\n"
"- `priority: low`: Affects optional and niche functionnalities\n"
msgstr ""

#. type: Title ##
#: content/contribute/triaging.md:68
#, no-wrap
msgid "Defining milestones"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:71
#, no-wrap
msgid "Modules parameters are saved as binary blobs. We deal with these by handling their bit size. When a new parameter is added, we need to write code to handle the conversion, aka the different bit size of the parameter blob, and we increase the internal version of modules parameters. No code is written for backward compatibility, so pictures edited with newer modules can't be opened in older modules. Modules parameters are used in styles, in presets and in XMP files too.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:73
#, no-wrap
msgid "For these reasons, any issue that would lead to adding parameters in modules (either the image processing modules in darkroom, or the lighttable modules dealing with export & metadata), would break backwards compatibility and needs to be planned for the next major version of the software (1.0, 2.0, 3.0, etc.). This means that only GUI & behaviour changes are allowed within the same major version, and can be planned for the next minor version (0.1, 0.2, 0.3, then 1.1, 1.2, 1.3, etc.).\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:75
#, no-wrap
msgid "Ansel has only 2 milestones at all time: the next minor version and the next major version.\n"
msgstr ""

#. type: Title ##
#: content/contribute/triaging.md:76
#, no-wrap
msgid "Defining difficulty"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:79
#, no-wrap
msgid "Difficulty is directly related to the amount of work required by a task, that is:\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:85
#, no-wrap
msgid ""
"- the number of lines of code to write,\n"
"- the number of files to change,\n"
"- the probability of breaking existing features, leading to extra testing work,\n"
"- the existence of similar features or written theory to achieve the task,\n"
"- the overhead of making changes and features work reliable across operating systems.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:87
#, no-wrap
msgid "Estimating difficulty in an accurate fashion is something only an experienced developer can do.\n"
msgstr ""

#. type: Title ##
#: content/contribute/triaging.md:88
#, no-wrap
msgid "Defining nature"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:91
#, no-wrap
msgid "The nature of the issues is handled with labels. We have:\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:100
#, no-wrap
msgid ""
"- regressions (stuff that use to work but was broken by recent-ish changes),\n"
"- bugs (stuff that has never worked in the past years),\n"
"- enhancements (stuff that needs to be improved or added),\n"
"- wontfix (not a bug, but a feature or design choice or necessity imposed by third-party dependencies),\n"
"- question (should not be on Github, but on <https://community.ansel.photos>),\n"
"- duplicate (issue already reported),\n"
"- unclear (issue can't be understood),\n"
"- invalid (issue is \"bad\" according to the above definition of a good issue).\n"
msgstr ""

#. type: Title ##
#: content/contribute/triaging.md:101
#, no-wrap
msgid "Priority are relative"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:104
#, no-wrap
msgid "See <https://www.youtube.com/watch?v=8fnfeuoh4s8>. Having to repair the car in order to change the light-bulb is a great metaphor of doing code on a 12 years-old software having hundreds of thousands of lines of code written by people who didn't talk to each other and didn't document their changes. Fixing the car is not top-priority until it becomes the pre-requisite to fix the high-priority light.\n"
msgstr ""

#. type: Title ##
#: content/contribute/triaging.md:105
#, no-wrap
msgid "Your triager job"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:108
#, no-wrap
msgid "Ultimately, only an experienced developer will be able to accurately triage issues. But reason requires that an experienced developer would be employed to do things that only an experienced developer can do: write simple code to efficiently solve technical problems requiring some amount of theory and design.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:110
#, no-wrap
msgid "The trade-off is to have triagers help prioritize obvious issues so developers only have to deal with the least-obvious issues and focus on coding.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:122
#, no-wrap
msgid ""
"1. label only issues you understand and you feel comfortable triaging. You don't have to do them all, it's fine if you don't know.\n"
"2. for issues you understand:\n"
"   - assign a priority label if you can,\n"
"   - assign a nature label if you can,\n"
"   - assign a milestone if you can,\n"
"   - immediately close the issue if it is invalid or duplicate.\n"
"3. for issues you don't understand:\n"
"   - try asking more questions to the author,\n"
"   - ensure authors fill all relevant info (OS, hardware, reproducing steps for bugs),\n"
"4. it's better if you do nothing than if you do it wrong: issues without labels are easier to spot than issues with wrong labels.\n"
"5. don't hesitate to call-in video meetings: better sit together for 30 min to have a productive chat and adjust decisions than exchange endless threads of useless messages.\n"
msgstr ""

#. type: Plain text
#: content/contribute/triaging.md:123
#, no-wrap
msgid "Thank you !\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:10
#, no-wrap
msgid "Digital photography has widely spread in the 2000's as it allowed faster workflows and made possible to get immediate results, compared to the traditional film & darkroom workflow. But this introduced many new problems.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:12
#, no-wrap
msgid "Firstly, analogue photographers were not necessarily accomplished lab and printing technicians, but could rely on local photo labs to get their developments and prints done. Digital photography added the burden of processing the \"digital negatives\" (raw files) on the shoulders of the photographers, by means of software. But those photographers didn't usually got the appropriate training, both in digital color management and in general computer use. That pushed many of them in the hands of over-simplified software, verging on the toy side, which defined the mainstream expectation of what a digital photo editing software should be. Video editing software took another approach, being used by heavily-trained professionals in a billion-dollars industry.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:14
#, no-wrap
msgid "Secondly, the analogue printing is a hands-on process, where the lab tech interacted directly with the finished product : the print. Digital processing makes a virtual master edit, because the monitor used to preview the result will generally not have the same visual properties as the printing medium or as the consumer display. This introduces complexity in the imaging pipeline, because what you are interacting with is neither what you will see, nor what you actually manipulate. For example, when you push an Lch slider, that should make a change to HDR pipeline RGB, but what you will see is the effect on SDR display RGB after gamut and tone mapping. The proper way to handle this is through the [model-view-controller paradigm](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller), but many software did not get it right[^1]. Display profiling workflows, like the ICC framework, have tried to automatize and hide most of the complexity of color management, but they mostly managed to confuse users even more by abstracting too much things that can actually be written as a couple of equations using only domestic-accounting-level maths (sums and products).\n"
msgstr ""

#. type: Link reference
#: content/contribute/introduction.md:15
#, no-wrap
msgid "[^1]: And most software still use broken [alpha compositing](https://hg2dc.com/2020/08/26/question-25/) in sRGB, as well as unassociated alpha, so even the color models are butchered."
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:18
#, no-wrap
msgid "Thirdly, the analogue lab tech could directly (physically) access the paper and the negative to perform all kinds of adjustments and even distortions (dodging & burning, masking, split-toning, cross-processing, bleach bypass, solarization, etc.). This direct physical access enabled artists to hack the printing process in ways sometimes unplanned by vendors, to match their targeted visual outcome. Digital imaging has cast away the techs and artists alike from the medium, and they are confined to the functionality provided in the GUI of their software. The actual image lives in the computer as pure data, and only engineers know how to access it and what happens to it.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:20
#, no-wrap
msgid "Finally, digital imaging has been driven by computer scientists rather than by color scientists, let alone by actual photographers or photo lab technicians. They developed a digital language incompatible with the legacy of analogue photography and collections of editing tools making use of anonymous unit-less parameters that didn't care for optics and exposure values, thus confusing the analogue-trained photographers (used to drive brightness through light exposure or chemical developing times…). Their constant reliance on \"barely working\" color spaces (HSL, non-linearly encoded RGB) to handle color changes impregnated many an user with bad habits which soon became expectations, then requirements. The color pipelines developed by the coding monkeys later needed a completely different workflow to handle HDR images, because their hacky logic didn't scale with dynamic range and \"worked\" only as long as camera sensors and computer displays had mostly the same dynamic range as paper prints, with no future-proofing intended.\n"
msgstr ""

#. type: Title ##
#: content/contribute/introduction.md:21
#, no-wrap
msgid "High-level goal of Ansel"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:24
#, no-wrap
msgid "Ansel aims at being an instrument of visual expression letting artists develop their own interpretation of the raw material by allowing a large expressive range of color effects, much like a musical instrument lets musicians interpret the score by allowing a large expressive range of sound effects. This is achieved by putting back the retoucher in the center of the image processing, by allowing a transparent and as-direct-as-possible access to the image data, and by providing color manipulations making sense either on an optical level or on a psycho-perceptual level.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:26
#, no-wrap
msgid "Although film and the analogue legacy is often used as an inspiration and as a starting point/first base, making digital image processing a 1:1 virtual translation of analogue printing is not the goal. Let us not forget that film was engineered within the technical limitations of dyes and chemicals, and that many of its beloved properties are actually limitations of its technology (which is not to say that don't have expressive merits, but let's not fall into backward-looking for the sake of it), and were not actually desired in the first place.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:28
#, no-wrap
msgid "However, much like music, it is expected from users to complete at least a basic theoretical and practical training to be able to use this imaging instrument, and Ansel will not give up visual quality for the sake of smoothing the learning curve.\n"
msgstr ""

#. type: Title ##
#: content/contribute/introduction.md:29
#, no-wrap
msgid "User-level goal of Ansel"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:34
#, no-wrap
msgid ""
"1. Allow to efficiently cull the photographs coming out of the camera/memory card, in order to pick only the ones worthy of being fully post-processed,\n"
"2. Allow to edit/retouch the culled photographs in the most direct way, with a minimal number of steps, using unit image controls that affect only one perceptual or optical property at a time,\n"
"3. Allow indexing and later retrieval of the processed photographs for archival purposes.\n"
msgstr ""

#. type: Title ##
#: content/contribute/introduction.md:35
#, no-wrap
msgid "Supported workflows"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:38
#, no-wrap
msgid "Any tool can only be made optimal for a single and definite use case. Supporting too many uses cases will prevent optimization at all. This is where upstream darktable miserably failed. The workflows presented below are the intended uses for Ansel. Any use that deviates from these may be possible but is not recommended and nothing will be made to actively support it.\n"
msgstr ""

#. type: Title ###
#: content/contribute/introduction.md:40
#, no-wrap
msgid "Culling workflow"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:51
#, no-wrap
msgid ""
"1. The user will mount the file system of the camera or the memory card using the OS tools (MTP/PTP protocols, FAT/exFAT file systems),\n"
"2. The user will import the pictures in individual directories named like `YEAR-MONTH-DAY-Job name`. The pictures will use unique names like `Job name-ID number.extension`. Those directories will be used in Ansel as the parent path for \"filmrolls\" and opened in lighttable once pictures are imported. Filmrolls may or may not contain the whole content of their associated directory.\n"
"3. The user will proceed to the culling part. Images are imported with a rating of 0 star. Obviously bad pictures will be rejected (shortcut : <kbd>R</kbd>). 2 methods can then be used :\n"
"   1. negative : assign an high star-rating to all pictures, and gradually downgrade bad pictures, so only the keepers keep their high rating,\n"
"   2. positive : assign a 1-star-rating to all the seemingly-good pictures, then assign a 2-star rating only to the best of the 1-star-rated, and carry-on until reaching 5 stars or any rating where an appropriate amount of keepers is left,\n"
"4. From there, the highest-rated images are considered keepers and may be edited. [Batch-editing features](https://docs.darktable.org/usermanual/4.0/en/guides-tutorials/batch-editing/) that may speed-up this step for series are presented on upstream darktable's manual.\n"
"5. Tracking the state of pictures in the workflow can be made through the darktable internal tags `darktable|changed`, `darktable|exported`, `darktable|printed`, which are set automatically when these operations are done. Users needing more states, like those who edit in several steps (one step of basic editing, for better preview during culling, another step of full editing), may add more children tags to the `darktable` parent tag, like `darktable|edited` for pictures that are finished and ready to export.\n"
"6. The user may set color labels, tags and metadata in light table, after editing and before exporting, for better archiving.\n"
"7. The user may export and print the pictures. It is advised to keep a 16 bits TIFF export in Adobe RGB or ProPhotoRGB color spaces for archival purposes as soon as the edit is finished, to prevent any data loss that may incur with future versions of Ansel or upstream darktable (although everything is done to ensure future compatibility of the software with old edits, mistakes happened and will happen again).\n"
msgstr ""

#. type: Title ###
#: content/contribute/introduction.md:52
#, no-wrap
msgid "Notes and Comments"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:55
#, no-wrap
msgid "The proposed culling and storing method is the best as it allows to efficiently search and access the pictures from any external software, including other cataloguing software and file browsers. Directories containing dates and job names can be easily searched from any file browser, and each directory is a consistent collection on its own that can be re-imported as a whole, with no further internal sorting.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:57
#, no-wrap
msgid "Users are advised against ditching all pictures in a yearly directory and relying too heavily on Ansel/darktable's filtering features to browse them. If you need to send pictures to a website or to print via internet (through a web browser calling the file browser), this method is clearly inefficient. It is probably the origin of the filtering over-engineered GUI introduced in darktable 4.0.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:59
#, no-wrap
msgid "Users are warned against the \"mad librarian syndrom\", which consists in hugely overdoing the tagging and sorting. Photo stack agencies may heavily rely on tags to structure their image database of images because they need to deliver pictures of matching content for illustrative purposes quickly, but individuals should not spend more time tagging than taking pictures. Tags are meant to bind similar pictures together, if you find yourself using tags applied to only 1 or 2 pictures, you are defeating their binding purpose, your tagging method is too restrictive and you may want to use image title instead (which can also be searched later). Restrictive and specialized tags should be made hierarchical, so the parent tag can be fetched instead of cooking complex queries fetching multiple children to get your images.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:61
#, no-wrap
msgid "Although color labels may be used as implicit status tag, the recommended way of documenting the status of an image is through the `darktable` tag children, which is explicit. Such status tags may get a dedicated GUI at some point.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:63
#, no-wrap
msgid "In darktable, the tags have been customarily misunderstood as mere keywords, but they are actually hierarchical taxonomies that can be used to declare categories or arbitrary collections. If your pictures are properly stored in directories containing meaningful names, then those names can be used directly in searches, in place of tags. Many users, including myself, manage databases of more then 30.000 images through only directories (filmroll) names.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:65
#, no-wrap
msgid "In any case, if you find yourself needing a complex GUI to sort and access your pictures, your method needs to be simplified. A good software allows to achieve simple tasks simply, and I refuse to make the simple tasks complicated just to account for insane workflows.\n"
msgstr ""

#. type: Title ##
#: content/contribute/introduction.md:66
#, no-wrap
msgid "Processing workflow"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:69
#, no-wrap
msgid "The scene-referred workflow is the standard in Ansel, as it proved to be faster and more reliable for users who allocated some time to understand it, and allows an unified treatment for HDR and SDR scenes alike. It relies on manipulating the image in a framework where pixel RGB is treated as a light emission for as long as possible, allowing accurate (de-)blurring, (de-)noising, illuminant correction and color-preserving brightening/darkening based on exposure compensations. When the last optically-bound image filter is applied, it then shifts to a perceptual framework where the pixel RGB is converted and handled as a 3D color object (hue, chroma or saturation, lightness or brightness) using color appearance models.\n"
msgstr ""

#. type: Plain text
#: content/contribute/introduction.md:74
#, no-wrap
msgid ""
"1. The user will setup the global exposure as to match the overall picture brightness to the desired level, in exposure module. This will usually consist into matching the average brightness or the brightness of the picture's subject to the brightness of the GUI background color (middle-grey by design),\n"
"2. The user will ensure the bounds of the scene dynamic range are properly remapped to the bounds of the display dynamic range, in filmic module. For typical SDR monitors, the default display settings will not need to be changed, but the scene white and black relative exposures will need to be adjusted for each image, either automatically (use the \"Auto tune levels\" button) or manually. Then, adjust the contrast (in \"look\" tab) to taste.\n"
"3. The user will ensure the white balance is neutral (reminder : it's not an artistic choice) by setting the \"CAT\" tab properly, in color calibration module. The user may calibrate the colors directly from a color checker test shot too.\n"
"4. Any artistic color deviation, in hue or in saturation, may be applied in color balance module.\n"
"5. Any other artistic change can then be made.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/_index.md:1
#, no-wrap
msgid "Contribute"
msgstr ""

#. type: Plain text
#: content/contribute/_index.md:8
#, no-wrap
msgid "This section is dedicated to people willing to contribute to Ansel, whether by designing, fixing or triaging bugs, coding, troubleshooting bugs, writing documentation or helping users.\n"
msgstr ""

#. type: Plain text
#: content/contribute/_index.md:9
#, no-wrap
msgid "You can also [contribute financially](https://community.ansel.photos/donations-make).\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/translating.md:1
#, no-wrap
msgid "Translating"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:8
#, no-wrap
msgid "Ansel uses [Gettext](https://www.gnu.org/software/gettext/) to translate all parts of the project:\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:12
#, no-wrap
msgid ""
"- The software application (written in C),\n"
"- The website (Hugo templates and Markdown content),\n"
"- The documentation/user manual, inserted into the website as a module (Hugo templates and Markdown content too).\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:14
#, no-wrap
msgid "This ensures the same workflow can be used to translate all files, but also that some translated strings can be shared (for example, the translated GUI controls from the applications can be inserted directly into the documentation).\n"
msgstr ""

#. type: Title ##
#: content/contribute/translating.md:15
#, no-wrap
msgid "Organization of translation files"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:18
#, no-wrap
msgid "The source code of the website, documentation and software all contain an immediate `po/` subfolder, containing:\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:21
#, no-wrap
msgid ""
"- one `.pot` file that holds all the available, translatable strings in their original language (in English),\n"
"- many `.po` files matching translatable strings in their original language with their translation (in one language per file).\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:23
#, no-wrap
msgid "Translations files are all named following the convention `language-code.po`. For example:\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:32
#, no-wrap
msgid ""
"- for German,\n"
"  - the software translation is `de.po`,\n"
"  - the website translation is `content.de.po`,\n"
"  - the documentation translation is `content.de.po`,\n"
"- for Brazilian Portuguese,\n"
"  - the software translation is `pt_BR.po`,\n"
"  - the website translation is `content.pt_br.po`,\n"
"  - the documentation translation is `content.pt_br.po`.\n"
msgstr ""

#. type: Title ##
#: content/contribute/translating.md:33
#, no-wrap
msgid "Translating when you can't use CLI/Git"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:36
#, no-wrap
msgid "You will need to locate the relevant `.po` file for your language for the part of the project you want to translate:\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:40
#, no-wrap
msgid ""
"- the software : <https://github.com/aurelienpierreeng/ansel/tree/master/po>\n"
"- the website : <https://github.com/aurelienpierreeng/ansel-website/tree/master/po>\n"
"- the documentation : <https://github.com/aurelienpierreeng/ansel-doc/tree/master/po>\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:49
#, no-wrap
msgid ""
"1. Download this file and open it with [Poedit](https://poedit.net/),\n"
"2. Make the corrections and editions you need,\n"
"3. Add your name in a comment for the strings you translate if you want to be credited on the page :\n"
"    - Automatically-translated strings will have `TRANSLATOR ChatGPT` there, once you verify those strings, please remove this line,\n"
"    - Then add a comment containing `TRANSLATOR Your Name` on a new line. Keep other (non-ChatGPT) contributors there, if any.\n"
"4. Save the file and:\n"
"    - __Alternative 1__ _(easier for contributor, more steps for maintainer)_: drop it [on my private cloud](https://cloud.apmlt.net/s/YAdfYajPkE5nLyW),\n"
"    - __Aternative 2__ _(more steps for contributor, easier for maintainer)_: commit it with Git and open a pull request against the proper Github repository.\n"
msgstr ""

#. type: Title ##
#: content/contribute/translating.md:50
#, no-wrap
msgid "Translating for power users"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:53
#, no-wrap
msgid "This will update the `.pot` file using the source code of the project. You will need to have `Git` installed, and [Hugo 0.146](https://github.com/gohugoio/hugo/releases/tag/v0.146.7) installed on your computer.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:95
#, no-wrap
msgid ""
"1. Clone the source code of the relevant project:\n"
"    - the software :\n"
"      ```bash\n"
"      $ git clone --depth 1 \\\n"
"        https://github.com/aurelienpierreeng/ansel.git\n"
"      $ cd ansel\n"
"      ```\n"
"    - the website :\n"
"      ```bash\n"
"      $ git clone --depth 1 \\\n"
"        https://github.com/aurelienpierreeng/ansel-website.git\n"
"      $ cd ansel-website\n"
"      ```\n"
"    - the documentation :\n"
"      ```bash\n"
"      $ git clone --depth 1 \\\n"
"        https://github.com/aurelienpierreeng/ansel-doc.git\n"
"      $ cd ansel-doc\n"
"      ```\n"
"    Later, you will update the repository using :\n"
"    ```bash\n"
"    $ git pull\n"
"    ```\n"
"2. Update the `.pot` and all `.po` files from the source code (this step works the same for all 3 projects):\n"
"    ```bash\n"
"    $ sh tools/update-translations.sh\n"
"    ```\n"
"3. Translate the relevant `.po` file using Poedit or directly in a text editor (see [_Translating when you can't use CLI/Git_](#translating-when-you-cant-use-cligit)),\n"
"4. Test & review your translation :\n"
"    - For the software, you will need to build Ansel on your OS. Please see [the documentation](../doc/install/_index.md).\n"
"    - For the website and the documentation, you can run :\n"
"      ```bash\n"
"      sh build-modules.sh\n"
"      hugo\n"
"      ```\n"
"    Watch out for any critical error from po4a, especially for mismatching `\\n` characters, and errors from Hugo, especially regarding shortcodes syntax.\n"
"5. For the website and documentation, cleanup the translated Markdown files (automatically-generated by po4a using the `.po` file) before commiting, using :\n"
"    ```bash\n"
"    sh tools/build-translations.sh --remove\n"
"    ```\n"
"6. Commit all `.pot` and `.po` files and open a pull request against the relevant Github repository. Never commit translated `.md` (Markdown) files.\n"
msgstr ""

#. type: Title ##
#: content/contribute/translating.md:97
#, no-wrap
msgid "Translating images"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:100
#, no-wrap
msgid "_The following applies to the website and documentation only._\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:102
#, no-wrap
msgid "Images can be translated too, for example application screenshots. Images are stored in the `assets/` folder if they are re-used on several pages (global assets), otherwise they are stored in the same folder as the Mardown file using them (local assets). Whether global or local, the translation process is the same, only the base folder changes.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:104
#, no-wrap
msgid "If, for example, you want to translate the `assets/screenshot.jpg` for the language `LANG` (which is the ISO code of the language, like `de`, `nl`, `pt_br`, `zn_cn`, etc.):\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:110
#, no-wrap
msgid ""
"1. add and commit a new `assets/screenshot.LANG.jpg` image file to the documentation or website Git repository,\n"
"2. in the `content.LANG.po`, locate the entry containing the Markdown tag for the original image, which will be something like `![alt text](screenshot.jpg)`,\n"
"3. translate the Markdown tag by replacing the URL of the image, like `![translated alt text](screenshot.LANG.jpg`,\n"
"4. save and commit the `content.LANG.po` file,\n"
"5. create a pull request against Ansel website or Ansel docs repository.\n"
msgstr ""

#. type: Title ##
#: content/contribute/translating.md:111
#, no-wrap
msgid "Auto-tools and helper scripts"
msgstr ""

#. type: Title ###
#: content/contribute/translating.md:113
#, no-wrap
msgid "Init documentation translation with software one"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:116
#, no-wrap
msgid "Because the documentation and the software share the same strings for the GUI controls, you can lazily init the documentation strings from the software ones if they exactly match (including casing). This needs a Python interpeter and the `regex` package (install with `pip install -U regex`). From the source code of the documentation, you can call :\n"
msgstr ""

#. type: Fenced code block (bash)
#: content/contribute/translating.md:117
#, no-wrap
msgid "$ python tools/merge-translations.py path/to/software path/to/doc\n"
msgstr ""

#. type: Title ###
#: content/contribute/translating.md:121
#, no-wrap
msgid "Auto-translate documentation and website with ChatGPT"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:124
#, no-wrap
msgid "ChatGPT-4o does a very fair job at translating Markdown-formatted text from English, although not in every language. You will need a private API key to store in the folder of the documentation or website in a `.chatgpt.api_key` file. Then, calls to the ChatGPT API are not free, and the minimal payment of 5 US$ will roughly get you the website fully translated into 4 languages.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:126
#, no-wrap
msgid "The all-in-one script can be called using :\n"
msgstr ""

#. type: Fenced code block (bash)
#: content/contribute/translating.md:127
#, no-wrap
msgid "$ sh auto-translate.sh LANG\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:132
#, no-wrap
msgid "where `LANG` is the target language code (de, fr, pt_br, etc.). This will process the translation in batches of 90 to 120 strings to comply with ChatGPT API limitations and thresholding. This will :\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:138
#, no-wrap
msgid ""
"- parse the original `po/content.LANG.po` file and export the batch to translate into a temporary `po/content.LANG.txt` file,\n"
"- send `po/content.LANG.txt` file to ChatGPT and get the response in `po/content.LANG.generated.txt`\n"
"- fix most common formatting inconsistencies that ChatGPT can introduce and inject the translations back into `po/content.LANG.po`,\n"
"- build translated Markdown files (following the `page.LANG.md` naming convention),\n"
"- build the website with Hugo.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:140
#, no-wrap
msgid "If all these steps complete without error, then you are good to run the script again to process the next batch until completion. If errors are shown, you will need to fix them. We run only one batch at each call to let user the opportunity to find errors while there are not too many changes to inspect.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:142
#, no-wrap
msgid "__Common errors__:\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:148
#, no-wrap
msgid ""
"- nothing will be translated : check ChatGPT answer within `po/content.LANG.generated.txt`, sometimes it is unable to understand its mission. You can try again, sometimes it works on the 3rd call. But often, there is nothing to do and some languages/strings can't be translated at all.\n"
"- when building the website with Hugo, some shortcode can't be found. This is because shortcodes are declared like so : `{{</* shortcode_name */>}}`. Sometimes, ChatGPT will try to translate `shortcode_name` and the shortcode won't work again. The solution is to bring back the English name for the shortcode and its attributes,\n"
"- same with [Mermaid](https://mermaid.js.org/) graphs, ChatGPT can try to translate commands and properties that shouldn't be translated,\n"
"- original strings end with the newline character `\\n` and the translated strings don't (or the other way around). The script tries to sanitize that, but some corner cases are not handled. Original strings `msgid` and their translation `msgstr` in the `.po` file should have the same number of `\\n` characters at the same place,\n"
"- improperly escaped double quotes : the `msgid` and `msgstr` Gettext strings should be delimited by unescaped double quotes `\"` at each extremity of the string. Any other double quote, within the Gettext string, should be escaped using `\\\"`.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:150
#, no-wrap
msgid "The best way to fix errors is to open the relevant `.po` file in a text editor. If you can't find the error and solve it, you can try opening the file into Poedit, but when saving, it will usually completly erase the faulty strings without fixing them, so translation will need to be started again from scratch.\n"
msgstr ""

#. type: Title ###
#: content/contribute/translating.md:151
#, no-wrap
msgid "Build translated Markdown files"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:154
#, no-wrap
msgid "For the website and documentation, [Hugo](https://gohugo.io/) handles the translations of any given page `new_page.md` using the naming convention `new_page.LANG.md`, where `LANG` is the language code. Hugo natively supports manually writing these translated files in the same folder as their original, however, here we generate them using the `.po` translation file and the program `po4a`. The `build-modules.sh` and `tools/auto-translate.sh` scripts handle this internally, but you may want to generate those file manually :\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:167
#, no-wrap
msgid ""
"1. Update the `.pot` and `.po` files with the source code :\n"
"    ```bash\n"
"    $ sh tools/update-translations.sh\n"
"    ```\n"
"2. Create the translated `.md` files :\n"
"    ```bash\n"
"    $ sh tools/build-translations.sh --add\n"
"    ```\n"
"2. Cleanup the translated `.md` files :\n"
"    ```bash\n"
"    $ sh tools/build-translations.sh --remove\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:169
#, no-wrap
msgid "It is important to never commit the translated `.md` files with Git, as they are regenerated only from that script when building the website. This is only for repositiory hygiene, there is no technical drawback. Cleaning up the translated `.md` before committing ensures no mistakes.\n"
msgstr ""

#. type: Title ##
#: content/contribute/translating.md:170
#, no-wrap
msgid "Lost in translation ?"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:173
#, no-wrap
msgid "If you have issues or questions, feel free to ask on the dedicated [Matrix translators channel](https://matrix.to/#/#ansel-translators:matrix.org).\n"
msgstr ""

#. type: Title ##
#: content/contribute/translating.md:174
#, no-wrap
msgid "Notes to translators"
msgstr ""

#. type: Title ###
#: content/contribute/translating.md:176
#, no-wrap
msgid "Policy on capitals"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:179
#, no-wrap
msgid "The darktable project made a priority to put everything in lower case, which makes the GUI difficult to read, especially for tooltips having several sentences. Capitals anchor visually the beginning of sentences and other important text, like buttons, controls etc. It's no accident if all languages converged to using them (though German has its particular way of putting them everywhere), they help legibility whether you like their aesthetic or not.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:181
#, no-wrap
msgid "Ansel source code reuses most of darktable's labels and adds an initial capital in most places where they are needed (module headers, buttons). This is done by a bit of code using the C function `g_unichar_toupper()` from Gtk Glib, such that the original English text stays in lower case to keep compatibility with translations.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:183
#, no-wrap
msgid "This programmatic fix works for non-accented characters, no matter the language used (default strings in English, or translations). However, it does not work for initial accented characters, which will not be capitalized. In this case, translators are asked to force their translation to use initial capitalized accented characters whenever they are grammatically correct in their language.\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:185
#, no-wrap
msgid "New labels or old labels recently changed (which would break translations anyway) will get initial capitals from now on, in the source code (English version), so this should progressively be fixed.\n"
msgstr ""

#. type: Title ###
#: content/contribute/translating.md:186
#, no-wrap
msgid "Translating technical terms"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:189
#, no-wrap
msgid "Technical terms related to color theory and colorimetry need to be translated exactly from English, with extra care because these terms can exist also in common language (aka non-technical) but with a different meaning. The [International Electrotechnical Commission](https://www.electropedia.org/iev/iev.nsf/welcome) provides a search-engine where you can search for the English technical terms and get the accurate translations in different languages, including the main European ones as well as Arabian and Chinese.\n"
msgstr ""

#. type: Title ###
#: content/contribute/translating.md:190
#, no-wrap
msgid "Notes aux traducteurs francophones"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:193
#, no-wrap
msgid "La traduction de darktable comporte des bizarreries incompréhensibles pour quiconque utilise un ordinateur de bureau depuis plus de 10 ans. Voici une liste rapide des erreurs à corriger:\n"
msgstr ""

#. type: Plain text
#: content/contribute/translating.md:196
#, no-wrap
msgid ""
"* \"set\" est traduit \"positionné\" mais sa traduction correcte est \"réglé\". C'est illogique car \"settings\" est correctement traduit \"réglages\". Dans Ansel, on ne positionne que des masques (ou leurs nœuds de contrôle) dans le plan 2D. Le reste, ce sont des réglages.\n"
"* \"reset\" est traduit \"repositionné\" mais sa traduction correcte est \"réinitialiser\".\n"
"* En anglais, un grand nombre de verbes ont la même graphie pour leur infinitif et leur participe-passé, voire même existent comme substantif (\"set\", dans l'exemple ci-dessus, peut être traduit \"réglé\" ou \"régler\" ou comme \"ensemble\" sous sa forme substantivée). Si une action (pas encore effectuée) est requise, l'infinitif doit être utilisé en français. Si une action est déjà effectuée, c'est le participe-passé qui doit être employé. Les choses se corsent pour les substantifs car l'anglais ne requiert pas toujours de déterminant devant, il faut donc le déduire du contexte. À surveiller : \"click\" (cliquer ou clic), \"type\" (type ou entrer/taper), etc.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/design.md:1
#, no-wrap
msgid "Designing Ansel"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:8
#, no-wrap
msgid "Ansel is __designed__, not hacked. Hackers may enjoy \"working\" on accelerating the demise of Darktable by increasing its [technical debt](https://en.wikipedia.org/wiki/Technical_debt).\n"
msgstr ""

#. type: Title ##
#: content/contribute/design.md:9
#, no-wrap
msgid "What is design ?"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:12
#, no-wrap
msgid "Design is a process by which you unroll a methodology to bring a technical solution to an human's problem. The design process is meant to converge to the most suitable solution, while fighting the natural urge to rush into the first or the most comfortable idea.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:16
#, no-wrap
msgid ""
"{{< quote author=\"Louis Srygley\" >}}\n"
"Without requirements and design, programming is the art of adding bugs to an empty text file.\n"
"{{< /quote >}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:26
#, no-wrap
msgid ""
"1. __Design starts with an usecase__ : a defined task to achieve (on a picture), by a defined user, into a defined timeframe. If no usecase, then no problem to solve, then keep away from your code editor.\n"
"2. __Design requires to know the target user__ : education/training, level of craftmanship/mastership, etc.\n"
"3. __Design requires to understand the needs__ : in the context of Ansel, that will often need some art history and darkroom photography knowledge,\n"
"4. Once the problem and the user are understood, design requires to specify :\n"
"    - the expected functionnalities of the solution,\n"
"    - the scope of the solution (where in the lifecycle of an image does the solution stand ?),\n"
"    - the constraints and requirements of the solution (supporting some standard, allowing to process _n_ images per time unit, etc.),\n"
"    - a series of tests to complete that would validate the quality of the solution, as to limit unproductive opinions, biases and subjectivity in the validation process.\n"
"5. __Only then__ can the mockups and brainstorming begin, followed be prototypes.\n"
msgstr ""

#. type: Title ##
#: content/contribute/design.md:28
#, no-wrap
msgid "What design is not ?"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:31
#, no-wrap
msgid "Design does not deal with :\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:37
#, no-wrap
msgid ""
"- vague requirements of an undefined, future, or fantasized user,\n"
"- \"it would be cool if…\" (that's how you create inconsistent plugins collections),\n"
"- what people like (for everything someone likes, you will find someone to hate it),\n"
"- what people think they want (it's often not what they need),\n"
"- magic tech buzzwords that \"are the future\" and, as such, need to be plugged everywhere, regardless of their relevance or feasibility (yes, I'm talking about AI, NFT, blockchain, etc.)\n"
msgstr ""

#. type: Title ##
#: content/contribute/design.md:38
#, no-wrap
msgid "What is good design"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:41
#, no-wrap
msgid "Good design is :\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:49
#, no-wrap
msgid ""
"- minimalistic,\n"
"- robust,\n"
"- future-proof,\n"
"- generic and generalized,\n"
"- maintainable with limited resources,\n"
"- informed by science,\n"
"- compatible/interoperable with industry standards.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:51
#, no-wrap
msgid "Since Ansel is a workflow-based application, good design also minds the workflow as a whole, and where the problem/solution fit in it.\n"
msgstr ""

#. type: Title ##
#: content/contribute/design.md:52
#, no-wrap
msgid "How is good design done ?"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:55
#, no-wrap
msgid "To help the design process, communication should remain concise, on-focus, and the people taking part to that process should ensure they have a proper understanding of the theory and technical background involved in the problem/solution scope.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:57
#, no-wrap
msgid "It should be stressed that, although the project is software-driven, not all solutions involve coding. Sometimes (often ?), better education or better documentation is all that is needed.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:59
#, no-wrap
msgid "The purpose of a sane design process is to avoid biasing the solutions too early with one's pet design/tech and to avoid getting lost in the technicalities, but to always come back to the core basics and principles of what we are doing: post-processing possibly large batches of raw images for all kinds of output media.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:61
#, no-wrap
msgid "This is backed up by the fact that users rarely know their own needs, or rather, the needs they express are rarely the root of what they actually want. The difficult task of designing is to cut through the branches to go to the root, because solving the root problem usually ends up in more elegant, generic and minimalistic solutions.\n"
msgstr ""

#. type: Title ###
#: content/contribute/design.md:62
#, no-wrap
msgid "Problems come first"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:65
#, no-wrap
msgid "The first step of Ansel design process is to submit a feature request, on the [Community](https://community.ansel.photos/discussions-category?category=6). Feature requests have been moved out of Github because this platform is unwelcoming to non-programmers and non-English-speakers (although the Community supports only French and English).\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:67
#, no-wrap
msgid "This feature request will focus on the problem to solve and refrain from proposing any solution. The problem will be defined in terms of tasks to achieve in a photographer's workflow or expected visual outcome of the processed image, aka in terms of the end goal to achieve, not in terms of tooling or technicalities thought to be needed. This may lead to a discussion to dig into the roots of the problem, which are usually [well hidden beneath what the user thinks their problem is](https://eng.aurelienpierre.com/2020/04/the-designer-and-the-drilling-machine/).\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:69
#, no-wrap
msgid "No solution proposal is accepted at this stage.\n"
msgstr ""

#. type: Title ###
#: content/contribute/design.md:70
#, no-wrap
msgid "Solutions come second"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:73
#, no-wrap
msgid "When the definition and scope of the problem is agreed upon between the people involved in the discussion, solutions may be proposed. Further discussion may be necessary to evaluate the drawbacks and benefits of each solution, leading to the best solution being adopted on principle. Solutions are defined by their functionnalities (aka what they should do), not by their technology or means (how they should do it).\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:75
#, no-wrap
msgid "No prototype proposal is accepted at this stage.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:77
#, no-wrap
msgid "Adopted solutions will lead to a new issue getting triaged in the [project management Kanban board](https://github.com/users/aurelienpierre/projects/1/views/1).\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:79
#, no-wrap
msgid "They might be conditional to researching theoretical and technical aspects to assess their feasibility, in which case they will be triaged into the _To research_ column of the Kanban board. The research findings will be added to the original issue until the feasibility of the solution is proven. When it is, the issue will be moved in the \"To do\" column of the Kanban board.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:81
#, no-wrap
msgid "Adopted solutions might get directly triaged to the _To do_ column if they require only well-known tools and techs.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:83
#, no-wrap
msgid "Ideally, the points to test and the testing procedure to validate the prototype should be written even before having a working prototype. At very least, the tests should ensure no regression happened in related features and tools.\n"
msgstr ""

#. type: Title ###
#: content/contribute/design.md:84
#, no-wrap
msgid "Prototypes come third"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:87
#, no-wrap
msgid "Only the issues triaged in the \"To do\" column of the [project management Kanban board](https://github.com/users/aurelienpierre/projects/1/views/1) will be worked on, by myself or by anyone willing to tackle them.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:89
#, no-wrap
msgid "The prototype of the solution will be proposed in a pull request of a topic branch linking the original issue. Topic branches need to be rebased on the `master` branch e.g. `git rebase ustream master` or, if you update your branch locally with new master commits, do `git pull upstream master --rebase` or [globally set up git](https://git-scm.com/docs/git-pull#Documentation/git-pull.txt---rebasefalsetruemergesinteractive) to pull through `rebase` rather than `merge`. This ensures your branch history is kept clean with minimal effort, and keeps the `master` history clean too when your PR gets merged.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:91
#, no-wrap
msgid "When the prototype pull request is reviewed and if it fits the [code quality standards](./coding-style.md) (see below) while fitting the specifications of the adopted solution, it gets approved and automatically triaged to the \"To test/validating\" column of the [project management Kanban board](https://github.com/users/aurelienpierre/projects/1/views/1).\n"
msgstr ""

#. type: Title ###
#: content/contribute/design.md:92
#, no-wrap
msgid "Validation comes fourth"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:95
#, no-wrap
msgid "Approved pull requests will be merged early in the `candidate` or `dev` branch for testing, depending whether they may break image editing histories (by adding new module parameters or changing database scheme). This branch will always be the master branch with all pull requests pending validation on top. This is meant to help testing from people who are not necessarily up-to-speed with manual git branches merging. Unlike the `dev` branch, `candidate` should not break your edits.\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:97
#, no-wrap
msgid "If no bug or breakage is reported after some time and the prototype fulfils its initial purpose correctly, it will get merged in `master` and the related issue will be closed and moved to the \"Done\" column of the [project management Kanban board](https://github.com/users/aurelienpierre/projects/1/views/1).\n"
msgstr ""

#. type: Plain text
#: content/contribute/design.md:98
#, no-wrap
msgid "If the prototype proves itself unsatisfactory, it may be rejected and another one will need to be worked out.\n"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/contribute/organization.md:1
#, no-wrap
msgid "Project organization"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:8
#, no-wrap
msgid "The project is run by Aurélien Pierre, who tries to balance his photography work (mostly unexistent since 2019), developing & maintaining the software, and handling user education in individual training sessions. This calls for low-overhead project management strategies, relying on cloud-based collaborative tools.\n"
msgstr ""

#. type: Title ##
#: content/contribute/organization.md:10
#, no-wrap
msgid "Departments"
msgstr ""

#. type: Title ###
#: content/contribute/organization.md:12
#, no-wrap
msgid "Software development"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:15
#, no-wrap
msgid "Development is done on [Github](https://github.com/aurelienpierreeng/ansel),\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:17
#, no-wrap
msgid "Feature requests are not taken from users at this point. Users are consulted by the developer regarding their needs when a (re)design project is started. This is to prevent disruptive inputs at random times that would only slow-down the opened projects.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:19
#, no-wrap
msgid "The time planning of issues being currently worked is available on the [Kanban board](https://github.com/orgs/aurelienpierreeng/projects/1). Developers can pick issues in the _To Do_ column. New changes to watch and test are in the _Done_ column. Pull requests that don't follow the [design protocol](./design.md) will be refused.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:21
#, no-wrap
msgid "Developers that need help, introduction to the code base, or code reviews can [book an appointment with Aurélien Pierre](https://cal.com/aurelien-pierre/developer-mentorship) to do it by videoconferencing (possibly using [Visual Studio Live Share](https://visualstudio.microsoft.com/fr/services/live-share/)).\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:23
#, no-wrap
msgid "News about development projects closed or milestones are published on the [blog](/news). A dedicated [Matrix chat](https://matrix.to/#/#ansel-dev:matrix.org) centralizes all updates and notifications from new commits, Github issues, new blog posts and new community forum posts.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:27
#, no-wrap
msgid "Installable packages for Windows (`.exe`) and Linux (`.AppImage`) are built automatically on Github around 1:00 am UTC, if new commits were pushed the day before. The direct download links are published to a dedicated [Matrix chat](https://matrix.to/#/#ansel-builds:matrix.org), so you can get see the notifications pop and get the new builds, all in one place.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:29
#, no-wrap
msgid "Nightly builds are meant to promote early testing from users who can't or don't want to build themselves from source. They can be instable.\n"
msgstr ""

#. type: Title ###
#: content/contribute/organization.md:30
#, no-wrap
msgid "Bugs"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:33
#, no-wrap
msgid "Bugs (as in, stuff that breaks the software), are handled on [Github](https://github.com/aurelienpierreeng/ansel/issues) when they are confirmed.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:35
#, no-wrap
msgid "They can be discussed on [the community forum](https://community.ansel.photos) or the [Matrix chats](https://app.element.io/#/room/#ansel:matrix.org), especially to confirm that they are actually bugs (and not design changes).\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:37
#, no-wrap
msgid "Opening issues on Github is important to include them to the project management and track them from a single place.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:41
#, no-wrap
msgid ""
"{{< note >}}\n"
"More details : read [a culture of problem solving in open-source software](https://community.ansel.photos/view-discussion/a-culture-of-problem-solving-in).\n"
"{{</ note >}}\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:45
#, no-wrap
msgid "The website is generated using [Hugo static website builder](https://gohugo.io/), which is a fairly low-overhead way of writing technical websites using Markdown syntax.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:47
#, no-wrap
msgid "The source code of the website is on [Github](https://github.com/aurelienpierreeng/ansel-website/). You can correct typos or help translating directly by editing the source files on Github UI. Otherwise, you can install Hugo on your computer, then the `Readme` file on Github explains how to build a preview website locally, using a test server on your computer, to better preview (and debug) your changes.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:49
#, no-wrap
msgid "Changes to the website have to use the typical Git + Pull Request (on Github) workflow, which can deter non-programmers, but it's the least shitty way of remote-collaborating on somethng text-based, while ensuring reversible versionning and backups.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:53
#, no-wrap
msgid "The documentation is not included in the website repository for licensing reasons (GPL v3), so it is imported as an external Hugo module. The source code is on [Github](https://github.com/aurelienpierreeng/ansel-doc), and everything else applies the same as for the website. The `Readme` presents the available shortcodes that you can use to format the content, in Markdown files.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:55
#, no-wrap
msgid "There is a caveat, though, if you want to build the documentation locally, because it imports the theme from the main Ansel website, so the easiest way is actually to build the main website while linking locally the documentation as a module. The procedure is detailed on the `Readme` of the main website.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:57
#, no-wrap
msgid "The documentation is currently undergoing structural changes, along with software design changes, so don't hesitate to ask on [Matrix](https://matrix.to/#/#ansel-en:matrix.org) if you have a particular project in mind, before you commit to something on the verge of being removed.\n"
msgstr ""

#. type: Title ###
#: content/contribute/organization.md:59
#, no-wrap
msgid "Teaching and user education"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:62
#, no-wrap
msgid "As many \"bugs\" report show, insufficiently-trained users have wrong expectations, and if you take their feature requests too seriously, you end up with crippled software duplicating features and CPU load. Those need to be solved at the root : with teaching.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:69
#, no-wrap
msgid ""
"1. The community forum has a place to post links to [video tutorials](https://community.ansel.photos/videos-home),\n"
"1. The community forum has a place for users to write educational [blog posts](https://community.ansel.photos/posts-home),\n"
"1. The [documentation](../doc) is meant to provide usage information closely tied to the software GUI, so users could learn about the features in linear order of GUI appearance.\n"
"1. The main website [workflow](../workflows/) section is meant to provide usage information tied to a specific task to achieve, so users could learn \"how to\".\n"
"1. The main website [resources](../resources/) section is meant to provide background theoritical information to help building a deeper understanding of color and photography, and empower users to troubleshoot retouching issues themselves.\n"
"1. Users can [book 1-on-1 training sessions](https://cal.com/aurelien-pierre/darktable-ansel-editing-class-en) (classes) with Aurélien Pierre, for faster and more focused training.\n"
msgstr ""

#. type: Title ##
#: content/contribute/organization.md:71
#, no-wrap
msgid "Management"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:74
#, no-wrap
msgid "This is mostly a one-guy operation, so things have to be efficient and low-overhead. Which requires some discipline.\n"
msgstr ""

#. type: Title ###
#: content/contribute/organization.md:75
#, no-wrap
msgid "Programming management"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:78
#, no-wrap
msgid "There are usually 2 open programming projects at the same time, that are chosen because independent from each other. This allows to switch to project #2 while waiting for user feedback on changes made in #1, in a way that still allows to identify which one created regressions and new bugs. Think of it as alternate single focus.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:80
#, no-wrap
msgid "In the middle of a project, the developer will typically not deal with, care about nor listen to issues related to anything but that project, because brainpower is a precious resource, faster spent than recovered. In particular, feature requests on other parts of the software will be disregarded.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:82
#, no-wrap
msgid "The day-to-day focus is subjected to change unexpectedly, depending on the shit uncovered while fixing other shit, thanks to Darktable crappy legacy of semi-broken non-modular madness-inducing spaghetti code, which often requires partial or full rewrites (in any case, cleaning up) before attempting to fix anything (in a way that doesn't induce more future problems, that is).\n"
msgstr ""

#. type: Title ###
#: content/contribute/organization.md:83
#, no-wrap
msgid "Communication"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:86
#, no-wrap
msgid "We live in a World where the volume of information and communication has become overwhelming and humans don't have the bandwidth to process all of it. Endless threads and unregulated conversations are actively harming communication by diluting important information and exhausting the reader. **Discussion is solely meant to reach an understanding and proceed to actionable decisions**. There is a subtle trade-off between completeness and conciseness to find.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:88
#, no-wrap
msgid "For chat or general questions, please use the [Matrix space](https://app.element.io/#/room/#ansel:matrix.org). But even there, conciseness is key.\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:90
#, no-wrap
msgid "In pull requests and issues, whether on Github or on the [Community forum](https://community.ansel.photos) please try to stay concise and on-point :\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:96
#, no-wrap
msgid ""
"* Technical details (like OS, use of OpenCL, screen size, etc.) should make use of bullet-point lists.\n"
"* Screenshots and drawings can go a long way.\n"
"* If you are replying to a particular point or person, quote the section of text you are replying to.\n"
"* Break your text into paragraphs of roughly 4 to 8 lines, but avoid sending each sentence to a new paragraph.\n"
"* Keep in mind everybody speaks English but very few people are native speakers, so try to stick to basic [Globish](https://en.wikipedia.org/wiki/Globish_(Nerri%C3%A8re)).\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:98
#, no-wrap
msgid "Good principles on issues/tickets interactions can be found [here](https://www.yegor256.com/2014/11/24/principles-of-bug-tracking.html).\n"
msgstr ""

#. type: Title ##
#: content/contribute/organization.md:99
#, no-wrap
msgid "Updates and notifications"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:102
#, no-wrap
msgid "Many centralized and automated ways are offered to keep track of what's new in the project :\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:110
#, no-wrap
msgid ""
"- The main website has a central RSS feed, where new and updated page goes : [global RSS](../index.xml),\n"
"- For more granularity, each section of the website (News, Doc, Workflows, etc.) has its own RSS feed too. The <i class=\"fas fa-rss-square\"></i> icon you find on section index pages and on every page links to that RSS feed in the current language.\n"
"- The Community website has a [central public RSS feed](https://community.ansel.photos/m/timeline/rss/public/) too (truncated to the 25 most recent events).\n"
"- Code changes can be tracked from commits index on [Github](https://github.com/aurelienpierreeng/ansel/commits/master/), or using the [Github Atom feed](https://github.com/aurelienpierreeng/ansel/commits/master.atom) (truncated to the 20 most recent commits). Commit messages are usually quite verbose and should explain well enough what was changed and why.\n"
"- New commits, Github issues updates (created, edited, closed), new community posts and new website pages are all posted to a [dedicated Matrix chat](https://matrix.to/#/#ansel-dev:matrix.org).\n"
"- Nightly builds packages are posted to a [dedicated Matrix chat](https://matrix.to/#/#ansel-builds:matrix.org). They are also listed on the [Github pre-release page](https://github.com/aurelienpierreeng/ansel/releases/tag/v0.0.0).\n"
"- Open and closed project/issues can be seen on the Github [Kanban board](https://github.com/orgs/aurelienpierreeng/projects/1).\n"
msgstr ""

#. type: Plain text
#: content/contribute/organization.md:113
#, no-wrap
msgid ""
"{{< note >}}\n"
"The website RSS feeds are untruncated (all items since forever are kept), and have the `pubDate` and `updated` tags properly set. On each page content update, the `guid` tag is changed to force RSS readers to bump updated pages on top.\n"
"{{< /note >}}\n"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/_index.md:1
#, no-wrap
msgid "darktable"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/_index.md:1
#, no-wrap
msgid "ansel"
msgstr ""

#. type: Yaml Front Matter Array Element: tags
#: content/_index.md:1
#, no-wrap
msgid "photo editing"
msgstr ""

#. type: Yaml Front Matter Hash Value: title
#: content/_index.md:1
#, no-wrap
msgid "Ansel"
msgstr ""

#. type: Plain text
#: content/_index.md:21
#, no-wrap
msgid ""
"<div class=\"pt-5 my-5 text-center\">\n"
"  <h1 class=\"display-4 fw-bold\">Your digital darkroom</h1>\n"
"  <div class=\"col-lg-6 mx-auto\">\n"
"    <p class=\"lead mb-4\"><em>Ansel</em> is an open-source photo-editing software for digital artists, designed to help you achieve your own interpretation of raw digital photographs.</p>\n"
"  </div>\n"
"<div class=\"my-5\">\n"
"{{< slideshow images=\"lighttable.jpg,darkroom.jpg\" >}}\n"
"</div>\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: content/_index.md:23
#, no-wrap
msgid "<div class=\"container\">\n"
msgstr ""

#. type: Plain text
#: content/_index.md:27
#, no-wrap
msgid ""
"{{< quote author=\"Ansel Adams\" >}}\n"
"The negative is the score, and the print is the performance.\n"
"{{< /quote >}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:29
#, no-wrap
msgid "<div class=\"lead\">\n"
msgstr ""

#. type: Plain text
#: content/_index.md:31
#, no-wrap
msgid "Pressing the camera shutter merely started a process ending when the on-screen picture looks like the one you had in mind. _Ansel_ proposes to put the artists back at the center of the creative process and enables them with an interface to manipulate images with precision and nuance, using state-of-the-art color science and independent color controls.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:36 content/_index.md:71 content/_index.md:106
#: content/_index.md:221 content/_index.md:241 content/_index.md:271
#: content/_index.md:315 content/_index.md:357
#, no-wrap
msgid "{{< divider >}}\n"
msgstr ""

#. type: Title ##
#: content/_index.md:37
#, no-wrap
msgid "Install"
msgstr ""

#. type: Plain text
#: content/_index.md:44
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% card icon=\"linux fab\" title=\"Linux\" %}}\n"
"Distribution-agnostic executable\n"
"{{< button url=\"https://nightly.link/aurelienpierreeng/ansel/workflows/lin-nightly/master/ansel.stable.AppImage.zip\" label=\"Download ansel.appimage\" icon=\"download\" >}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:49
#, no-wrap
msgid ""
"{{% card icon=\"windows fab\" title=\"Windows\" %}}\n"
"Windows 7 to 11 installer\n"
"{{< button url=\"https://nightly.link/aurelienpierreeng/ansel/workflows/win-nightly/master/ansel.stable.win64.zip\" label=\"Download ansel.exe\" icon=\"download\" >}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:55
#, no-wrap
msgid ""
"{{% card icon=\"terminal\" title=\"Build from source\" %}}\n"
"Best performance for your hardware\n"
"{{< button url=\"/en/doc/install\" label=\"Building instructions\" icon=\"wrench\" >}}\n"
"{{% /card %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:58 content/_index.md:76 content/_index.md:94
#: content/_index.md:276 content/_index.md:294
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:62
#, no-wrap
msgid ""
"{{< warning >}}\n"
"__Ansel is in alpha version__. The GUI is susceptible to change and the application may crash under some circumstances.\n"
"{{< /warning >}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:69
#, no-wrap
msgid ""
"{{% /column %}}\n"
"{{% column %}}\n"
"The links above always point to the latest nightly build of the \"fairly stable\" branch. If you want a particular version or need to roll back, [you can find all intermediate versions on Github](https://github.com/aurelienpierreeng/ansel/releases/tag/v0.0.0).\n"
"{{% /column %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Title ##
#: content/_index.md:72
#, no-wrap
msgid "Why Ansel ?"
msgstr ""

#. type: Plain text
#: content/_index.md:78
#, no-wrap
msgid "Many solutions already exist to produce ready-to-consume photographs for masses, from smartphones filters to out-of-cameras JPEGs, followed recently by AI-driven automagic toy filters. These make photography easier than ever, but are the produced images really __your__ images and, in any case, the images __you__ expected ?\n"
msgstr ""

#. type: Plain text
#: content/_index.md:81 content/_index.md:99 content/_index.md:260
#: content/_index.md:281 content/_index.md:306 content/_index.md:339
#, no-wrap
msgid ""
"{{% /column %}}\n"
"{{% column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:83
#, no-wrap
msgid "_Ansel_ lets you interpret your raw photographs much like a music instrument, when most software tries to automatically play the score for you. It aims at being an underwhelming, boring, tool that just does what you ask of it, without getting in your way.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:86 content/_index.md:104 content/_index.md:269
#: content/_index.md:286 content/_index.md:311
#, no-wrap
msgid ""
"{{% /column %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:91
#, no-wrap
msgid ""
"<div class=\"text-center my-5\">\n"
"<span class=\"display-5\">Get excited by your results</span><br />\n"
"<span class=\"fs-4\">Not by your toys</span>\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: content/_index.md:96
#, no-wrap
msgid "When you like music, you can choose between learning how to play or buying recordings. It's easier to buy, but more satisfying to play. Photo editing applications have lied to users for decades, pretending they could play without learning, because the software would deal with technical complexities for them, and entirely hide them.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:101
#, no-wrap
msgid "It turns out that users have only been fighting applications they understand less and less, for control over their results, and to recover those tricky cases where automation fails. As time will go by, expect to lose more and more time fighting AIs to get natural-looking results… manually. Why not simply cut the middle-man ?\n"
msgstr ""

#. type: Title ##
#: content/_index.md:107
#, no-wrap
msgid "What can Ansel do for you ?"
msgstr ""

#. type: Plain text
#: content/_index.md:110
#, no-wrap
msgid "Ansel allows you to manage your collections of pictures, to edit your raw digital photographs and film scans non-destructively and to export the result to common file formats. It stores your editing histories as text and lets you go back in time at any editing step you like, anytime.\n"
msgstr ""

#. type: Title ###
#: content/_index.md:111
#, no-wrap
msgid "Color work"
msgstr ""

#. type: Plain text
#: content/_index.md:114
#, no-wrap
msgid "Ansel ships a recent color science, compatible with HDR : the chromatic adaptation CIE CAT 2016, the HDR color space JzAzBz (2017) and the perceptual color space darktable UCS 2022, developed specifically to manipulate color saturation without the fluorescent effect.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:122
#, no-wrap
msgid ""
"<div class=\"row\">\n"
"{{% column %}}\n"
"<h5>Color calibration</h5>\n"
"{{% compare after=\"calibration-after.jpg\" before=\"calibration-before.jpg\" cols=\"2\" %}}\n"
"Fix white balance and get __high-fidelity__ colors in just a few clicks, by calibrating colors with a Color Checker directly in the darkroom.\n"
"{{% /compare %}}\n"
"{{% /column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:130
#, no-wrap
msgid ""
"{{% column %}}\n"
"<h5>Color-grading</h5>\n"
"{{< compare after=\"grading-after.jpg\" before=\"grading-before.jpg\" cols=\"2\" >}}\n"
"Give ambiance and character to your pictures by polishing their color palette with nuanced and fine-grained controls, in RGB, Ych or HSB color spaces, for creative and corrective purposes.\n"
"{{</ compare >}}\n"
"{{% /column %}}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: content/_index.md:138
#, no-wrap
msgid ""
"<div class=\"row\">\n"
"{{% column %}}\n"
"<h5>Color matching</h5>\n"
"{{< compare after=\"matching-after.jpg\" before=\"matching-before.jpg\" cols=\"2\">}}\n"
"Force the chromatic adaptation such that any selected object matches a predetermined color, input from CIE Lab coordinates (for logos and brand colors), or by sampling the color of the same object in another shot, as to even the color rendition over the series.\n"
"{{</ compare >}}\n"
"{{% /column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:146
#, no-wrap
msgid ""
"{{% column %}}\n"
"<h5>Hue qualifying and keying</h5>\n"
"{{% compare after=\"masking-after.jpg\" before=\"masking-before.jpg\" cols=\"2\" %}}\n"
"Use the hue, chroma and lightness qualifiers to quickly define masks and apply selective effects. Combine parametric masks with drawn masks and boolean operations. Refine and feather the edges of masks by blurring or using clever edges detection.\n"
"{{% /compare %}}\n"
"{{% /column %}}\n"
"</div>\n"
msgstr ""

#. type: Title ###
#: content/_index.md:148
#, no-wrap
msgid "Tonal work"
msgstr ""

#. type: Plain text
#: content/_index.md:151
#, no-wrap
msgid "The tonal working methods are designed to manipulate luminance without affecting hue nor saturation, in order to respect the color work, done apart.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:159
#, no-wrap
msgid ""
"<div class=\"row\">\n"
"{{% column %}}\n"
"<h5>HDR tone mapping</h5>\n"
"{{% compare after=\"filmic-after.jpg\" before=\"filmic-before.jpg\" cols=\"2\" %}}\n"
"Recover deep shadows and compress the dynamic range while retaining original saturation and hue, with gamut mapping to ensure the colors fit in the output color space. _(Photo : Andreas Schneider)_\n"
"{{% /compare %}}\n"
"{{% /column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:167
#, no-wrap
msgid ""
"{{% column %}}\n"
"<h5>Zone-system editing</h5>\n"
"{{% compare after=\"toneeq-after.jpg\" before=\"toneeq-before.jpg\" cols=\"2\" %}}\n"
"Balance densities based on exposure zones, by preserving local contrast thanks to an edge detection algorithm, and select the exposure zones to affect directly from the picture, through the interactive cursor. _(Photo : Andreas Schneider)_\n"
"{{% /compare %}}\n"
"{{% /column %}}\n"
"</div>\n"
msgstr ""

#. type: Title ###
#: content/_index.md:168
#, no-wrap
msgid "Image reconstruction"
msgstr ""

#. type: Plain text
#: content/_index.md:177
#, no-wrap
msgid ""
"<div class=\"row\">\n"
"{{% column %}}\n"
"<h5>Lens deblurring</h5>\n"
"{{% compare after=\"sharpen-after.jpg\" before=\"sharpen-before.jpg\" cols=\"2\" %}}\n"
"Unleash the power of multiscale, gradient-based machine learning to rejuvenate old lenses, recover focusing mistakes or add emphasis on your subject, but without the typical edge artifacts, over-sharpening oddities or added noise.\n"
"{{% /compare %}}\n"
"{{% /column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:185
#, no-wrap
msgid ""
"{{% column %}}\n"
"<h5>Dehazing</h5>\n"
"{{% compare after=\"dehaze-after.jpg\" before=\"dehaze-before.jpg\" cols=\"2\" %}}\n"
"Restore some depth in foggy and hazy shots by bringing back textures and saturation in colors, without overaccentuating already sharp details.\n"
"{{% /compare %}}\n"
"{{% /column %}}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: content/_index.md:193
#, no-wrap
msgid ""
"<div class=\"row\">\n"
"{{% column %}}\n"
"<h5>Denoising</h5>\n"
"{{< compare after=\"denoise-after.jpg\" before=\"denoise-before.jpg\" cols=\"2\">}}\n"
"Remove chromatic noise, soften and blend luminance noise.\n"
"{{</ compare >}}\n"
"{{% /column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:201
#, no-wrap
msgid ""
"{{% column %}}\n"
"<h5>Highlights reconstruction</h5>\n"
"{{< compare after=\"highlights-after.jpg\" before=\"highlights-before.jpg\" cols=\"2\" >}}\n"
"Salvage both color and texture in highlights, recover blown areas by propagating gradients while the gamut-mapping watches your back to ensure colorful highlights can still be printed at their proper hue. You don't have to bleach highlights to hide problems anymore.\n"
"{{</ compare >}}\n"
"{{% /column %}}\n"
"</div>\n"
msgstr ""

#. type: Title ###
#: content/_index.md:202
#, no-wrap
msgid "Specialized features"
msgstr ""

#. type: Plain text
#: content/_index.md:211
#, no-wrap
msgid ""
"<div class=\"row\">\n"
"{{% column %}}\n"
"<h5>Automatic perspective correction</h5>\n"
"{{< compare after=\"perspective-after.jpg\" before=\"perspective-before.jpg\" cols=\"2\" >}}\n"
"Let the machine learning detect automatically vertical and horizontal lines and compute the best geometric correction to rotate, straighten and crop the picture, optionaly taking into account the kind of lens used.\n"
"{{</ compare >}}\n"
"{{% /column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:219
#, no-wrap
msgid ""
"{{% column %}}\n"
"<h5>Censoring</h5>\n"
"{{< compare after=\"censorize-after.jpg\" before=\"censorize-before.jpg\" ols=\"2\" >}}\n"
"Anonymize people, license plates, etc. and play with use conditions of socially prude network without defiling your pictures too much.\n"
"{{</ compare >}}\n"
"{{% /column %}}\n"
"</div>\n"
msgstr ""

#. type: Title ##
#: content/_index.md:223
#, no-wrap
msgid "Compatibility"
msgstr ""

#. type: Plain text
#: content/_index.md:239
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% card title=\"Edits\" icon=\"desktop\" %}}\n"
"Ansel is based on darktable 4.0 and is fully compatible with darktable 2.x up to 4.0 database and XMP files. Coming from darktable ?\n"
"{{< button url=\"/en/doc/special-topics/from-darktable/\" label=\"Find out what is changed\" icon=\"sync\" >}}\n"
"{{% /card %}}\n"
"{{% card title=\"Cameras\" icon=\"camera\" %}}\n"
"Ansel uses Rawspeed and Libraw to decode raw photographs. New cameras may need up to 24 months to be fully supported after their commercial release.\n"
"{{< button url=\"/en/resources/supported-cameras\" label=\"Supported cameras\" icon=\"wrench\" >}}\n"
"{{% /card %}}\n"
"{{% card title=\"Languages\" icon=\"language\" %}}\n"
"The software is integrally translated in English, French, Italian and simplified Chinese. Partial translations are available in German, Spanish, Portugese, Ukranian, etc.\n"
"{{< button url=\"https://github.com/aurelienpierreeng/ansel/wiki/Translations\" label=\"Improve translations\" icon=\"comment\" >}}\n"
"{{% /card %}}\n"
"{{% /row %}}\n"
msgstr ""

#. type: Title ##
#: content/_index.md:242
#, no-wrap
msgid "Darktable, but better"
msgstr ""

#. type: Plain text
#: content/_index.md:245 content/_index.md:363
#, no-wrap
msgid "{{% row %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:247
#, no-wrap
msgid "{{% column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:249 content/_index.md:328
#, no-wrap
msgid "<div class=\"no-hyphenation lead\">\n"
msgstr ""

#. type: Plain text
#: content/_index.md:251
#, no-wrap
msgid "Ansel is what Darktable 4.0 could have been if it didn't die of [feature creep](https://en.wikipedia.org/wiki/Feature_creep).\n"
msgstr ""

#. type: Plain text
#: content/_index.md:255
#, no-wrap
msgid "Between 2020 and 2023, Darktable has suffered [massive code additions of peripheral features](./news/darktable-dans-le-mur-au-ralenti/), often ill-coded, poorly designed and penalizing usability, performance and maintenance. Too many workarounds failed to fix bugs, but layered new problems on top of legacy code : welcome in maintenance nightmare.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:257
#, no-wrap
msgid "In fairness, without project management or feature planning, this was bound to happen. Darktable has always struggled to be more than a pack of individual plugins.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:262
#, no-wrap
msgid "The result is a weird, frustrating, app trying to reinvent GUI paradigms on its own, trying to do everything for everyone, slower and less stable than before, and absolutely terrible to debug.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:264
#, no-wrap
msgid "With a scene-referred-centric user interface, many modules merged into a global menu, rewritten import tool and sparing image pipeline recomputations, Ansel is a Darktable 4.0 variant where 30.000 lines of poorly-written code and half-broken features have been removed, and 11.000 lines rewritten : __it runs faster, smoother, uses less power and requires less configuration__.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:266
#, no-wrap
msgid "With a decreased code complexity, its maintenance should be easier in the future too.\n"
msgstr ""

#. type: Title ##
#: content/_index.md:272
#, no-wrap
msgid "Beyond documentation"
msgstr ""

#. type: Plain text
#: content/_index.md:278
#, no-wrap
msgid "The typical, recurring painpoint of open-source software projects is documentation. When there is none, users complain about it. When there is one, they complain it is too long, not complete enough, or it doesn't include use cases. Developers expect users to have a linear reading of the project documentation. It will simply not happen and developers will serve as parrots. That only builds up frustration on both ends. __Documentation is not enough__.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:283
#, no-wrap
msgid "Chantal is a bilingual (French-English) language model trained specifically for image processing, color theory and photography, that understands technical slang, synonyms and some translations. __Its web interface allows search queries through a central index__ of open-source software documentation, bug reports, user forums, YouTube channels, scientific publications and standards organizations (CIE, ICC, ACES).\n"
msgstr ""

#. type: Plain text
#: content/_index.md:291
#, no-wrap
msgid ""
"<div class=\"text-center my-5\">\n"
"<span class=\"display-5\">Meet <a href=\"https://chantal.aurelienpierre.com\" target=\"_blank\">Chantal</a></span><br />\n"
"<span class=\"fs-4\">your image processing AI librarian</span>\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: content/_index.md:296
#, no-wrap
msgid "<div class=\"no-hyphenation lead mx-auto\">\n"
msgstr ""

#. type: Plain text
#: content/_index.md:298
#, no-wrap
msgid "Chantal is Ansel's knowledge infrastructure :\n"
msgstr ""

#. type: Plain text
#: content/_index.md:301
#, no-wrap
msgid ""
"- quickly find relevant information among trusted sources,\n"
"- avoid asking questions already answered.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:308
#, no-wrap
msgid "<span class=\"no-hyphenation lead mx-auto\">Designed to make users cleverer, instead of making the software dumber.</span> The artificial intelligence feeds you learning material on topics of your choice. Let's invest in natural intelligence.\n"
msgstr ""

#. type: Title ##
#: content/_index.md:316
#, no-wrap
msgid "There is a full-time designer here"
msgstr ""

#. type: Plain text
#: content/_index.md:320
#, no-wrap
msgid ""
"{{% row %}}\n"
"{{% column%}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:326
#, no-wrap
msgid ""
"<div class=\"d-grid float-start me-4\">\n"
"{{<figure src=\"Auto-portrait-0088-MLM_0774_01.jpg\" style=\"width: 200px\"/>}}\n"
"{{< button url=\"https://photo.aurelienpierre.com/portfolio\" label=\"Photography portfolio\" icon=\"image\" class=\"text-center w-100 mt-3\">}}\n"
"{{< button url=\"https://eng.aurelienpierre.com\" label=\"Engineering blog\" icon=\"code\" class=\"text-center w-100\">}}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: content/_index.md:330
#, no-wrap
msgid "Wouldn't it be great if open-source software had full-time designers, able to take the necessary time to understand issues and to find simple solutions, instead of piling up quick hacks and workarounds, in an ever-growing codebase ?\n"
msgstr ""

#. type: Plain text
#: content/_index.md:334
#, no-wrap
msgid "Designing is not jumping on a code editor to write as much as possible in as little time as possible. It's actually thinking a lot to write as little code as possible, because more code means more bugs.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:336
#, no-wrap
msgid "On my photographs, I make the styling, the make-up, the lighting, the shot, the editing, the retouching, the software color filters, the documentation to use them, the website to talk about them in 2 languages, and even the colorspace used for saturation adjustment. You will find _very_ few people with this kind of full-stack understanding of light and color able to also write efficient computer programs and read academic research papers on applied mathematics. For some reason, there are _lots_ of guys trying to write imaging applications in their spare time. Make your own conclusions here.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:341
#, no-wrap
msgid "I have given 4 years of my life to the Darktable project, only to see it destroyed by clueless geeks playing code stashing on week-ends, everyone pushing his own agenda with no sense of design, in a project where nobody is responsible for anything and where we work too fast on everything at the same time.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:343
#, no-wrap
msgid "Ansel development is done at a pace that ensures quality of both the code (backend) and the design (frontend). Design is based on the user feedback I gathered from giving individual editing/retouching lessons with Darktable over the past 3 years, and on the 2 user surveys I ran in 2020 and 2022. Priorities are managed considering the software is meant to export RAW images, meaning R&D is done on image matters and everything else should just follow common computer GUI paradigms and not get in the way.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:345
#, no-wrap
msgid "<div class=\"bg-white rounded border border-light p-3 lead shadow-sm\">\n"
msgstr ""

#. type: Plain text
#: content/_index.md:347
#, no-wrap
msgid "Developing Ansel takes an average of 45 h/week for not even minimal wage. Open-source needs better imaging applications, which requires someone with the right skills and enough time. __Ansel needs manpower and manpower needs to pay bills__.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:349
#, no-wrap
msgid "{{< button url=\"https://community.ansel.photos/donations-make\" label=\"Support the development\" icon=\"donate\" class=\"d-block text-center mx-auto btn\">}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:353
#, no-wrap
msgid "{{% /column %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:355 content/_index.md:383
#, no-wrap
msgid "{{% /row %}}\n"
msgstr ""

#. type: Title ##
#: content/_index.md:358
#, no-wrap
msgid "Source code"
msgstr ""

#. type: Plain text
#: content/_index.md:361
#, no-wrap
msgid "Ansel software and documentation are released under the GNU/GPL v3 license and versionned with Git. The website is copyrighted but publicly readable. The work repositories are hosted on Github and are mirrored on Gitlab for backup.\n"
msgstr ""

#. type: Plain text
#: content/_index.md:369
#, no-wrap
msgid ""
"{{% card title=\"Software\" icon=\"desktop\" %}}\n"
"GNU/GPL v3 license.\n"
"{{< button url=\"https://github.com/aurelienpierreeng/ansel\" label=\"Github (original)\" icon=\"github fab\">}}\n"
"{{< button url=\"https://gitlab.com/aurelienpierreeng/ansel\" label=\"Gitlab (mirror)\" icon=\"gitlab fab\">}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:375
#, no-wrap
msgid ""
"{{% card title=\"Documentation\" icon=\"book\" %}}\n"
"GNU/GPL v3 license.\n"
"{{< button url=\"https://github.com/aurelienpierreeng/ansel-doc\" label=\"Github (original)\" icon=\"github fab\">}}\n"
"{{< button url=\"https://gitlab.com/aurelienpierreeng/ansel-doc\" label=\"Gitlab (mirror)\" icon=\"gitlab fab\">}}\n"
"{{% /card %}}\n"
msgstr ""

#. type: Plain text
#: content/_index.md:381
#, no-wrap
msgid ""
"{{% card title=\"Website\" icon=\"globe\" %}}\n"
"Copyright.\n"
"{{< button url=\"https://github.com/aurelienpierreeng/ansel-website\" label=\"Github (original)\" icon=\"github fab\">}}\n"
"{{< button url=\"https://gitlab.com/aurelienpierreeng/ansel-website\" label=\"Gitlab (mirror)\" icon=\"gitlab fab\">}}\n"
"{{% /card %}}\n"
msgstr ""
